<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ansible + Multipass：快速佈建K8s多節點環境</title>
      <link href="/posts/Ansible+Multipass%20%E5%BF%AB%E9%80%9F%E4%BD%88%E5%BB%BAK8s%E5%A4%9A%E7%AF%80%E9%BB%9E%E7%92%B0%E5%A2%83/"/>
      <url>/posts/Ansible+Multipass%20%E5%BF%AB%E9%80%9F%E4%BD%88%E5%BB%BAK8s%E5%A4%9A%E7%AF%80%E9%BB%9E%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在學習或測試 Kubernetes（K8s）相關技術時，快速建立一個乾淨、可控又一致的環境是一項不小的挑戰。</p><p>Minikube 和 Kind 可以快速模擬 Kubernetes  cluster環境，但前置的安裝、kubeadm 初始化 control-plane 、worker加入與設置網路插件（如 Flannel、Calico）等就無法實際練習</p><p>而Multipass 可以建立完整的 Ubuntu VM，模擬實際部署中的獨立主機。每個節點都有自己的 IP 與網路介面，能模擬真實內部網路通訊。</p><p>Ansible 可以管理多台 VM 並自動化配置各個角色下VM的設置</p><h2 id="章節重點"><a href="#章節重點" class="headerlink" title="章節重點"></a>章節重點</h2><ul><li>Ansible 介紹</li><li>Multipass 介紹</li><li>Ansible + Multipass：快速佈建K8s環境</li></ul><h2 id="Multipass-介紹"><a href="#Multipass-介紹" class="headerlink" title="Multipass 介紹"></a>Multipass 介紹</h2><div class="note info flat no-icon flat"><ul><li>Multipass 是輕量級的虛擬機管理工具，支援 Linux、Windows 和 macOS。能用一條指令就快速啟動一個全新的 Ubuntu 環境</li><li>在不同系統上，它使用不同的虛擬化技術：Linux 上使用 KVM、Windows 上使用 Hyper-V、macOS 上使用 QEMU，也可以選擇在 Windows 和 macOS 上使用 VirtualBox。Multipass 會自動為你下載 Ubuntu 映像檔並保持更新</li><li>此外，它支援 cloud-init 的 metadata，讓你可以在筆電或工作站上模擬一個小型的雲端部署環境</li></ul></div><p>常用指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立 VM</span></span><br><span class="line">multipass launch --name node01 --cpus 2 --mem 2G --disk 10G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 VM</span></span><br><span class="line">multipass list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 進入 VM</span></span><br><span class="line">multipass shell node01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除 VM</span></span><br><span class="line">multipass delete node01</span><br><span class="line">multipass purge</span><br></pre></td></tr></table></figure><h2 id="Ansible-介紹"><a href="#Ansible-介紹" class="headerlink" title="Ansible 介紹"></a>Ansible 介紹</h2><p>Ansible 是一個基於 SSH 的自動化工具，不需在目標機器安裝 Agent，只要能 SSH 連進去即可進行遠端節點管理。</p><p>核心概念：</p><ul><li><strong>Inventory</strong>：管理主機清單</li><li><strong>Playbook</strong>：描述要對主機做哪些事的腳本（通常用 YAML 撰寫）</li><li><strong>Role</strong>：模組化 Playbook，便於重複使用與擴展</li><li><strong>Task</strong>：單一步驟操作，例如安裝套件、修改檔案等</li></ul><div class="note info flat no-icon flat"><p>由於沒有安裝Agent的機制，不像其他Chef等，可以做到 防止配置偏移(Configuration drift) 的功能</p></div><h2 id="Ansible-Multipass：快速佈建K8s環境"><a href="#Ansible-Multipass：快速佈建K8s環境" class="headerlink" title="Ansible + Multipass：快速佈建K8s環境"></a>Ansible + Multipass：快速佈建K8s環境</h2><div class="note info flat no-icon flat"><p>範本可參考：<a href="https://github.com/SP12893678/ansible-multipass-k8s-example">https://github.com/SP12893678/ansible-multipass-k8s-example</a></p></div><h3 id="Ansible結構"><a href="#Ansible結構" class="headerlink" title="Ansible結構"></a>Ansible結構</h3><p>本次範例中，採用Role的結構，將master和worker分成不同的role<br>clean和common則對所有主機都做清理與前置共通作業</p><p><code>group_vars</code> 存放需要的環境變數</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── group_vars</span><br><span class="line">│   └── all.yml</span><br><span class="line">├── inventory.template.yaml</span><br><span class="line">├── inventory.yaml</span><br><span class="line">├── roles</span><br><span class="line">│   ├── clean</span><br><span class="line">│   │   └── tasks</span><br><span class="line">│   │       └── main.yml</span><br><span class="line">│   ├── common</span><br><span class="line">│   │   └── tasks</span><br><span class="line">│   │       └── main.yml</span><br><span class="line">│   ├── master</span><br><span class="line">│   │   └── tasks</span><br><span class="line">│   │       └── main.yml</span><br><span class="line">│   └── worker</span><br><span class="line">│       └── tasks</span><br><span class="line">│           └── main.yml</span><br><span class="line">├── setup.sh</span><br><span class="line">└── site.yml</span><br></pre></td></tr></table></figure><h3 id="Inventory設置"><a href="#Inventory設置" class="headerlink" title="Inventory設置"></a>Inventory設置</h3><p>首先inventory是管理主機清單，而由於每次Multipass所建立的主機IP會浮動，這邊採用template方式設置基本設定，後續透過setup佈建時再改為實際的host IP</p><p>設置說明：</p><ul><li><code>children</code><br>這邊簡單分成k8s-masters和k8s-workers分組</li><li><code>ansible_ssh_private_key_file</code><br>這個變數用來指定 Ansible 在連線至目標主機時使用的私鑰路徑<br>Ansible 在執行 <code>ansible-playbook</code> 時，會使用本機使用者的 <code>~/.ssh/id_rsa</code> 作為 SSH 身分驗證用的私鑰，來連線遠端主機（如 <code>k8s-master</code>, <code>k8s-worker1</code> 等）</li><li><code>ansible_python_interpreter</code><br>這個變數用來指定 Ansible 要在目標主機上使用哪一個 Python 編譯器來執行模組<br>表示在所有目標主機（<code>all</code> 群組）中，Ansible 將使用 <code>/usr/bin/python3</code> 來執行模組（像是 <code>apt</code>, <code>copy</code>, <code>lineinfile</code> 等等）</li></ul><div class="tabs" id="inventory.template.yaml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#inventory.template.yaml-1">inventory.template.yaml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="inventory.template.yaml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all:</span></span><br><span class="line">  <span class="attr">children:</span></span><br><span class="line">    <span class="attr">k8s-masters:</span></span><br><span class="line">      <span class="attr">hosts:</span></span><br><span class="line">        <span class="attr">k8s-master:</span></span><br><span class="line">          <span class="attr">ansible_host:</span> <span class="string">MASTER_IP</span></span><br><span class="line">          <span class="attr">ansible_user:</span> <span class="string">ubuntu</span></span><br><span class="line">          <span class="attr">ansible_ssh_private_key_file:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="attr">k8s-workers:</span></span><br><span class="line">      <span class="attr">hosts:</span></span><br><span class="line">        <span class="attr">k8s-worker1:</span></span><br><span class="line">          <span class="attr">ansible_host:</span> <span class="string">WORKER1_IP</span></span><br><span class="line">          <span class="attr">ansible_user:</span> <span class="string">ubuntu</span></span><br><span class="line">          <span class="attr">ansible_ssh_private_key_file:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="attr">k8s-worker2:</span></span><br><span class="line">          <span class="attr">ansible_host:</span> <span class="string">WORKER2_IP</span></span><br><span class="line">          <span class="attr">ansible_user:</span> <span class="string">ubuntu</span></span><br><span class="line">          <span class="attr">ansible_ssh_private_key_file:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">ansible_python_interpreter:</span> <span class="string">/usr/bin/python3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Multipass-初始化腳本配置"><a href="#Multipass-初始化腳本配置" class="headerlink" title="Multipass 初始化腳本配置"></a>Multipass 初始化腳本配置</h3><ul><li>multipass launch 來建立並啟動VM環境</li><li>透過 <code>multipass exec</code> 方式可以將後續ansible要ssh自動連線的金鑰先寫入到VM中</li><li>設置 <code>known_hosts</code>，避免 SSH 連線時的 authenticity prompt</li><li>最後將<code>inventory.template.yaml</code>產生<code>inventory.yaml</code>，並透過<code>multipass info</code>查找對應VM IP設置</li></ul><div class="tabs" id="setup.sh"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#setup.sh-1">setup.sh</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="setup.sh-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 master 節點</span></span><br><span class="line">multipass launch jammy --name k8s-master --cpus 2 --memory 2G --disk 10G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 worker 節點</span></span><br><span class="line">multipass launch jammy --name k8s-worker1 --cpus 2 --memory 2G --disk 10G</span><br><span class="line">multipass launch jammy --name k8s-worker2 --cpus 2 --memory 2G --disk 10G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得 IP</span></span><br><span class="line">sleep 5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\nMultipass Instances:&quot;</span></span><br><span class="line">multipass list</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\Set ssh key:&quot;</span></span><br><span class="line"><span class="comment"># 設置SSH連線憑證 ~/.ssh/id_rsa.pub</span></span><br><span class="line">multipass <span class="built_in">exec</span> k8s-master -- bash -c <span class="string">&quot;echo &#x27;<span class="subst">$(cat ~/.ssh/id_rsa.pub)</span>&#x27; &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br><span class="line">multipass <span class="built_in">exec</span> k8s-worker1 -- bash -c <span class="string">&quot;echo &#x27;<span class="subst">$(cat ~/.ssh/id_rsa.pub)</span>&#x27; &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br><span class="line">multipass <span class="built_in">exec</span> k8s-worker2 -- bash -c <span class="string">&quot;echo &#x27;<span class="subst">$(cat ~/.ssh/id_rsa.pub)</span>&#x27; &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設置 known_hosts，避免 SSH 連線時的 authenticity prompt</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\nAdd SSH keys to known_hosts to avoid authenticity prompt:&quot;</span></span><br><span class="line"><span class="keyword">for</span> vm <span class="keyword">in</span> k8s-master k8s-worker1 k8s-worker2; <span class="keyword">do</span></span><br><span class="line">    ip=$(multipass info <span class="variable">$vm</span> | grep IPv4 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Adding <span class="variable">$vm</span> (<span class="variable">$ip</span>) to known_hosts&quot;</span></span><br><span class="line">    ssh-keyscan -H <span class="variable">$ip</span> &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設置 inventory.yaml</span></span><br><span class="line">MASTER_IP=$(multipass info k8s-master | grep IPv4 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">WORKER1_IP=$(multipass info k8s-worker1 | grep IPv4 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">WORKER2_IP=$(multipass info k8s-worker2 | grep IPv4 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cp inventory.template.yaml inventory.yaml</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;&#x27;</span> \</span><br><span class="line">  -e <span class="string">&quot;s/MASTER_IP/<span class="variable">$&#123;MASTER_IP&#125;</span>/g&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;s/WORKER1_IP/<span class="variable">$&#123;WORKER1_IP&#125;</span>/g&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;s/WORKER2_IP/<span class="variable">$&#123;WORKER2_IP&#125;</span>/g&quot;</span> \</span><br><span class="line">  inventory.yaml</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-入口點-Site-yml-配置"><a href="#Ansible-入口點-Site-yml-配置" class="headerlink" title="Ansible 入口點(Site.yml)配置"></a>Ansible 入口點(Site.yml)配置</h3><p>採用 <code>roles</code> 模組化管理來設計</p><ol><li><strong>環境準備</strong><ul><li><code>clean</code> 角色清除舊有 Kubernetes 設定</li><li><code>common</code> 角色執行所有節點的共通的初始化，如關閉 swap、安裝必要套件</li></ul></li><li><strong>Master 節點設定</strong><ul><li><code>master</code> 角色在 <code>k8s-masters</code> 群組執行，負責初始化control plane（如 <code>kubeadm init</code>）</li></ul></li><li><strong>Worker 節點加入叢集</strong><ul><li><code>worker</code> 角色讓 <code>k8s-workers</code> 群組的節點透過 <code>kubeadm join</code> 加入 Master 建立的叢集</li></ul></li></ol><div class="note info flat no-icon flat"><p><code>become: true</code> 以取得 root 權限</p></div><div class="tabs" id="site.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#site.yml-1">site.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="site.yml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Clean up and prepare Kubernetes environment</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span> <span class="string">up</span> <span class="string">Kubernetes</span> <span class="string">environment</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">all</span> <span class="string">nodes</span> <span class="string">(common</span> <span class="string">setup)</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Setup Kubernetes cluster</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Kubernetes</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">k8s-masters</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Join Kubernetes workers to the cluster</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Join</span> <span class="string">Kubernetes</span> <span class="string">workers</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">k8s-workers</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">worker</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-環境變數配置"><a href="#Ansible-環境變數配置" class="headerlink" title="Ansible 環境變數配置"></a>Ansible 環境變數配置</h3><p>本次安裝過程需要定義 k8s版本，這邊透過<code>group_vars/all.yml</code>讓所有都可以使用到變數</p><div class="tabs" id="group_vars/all.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#group_vars/all.yml-1">group_vars/all.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="group_vars/all.yml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k8s_version_full:</span> <span class="string">&#x27;1.32.0-1.1&#x27;</span></span><br><span class="line"><span class="attr">k8s_version_major_minor:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; k8s_version_full.split(&#x27;-&#x27;)[0] | regex_replace(&#x27;^([0-9]+\\.[0-9]+).*&#x27;, &#x27;\\1&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">k8s_version:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; k8s_version_full.split(&#x27;-&#x27;)[0] &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-Clean-role-K8s環境清理配置"><a href="#Ansible-Clean-role-K8s環境清理配置" class="headerlink" title="Ansible Clean role K8s環境清理配置"></a>Ansible Clean role K8s環境清理配置</h3><p><code>roles/clean</code> 角色的任務目的是清理節點設置，以便重新部署 Kubernetes</p><ul><li>若已安裝 <code>kubeadm</code>，會執行 <code>kubeadm reset -f</code> 清除設定</li><li>移除與 Kubernetes 有關的目錄與檔案（如 <code>/etc/kubernetes</code>、<code>.kube</code> 等）</li><li>重新啟動 containerd 與 kubelet 服務，確保容器執行環境為最新狀態</li></ul><div class="note info flat no-icon flat"><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-reset/">kubeadm-reset文件參考</a></p></div><div class="tabs" id="roles/clean/tasks/main.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#roles/clean/tasks/main.yml-1">roles/clean/tasks/main.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="roles/clean/tasks/main.yml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">if</span> <span class="string">kubeadm</span> <span class="string">is</span> <span class="string">installed</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">which</span> <span class="string">kubeadm</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">kubeadm_installed</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Reset</span> <span class="string">kubeadm</span> <span class="string">if</span> <span class="string">installed</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">kubeadm</span> <span class="string">reset</span> <span class="string">-f</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">kubeadm_installed.rc</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">Kubernetes-related</span> <span class="string">directories</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">  <span class="attr">loop:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/kubernetes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/etcd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/kubelet</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/cni</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run/kubernetes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/root/.kube</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/ubuntu/.kube</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/cni</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/cni</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">container</span> <span class="string">runtime</span></span><br><span class="line">  <span class="attr">systemd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">containerd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">kubelet</span></span><br><span class="line">  <span class="attr">systemd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubelet</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-Common-role-K8s安裝前置配置"><a href="#Ansible-Common-role-K8s安裝前置配置" class="headerlink" title="Ansible Common role K8s安裝前置配置"></a>Ansible Common role K8s安裝前置配置</h3><p><code>roles/common</code> 負責所有節點需要共通執行的初始化設定，讓系統符合 Kubernetes 的安裝需求。</p><div class="note info flat no-icon flat"><p><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#prerequisite-ipv4-forwarding-optional">K8s前置準備文件參考</a></p></div><ul><li>安裝基本套件與 containerd</li><li>設定 containerd 使用 <code>systemd</code> 作為 cgroup driver，與 Kubernetes 相容</li><li>停用 swap，Kubernetes 預設不支援在啟用 swap 的情況下運行，確保資源管理準確並避免效能不穩定</li><li>加入 Kubernetes 的 APT 套件來源，安裝指定版本的 <code>kubeadm</code>、<code>kubelet</code>、<code>kubectl</code>，並鎖定版本避免自動更新</li><li>啟用 IPv4 封包轉發，Linux 核心預設不允許在介面間轉送 IPv4 封包，啟用後能讓 Pod 跨節點通訊時，節點能正確轉送網路流量</li></ul><div class="tabs" id="roles/common/tasks/main.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#roles/common/tasks/main.yml-1">roles/common/tasks/main.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="roles/common/tasks/main.yml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">prerequisite</span> <span class="string">packages</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gnupg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lsb-release</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">containerd</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">containerd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Configure containerd</span></span><br><span class="line"><span class="comment"># This task ensures that containerd is configured to use the systemd cgroup driver</span></span><br><span class="line"><span class="comment"># Reference:https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#containerd</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">containerd</span> <span class="string">config</span> <span class="string">if</span> <span class="string">not</span> <span class="string">exists</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    mkdir -p /etc/containerd</span></span><br><span class="line"><span class="string">    containerd config default &gt; /etc/containerd/config.toml</span></span><br><span class="line"><span class="string"></span>  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">creates:</span> <span class="string">/etc/containerd/config.toml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">containerd</span> <span class="string">config</span> <span class="string">to</span> <span class="string">use</span> <span class="string">systemd</span> <span class="string">cgroup</span> <span class="string">driver</span></span><br><span class="line">  <span class="attr">replace:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/containerd/config.toml</span></span><br><span class="line">    <span class="attr">regexp:</span> <span class="string">&#x27;SystemdCgroup = false&#x27;</span></span><br><span class="line">    <span class="attr">replace:</span> <span class="string">&#x27;SystemdCgroup = true&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">containerd</span></span><br><span class="line">  <span class="attr">systemd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">containerd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Disable swap on the Linux system</span></span><br><span class="line"><span class="comment"># Kubernetes requires swap to be disabled</span></span><br><span class="line"><span class="comment"># Reference: https://discuss.kubernetes.io/t/swap-off-why-is-it-necessary/6879</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Disable</span> <span class="string">swap</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">swapoff</span> <span class="string">-a</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Comment</span> <span class="string">out</span> <span class="string">swap</span> <span class="string">in</span> <span class="string">/etc/fstab</span></span><br><span class="line">  <span class="attr">replace:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/fstab</span></span><br><span class="line">    <span class="attr">regexp:</span> <span class="string">&#x27;^([^#].*swap.*)$&#x27;</span></span><br><span class="line">    <span class="attr">replace:</span> <span class="string">&#x27;# \1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Install k8s packages</span></span><br><span class="line"><span class="comment"># Reference: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">建立</span> <span class="string">apt</span> <span class="string">keyring</span> <span class="string">目錄</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/apt/keyrings</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">&#x27;0755&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">下載並轉換</span> <span class="string">GPG</span> <span class="string">金鑰為</span> <span class="string">.gpg</span> <span class="string">格式</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    curl -fsSL https://pkgs.k8s.io/core:/stable:/v&#123;&#123; k8s_version_major_minor &#125;&#125;/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span></span><br><span class="line"><span class="string"></span>  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">creates:</span> <span class="string">/etc/apt/keyrings/kubernetes-apt-keyring.gpg</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">建立</span> <span class="string">Kubernetes</span> <span class="string">APT</span> <span class="string">repository</span></span><br><span class="line">  <span class="attr">copy:</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v&#123;&#123; k8s_version_major_minor &#125;&#125;/deb/ /</span></span><br><span class="line"><span class="string"></span>    <span class="attr">mode:</span> <span class="string">&#x27;0644&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新</span> <span class="string">apt</span> <span class="string">快取</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安裝指定版本的</span> <span class="string">kubeadm,</span> <span class="string">kubelet,</span> <span class="string">kubectl</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;kubeadm=<span class="template-variable">&#123;&#123; k8s_version_full &#125;&#125;</span>&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;kubelet=<span class="template-variable">&#123;&#123; k8s_version_full &#125;&#125;</span>&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;kubectl=<span class="template-variable">&#123;&#123; k8s_version_full &#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">鎖定</span> <span class="string">Kubernetes</span> <span class="string">套件版本</span></span><br><span class="line">  <span class="attr">dpkg_selections:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="attr">selection:</span> <span class="string">hold</span></span><br><span class="line">  <span class="attr">loop:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubelet</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubeadm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Enable IPv4 packet forwarding</span></span><br><span class="line"><span class="comment"># Reference: https://kubernetes.io/docs/setup/production-environment/container-runtimes/#prerequisite-ipv4-forwarding-optional</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Enable</span> <span class="string">IP</span> <span class="string">forwarding</span></span><br><span class="line">  <span class="attr">ansible.posix.sysctl:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">net.ipv4.ip_forward</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="attr">reload:</span> <span class="literal">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-Master-role-K8s-cluster初始化配置"><a href="#Ansible-Master-role-K8s-cluster初始化配置" class="headerlink" title="Ansible Master role K8s cluster初始化配置"></a>Ansible Master role K8s cluster初始化配置</h3><p><code>roles/master</code> 的任務負責將節點初始化為 Kubernetes control plane</p><ul><li>透過 <code>kubeadm config images pull</code> 預先拉取所需Image (如apiserver、scheduler、etcd等)</li><li>使用 <code>kubeadm init</code> 建立 Control Plane，並指定 Pod CIDR 與 Containerd 為 Container Runtime</li><li>將 <code>admin.conf</code> 複製給 <code>ubuntu</code> 使用者，讓其能操作 <code>kubectl</code></li><li>安裝 Calico 作為 CNI（Container Network Interface）插件，提供 Pod 間的網路功能</li><li>產生join command，讓後續 worker 節點可以加入叢集，並透過 <code>set_fact</code> 設為全域變數，供ansible worker VM存取</li></ul><div class="tabs" id="roles/master/tasks/main.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#roles/master/tasks/main.yml-1">roles/master/tasks/main.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="roles/master/tasks/main.yml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Pre pull image for kubeadm initialization e.g. kube-apiserver, kube-controller-manager, kube-scheduler, etcd</span></span><br><span class="line"><span class="comment"># Initializes the Kubernetes master node</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Kubeadm</span> <span class="string">config</span> <span class="string">images</span> <span class="string">pull</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">kubeadm</span> <span class="string">config</span> <span class="string">images</span> <span class="string">pull</span> <span class="string">--kubernetes-version=&#123;&#123;</span> <span class="string">k8s_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Initialize</span> <span class="string">Kubernetes</span> <span class="string">master</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">kubeadm</span> <span class="string">init</span> <span class="string">--kubernetes-version=&#123;&#123;</span> <span class="string">k8s_version</span> <span class="string">&#125;&#125;</span> <span class="string">--pod-network-cidr=192.168.0.0/16</span> <span class="string">--cri-socket=&quot;/run/containerd/containerd.sock&quot;</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">creates:</span> <span class="string">/etc/kubernetes/admin.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Let user &#x27;ubuntu&#x27; use kubectl</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">.kube</span> <span class="string">directory</span> <span class="string">for</span> <span class="string">ubuntu</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/home/ubuntu/.kube</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">ubuntu</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">ubuntu</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">kubeconfig</span> <span class="string">to</span> <span class="string">ubuntu</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">copy:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">/etc/kubernetes/admin.conf</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/home/ubuntu/.kube/config</span></span><br><span class="line">    <span class="attr">remote_src:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">ubuntu</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">ubuntu</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Install Calico CNI</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安裝</span> <span class="string">Calico</span> <span class="string">CNI</span> <span class="bullet">-</span> <span class="string">安裝</span> <span class="string">tigera-operator</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">https://raw.githubusercontent.com/projectcalico/calico/v3.29.3/manifests/tigera-operator.yaml</span></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安裝</span> <span class="string">Calico</span> <span class="string">CNI</span> <span class="bullet">-</span> <span class="string">安裝</span> <span class="string">custom-resources</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">https://raw.githubusercontent.com/projectcalico/calico/v3.29.3/manifests/custom-resources.yaml</span></span><br><span class="line">  <span class="attr">become_user:</span> <span class="string">ubuntu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># Generate kubeadm join command</span></span><br><span class="line"><span class="comment"># This command will be used by worker nodes to join the cluster</span></span><br><span class="line"><span class="comment"># The command is registered as a global fact for use in other roles</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">kubeadm</span> <span class="string">join</span> <span class="string">command</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">kubeadm</span> <span class="string">token</span> <span class="string">create</span> <span class="string">--print-join-command</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">kube_join_command</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">join</span> <span class="string">command</span> <span class="string">as</span> <span class="string">global</span> <span class="string">fact</span></span><br><span class="line">  <span class="attr">set_fact:</span></span><br><span class="line">    <span class="attr">kube_join_command_global:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123; kube_join_command.stdout &#125;&#125;</span>&#x27;</span></span><br><span class="line">  <span class="attr">run_once:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-Worker-role-K8s-加入Cluster配置"><a href="#Ansible-Worker-role-K8s-加入Cluster配置" class="headerlink" title="Ansible Worker role K8s 加入Cluster配置"></a>Ansible Worker role K8s 加入Cluster配置</h3><p><code>roles/worker</code> 將 worker 節點加入叢集</p><ul><li>透過 master 所生成的 join 指令 (<code>kubeadm token create --print-join-command</code>) 加入</li><li>利用 Ansible 的 <code>hostvars</code> 機制取得 <code>k8s-master</code> 節點中的 <code>kube_join_command_global</code></li></ul><div class="tabs" id="roles/worker/tasks/main.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#roles/worker/tasks/main.yml-1">roles/worker/tasks/main.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="roles/worker/tasks/main.yml-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Join</span> <span class="string">worker</span> <span class="string">to</span> <span class="string">cluster</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; hostvars[&#x27;k8s-master&#x27;].kube_join_command_global &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Ansible-Playbook執行"><a href="#Ansible-Playbook執行" class="headerlink" title="Ansible Playbook執行"></a>Ansible Playbook執行</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ansible-playbook</span> <span class="string">site.yml</span> <span class="string">-i</span> <span class="string">inventory.yaml</span></span><br></pre></td></tr></table></figure><p>執行這段，會開始執行撰寫的playbook，也就是K8s環境佈建</p><p>當執行完畢後，我們到multipass去開master vm下<code>kubectl get nodes</code>，可以看到有1個master與2個worker節點在裡面</p>]]></content>
      
      
      <categories>
          
          <category> Configuration Management </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Configuration Management </tag>
            
            <tag> Ansible </tag>
            
            <tag> Multipass </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Traefik+mkcert：Local端 簡易TLS Domain模擬環境</title>
      <link href="/posts/Traefik+mkcert%20Local%E7%AB%AF%20%E7%B0%A1%E6%98%93TLS%20Domain%E6%A8%A1%E6%93%AC%E7%92%B0%E5%A2%83/"/>
      <url>/posts/Traefik+mkcert%20Local%E7%AB%AF%20%E7%B0%A1%E6%98%93TLS%20Domain%E6%A8%A1%E6%93%AC%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發 Web 應用或 API 服務時，可能會遇到需要模擬「正式環境」的需求，例如：</p><ul><li>測試前端在 HTTPS 下的行為（例如 Cookie 的 Secure 屬性、Service Worker 的註冊、瀏覽器安全性限制等）</li><li>使用 OAuth 或第三方登入服務時，要求 callback URL 必須為 HTTPS 網域</li><li>模擬實際部署情境中的多個子網域</li></ul><h2 id="章節重點"><a href="#章節重點" class="headerlink" title="章節重點"></a>章節重點</h2><ul><li>環境準備<ul><li>Docker安裝</li><li>Kind安裝</li><li>helm安裝</li></ul></li><li>Traefik 介紹</li><li>mkcert 介紹</li><li>Docker Compose 路由轉發設置</li><li>Kubernetes Ingress 路由轉發設置</li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><h3 id="Docker安裝"><a href="#Docker安裝" class="headerlink" title="Docker安裝"></a>Docker安裝</h3><p>Docker安裝指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  移除舊版本的docker</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>給予使用者Docker權限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將$USER加入docker群組</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換群組</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="Kind安裝"><a href="#Kind安裝" class="headerlink" title="Kind安裝"></a>Kind安裝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For AMD64 / x86_64</span></span><br><span class="line">[ $(uname -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># For ARM64</span></span><br><span class="line">[ $(uname -m) = aarch64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-arm64</span><br><span class="line">chmod +x ./kind</span><br><span class="line">sudo mv ./kind /usr/<span class="built_in">local</span>/bin/kind</span><br></pre></td></tr></table></figure><h3 id="mkcert-安裝"><a href="#mkcert-安裝" class="headerlink" title="mkcert 安裝"></a>mkcert 安裝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libnss3-tools</span><br><span class="line"></span><br><span class="line">curl -JLO <span class="string">&quot;https://dl.filippo.io/mkcert/latest?for=linux/amd64&quot;</span></span><br><span class="line">chmod +x mkcert-v*-linux-amd64</span><br><span class="line">sudo cp mkcert-v*-linux-amd64 /usr/<span class="built_in">local</span>/bin/mkcert</span><br></pre></td></tr></table></figure><h2 id="Traefik-介紹"><a href="#Traefik-介紹" class="headerlink" title="Traefik 介紹"></a>Traefik 介紹</h2><p>Traefik是一個的 <strong>反向代理（Reverse Proxy）</strong> 和 <strong>負載平衡器（Load Balancer）</strong>的服務，並且支援容器化Docker、Kubernetes整合，可以便利的處理Ingress的路由處理。</p><p>其中提供了docker image、k8s Ingress和自定義的CRD IngressRoute作為Proxy/Ingress角色處理路由</p><h3 id="Traefik-me介紹"><a href="#Traefik-me介紹" class="headerlink" title="Traefik me介紹"></a>Traefik me介紹</h3><p><strong>Traefik.me</strong> 是一個提供「Wildcard DNS」的免費服務。可以透過類似 <code>10.0.0.1.traefik.me</code> 網址，<strong>直接對應到指定 IP（例如本機或區網內的開發伺服器）</strong>，不需要額外設定 DNS 或 <code>/etc/hosts</code>，其背後運作的是一台 <strong>自訂的 DNS 伺服器</strong>，它會從這個網域名稱中<strong>解析出 IP 地址</strong>，然後直接回傳。</p><p>範例：</p><ul><li><code>10.0.0.1.traefik.me</code> ➝ 會自動解析成 <code>10.0.0.1</code></li><li><code>app.10.0.0.1.traefik.me</code> ➝ 一樣會指向 <code>10.0.0.1</code></li><li><code>mysite.traefik.me</code> ➝ 預設指向 <code>127.0.0.1</code> </li></ul><div class="note info flat no-icon flat"><p>💡 非IP類型，無法辨別的會導向127.0.0.1，非常適合用來Local服務測試</p></div><h2 id="mkcert-介紹"><a href="#mkcert-介紹" class="headerlink" title="mkcert 介紹"></a>mkcert 介紹</h2><p><code>mkcert</code> 是一個用來在本地產生「受信任的開發用 SSL 憑證」的工具，免去自己架設 CA 等麻煩設置，還可避免如自簽憑證會有瀏覽器警告。</p><h3 id="安裝本地CA憑證"><a href="#安裝本地CA憑證" class="headerlink" title="安裝本地CA憑證"></a>安裝本地CA憑證</h3><p>會在你的系統中建立並安裝一個本地的憑證授權機構（CA），並加入到系統 的信任憑證庫中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkcert -install</span><br></pre></td></tr></table></figure><h3 id="建立指定域名SSL憑證"><a href="#建立指定域名SSL憑證" class="headerlink" title="建立指定域名SSL憑證"></a>建立指定域名SSL憑證</h3><p>為指定的域名或 IP 產生 SSL 憑證，會產生相應的公開憑證與私鑰</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkcert &lt;指定的域名or IP&gt;</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose-路由轉發設置"><a href="#Docker-Compose-路由轉發設置" class="headerlink" title="Docker Compose 路由轉發設置"></a>Docker Compose 路由轉發設置</h2><div class="note info flat no-icon flat"><p>💡 範本可參考：<a href="https://github.com/SP12893678/traefik-ingress-example/tree/main/docker-compose">https://github.com/SP12893678/traefik-ingress-example/tree/main/docker-compose</a></p></div><h3 id="Docker-Compose-設置"><a href="#Docker-Compose-設置" class="headerlink" title="Docker Compose 設置"></a>Docker Compose 設置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.10</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.web.address=:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.websecure.address=:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.websecure.http.tls=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--providers.docker=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--providers.file.directory=/etc/traefik/dynamic</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--providers.file.watch=true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./certs:/certs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./dynamic:/etc/traefik/dynamic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">whoami:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">containous/whoami</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.whoami.rule=Host(`whoami.traefik.me`)&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.whoami.entrypoints=websecure&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.whoami.tls=true&quot;</span></span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p><strong>Entrypoints</strong></p><ul><li><code>web</code>：對應 <strong>HTTP</strong>（port 80）</li><li><code>websecure</code>：對應 <strong>HTTPS</strong>（port 443），並啟用 <strong>TLS</strong></li></ul><p><strong>Providers</strong></p><p>Traefik 支援多種服務提供者（Providers），這裡我們啟用了兩種：</p><ul><li><code>docker</code>：從其他 container 的 <code>labels</code> 自動讀取路由規則</li><li><code>file</code>：從指定目錄（如 <code>dynamic/</code>）讀取設定（可用來定義 TLS 憑證、middlewares 等）</li></ul><p><strong>Volume 掛載</strong></p><ul><li><code>certs/</code>：存放 <code>mkcert</code> 產生的憑證檔（<code>.pem</code>, <code>.key</code>）</li><li><code>dynamic/</code>：靜態設定檔（例如 <code>tls.yml</code>），由 file provider 掃描</li></ul></div><h4 id="Traefik-labels-說明"><a href="#Traefik-labels-說明" class="headerlink" title="Traefik labels 說明"></a>Traefik labels 說明</h4><p><code>whoami</code> 是一個簡易測試服務，會回傳你的 IP 和一些請求資訊。<br>這段 label 設定了：訪問 <code>https://whoami.traefik.me</code> 時，請求會被 Traefik 接收並使用 TLS，然後轉發到 <code>whoami</code> 服務。</p><p>Traefik 透過 Docker container 的 <code>labels</code> 來設定路由（router），而 <code>traefik.http.routers</code> 是定義 HTTP 路由的核心設定。router 負責匹配符合條件的請求，並將請求導向指定的服務。</p><table><thead><tr><th>Label 名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>traefik.http.routers.&lt;router_name&gt;.rule</code></td><td>定義如何匹配請求（如 Host、Path）例：<code>Host(</code>whoami.traefik.me<code>)</code></td></tr><tr><td><code>traefik.http.routers.&lt;router_name&gt;.entrypoints</code></td><td>指定此路由對應的入口點，如 <code>web</code>, <code>websecure</code></td></tr><tr><td><code>traefik.http.routers.&lt;router_name&gt;.tls</code></td><td>若設為 <code>true</code>，表示此路由會使用 TLS</td></tr></tbody></table><div class="note info flat no-icon flat"><p>詳細設置參考: <a href="https://doc.traefik.io/traefik/routing/providers/docker/">Traefik Docker Routing Documentation - Traefik</a></p></div><h3 id="建立TLS-secret憑證"><a href="#建立TLS-secret憑證" class="headerlink" title="建立TLS secret憑證"></a><strong>建立TLS secret憑證</strong></h3><p>使用 <code>mkcert</code> 建立本地的自簽憑證，讓我們可以在本機使用 HTTPS 加密存取 <code>whoami.traefik.me</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkcert</span> <span class="string">whoami.traefik.me</span></span><br></pre></td></tr></table></figure><p>會產生兩個檔案：</p><ul><li><code>whoami.traefik.me.pem</code>（憑證）</li><li><code>whoami.traefik.me-key.pem</code>（私鑰）</li></ul><p>請將這兩個檔案放入 <code>certs/</code> 目錄中。</p><h3 id="設置Traefik需要讀取-TLS設定"><a href="#設置Traefik需要讀取-TLS設定" class="headerlink" title="設置Traefik需要讀取 TLS設定"></a>設置Traefik需要讀取 TLS設定</h3><p>建立 <code>dynamic/tls.yml</code> 檔案，內容如下，讓 Traefik 知道要使用剛剛產生的憑證：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tls:</span></span><br><span class="line">  <span class="attr">certificates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">certFile:</span> <span class="string">/certs/whoami.traefik.me.pem</span></span><br><span class="line">      <span class="attr">keyFile:</span> <span class="string">/certs/whoami.traefik.me-key.pem</span></span><br></pre></td></tr></table></figure><p>這個檔案會透過 <code>docker-compose.yml</code> 中的 volume 掛載進 <code>/etc/traefik/dynamic</code>，由 <code>--providers.file.directory</code> 指定的位置載入。只要 Traefik 有啟用 <code>--providers.file.watch=true</code>，變更會自動套用。</p><h3 id="啟動服務"><a href="#啟動服務" class="headerlink" title="啟動服務"></a>啟動服務</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">compose</span> <span class="string">up</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><p>原則上，服務啟動後，whoami.traefik.me就可以查看到whoami提供的相關資訊</p><h2 id="Kubernetes-Ingress-路由轉發設置"><a href="#Kubernetes-Ingress-路由轉發設置" class="headerlink" title="Kubernetes Ingress 路由轉發設置"></a>Kubernetes Ingress 路由轉發設置</h2><p>在下面的環節中，打算安裝<strong>Prometheus stack</strong>，並將<code>http://grafana.traefik.me</code> 導到 <code>grafana</code>服務上</p><p>社群維護的 <a href="https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack"><code>kube-prometheus-stack</code></a>，提供Helm方式快速安裝Prometheus、Grafana等可觀測性服務。</p><h3 id="Kind設置"><a href="#Kind設置" class="headerlink" title="Kind設置"></a>Kind設置</h3><p>建立 kind-config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">control-plane</span></span><br><span class="line">    <span class="attr">extraPortMappings:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">hostPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">        <span class="attr">hostPort:</span> <span class="number">443</span></span><br></pre></td></tr></table></figure><p>這段設定會讓 <code>kind</code> 建立的本地 Kubernetes cluster 能夠將本機的 80（HTTP）與 443（HTTPS）port 映射到 container 的對應 port，這樣才能用 <code>localhost</code> 或 <code>*.traefik.me</code> 這種本地測試域名直接訪問服務。</p><h3 id="建立Cluster"><a href="#建立Cluster" class="headerlink" title="建立Cluster"></a>建立Cluster</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind create cluster --name demo --config kind-config.yml </span><br></pre></td></tr></table></figure><h3 id="安裝-Traefik-stack"><a href="#安裝-Traefik-stack" class="headerlink" title="安裝 Traefik stack"></a><strong>安裝 Traefik stack</strong></h3><p>Helm 安裝 Traefik，並透過 <code>hostPort</code> 將 Traefik 的 <code>web</code>（80）與 <code>websecure</code>（443） entrypoint 暴露到本機網路中，對應前面 Kind 的 port mapping。這樣才可以讓我們訪問 <code>http://grafana.traefik.me</code> 等網址時，自動進入 Traefik 處理路由邏輯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">helm repo add traefik https://traefik.github.io/charts</span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line">helm install traefik traefik/traefik \</span><br><span class="line">  --namespace=traefik --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> service.type=ClusterIP \</span><br><span class="line">  --<span class="built_in">set</span> ports.web.hostPort=80 \</span><br><span class="line">  --<span class="built_in">set</span> ports.websecure.hostPort=443 \</span><br><span class="line">  --<span class="built_in">set</span> ports.web.expose.enabled=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">set</span> ports.websecure.expose.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="安裝-Prometheus-stack"><a href="#安裝-Prometheus-stack" class="headerlink" title="安裝 Prometheus stack"></a><strong>安裝 Prometheus stack</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">helm repo add prometheus-community https://prometheus-community.github.io/helm-charts</span><br><span class="line"></span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line">helm install prometheus prometheus-community/kube-prometheus-stack -n monitoring --create-namespace</span><br></pre></td></tr></table></figure><h3 id="建立TLS-secret"><a href="#建立TLS-secret" class="headerlink" title="建立TLS secret"></a><strong>建立TLS secret</strong></h3><p>使用 <code>mkcert</code> 建立本地的自簽憑證，提供設置Ingress所需的憑證來源</p><p>並透過 <code>kubectl create secret tls</code> 將憑證等機密資訊存放在Secret，待Ingress物件讀取 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkcert grafana.traefik.me</span><br><span class="line"></span><br><span class="line">kubectl create secret tls grafana-cert-secret \</span><br><span class="line">  --cert=grafana.traefik.me.pem \</span><br><span class="line">  --key=grafana.traefik.me-key.pem \</span><br><span class="line">  -n monitoring</span><br></pre></td></tr></table></figure><h3 id="Ingress設置"><a href="#Ingress設置" class="headerlink" title="Ingress設置"></a>Ingress設置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grafana-ingress.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik</span></span><br><span class="line">    <span class="attr">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class="string">websecure</span></span><br><span class="line">    <span class="attr">traefik.ingress.kubernetes.io/router.tls:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">traefik</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">grafana.traefik.me</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">grafana-cert-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">grafana.traefik.me</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">prometheus-grafana</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>使用 Kubernetes 原生的 Ingress 物件來設定路由轉發規則，透過以下設定：</p><ul><li><code>annotations.traefik.ingress.kubernetes.io/router.entrypoints: websecure</code>  表示這條路由透過 HTTPS (<code>websecure</code>) entrypoint 處理。</li><li><code>annotations.traefik.ingress.kubernetes.io/router.tls: &#39;true&#39;</code>  要求使用 TLS（HTTPS）協定處理。</li><li><code>spec.rules.host</code> 與 <code>spec.tls.hosts</code> 都設為 <code>grafana.traefik.me</code>  讓 Traefik 根據 Hostname 來比對請求，並綁定先前建立的憑證 Secret。</li></ul><p>最終，Ingress 設定會將使用 <code>https://grafana.traefik.me</code> 的請求轉發給 <code>prometheus-grafana</code> service。</p><h3 id="執行建立Ingress"><a href="#執行建立Ingress" class="headerlink" title="執行建立Ingress"></a>執行建立Ingress</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f grafana-ingress.yml</span><br></pre></td></tr></table></figure><h3 id="Traefik的CRD-IngressRoute設置"><a href="#Traefik的CRD-IngressRoute設置" class="headerlink" title="Traefik的CRD IngressRoute設置"></a>Traefik的CRD IngressRoute設置</h3><p>Traefik 提供一種更彈性的方式來設定路由，叫做 <code>IngressRoute</code>。和原生 Ingress 相比，IngressRoute 支援更多條件、組合邏輯與中介處理（middleware）設定。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grafana-ingress-route.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana-ingressroute</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`grafana.traefik.me`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prometheus-grafana</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">grafana-cert-secret</span></span><br></pre></td></tr></table></figure><p>設定和前面的 Ingress 類似：</p><ul><li><code>entryPoints</code> 指定進入點為 <code>websecure</code>（HTTPS）</li><li><code>routes.match</code> 使用 Host 與 PathPrefix 組合邏輯</li><li><code>services</code> 指定後端服務與對應 port</li><li><code>tls.secretName</code> 指定要使用的憑證 Secret</li></ul><h3 id="執行建立Ingress-Route"><a href="#執行建立Ingress-Route" class="headerlink" title="執行建立Ingress Route"></a>執行建立Ingress Route</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f grafana-ingress-route.yml</span><br></pre></td></tr></table></figure><p>原則上，<a href="http://grafana.traefik.me/">http://grafana.traefik.me/</a> 就可以成功查看到架設的 grafana服務了</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> DNS </tag>
            
            <tag> HTTPS </tag>
            
            <tag> Traefik </tag>
            
            <tag> Ingress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare：Domain 託管便捷應用 - Email Routing</title>
      <link href="/posts/Cloudflare%EF%BC%9ADomain%20%E8%A8%97%E7%AE%A1%E4%BE%BF%E6%8D%B7%E6%87%89%E7%94%A8Email%20Routing/"/>
      <url>/posts/Cloudflare%EF%BC%9ADomain%20%E8%A8%97%E7%AE%A1%E4%BE%BF%E6%8D%B7%E6%87%89%E7%94%A8Email%20Routing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>擁有一組自己的域名（Domain）可以實現很多應用，最簡易的應用是將指定的域名路由到架設的服務，讓使用者可以透過域名訪問到服務。Cloudflare 提供域名託管，並提供各種整合性質服務，本次要分享信件服務的應用。</p><h2 id="章節重點"><a href="#章節重點" class="headerlink" title="章節重點"></a>章節重點</h2><ul><li>環境準備</li><li>Domain Email Routing 無限Email 收信測試系統</li><li>Cloudflare Tunnels 分享Local臨時測試/Demo服務</li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><ul><li>擁有一組域名</li></ul><h2 id="Domain-Email-Routing-無限Email-收信測試系統"><a href="#Domain-Email-Routing-無限Email-收信測試系統" class="headerlink" title="Domain Email Routing 無限Email 收信測試系統"></a>Domain Email Routing 無限Email 收信測試系統</h2><p>當開發一個產品或服務時，可能會設計註冊驗證信、邀請信等機制。並且產品可能有很多不同的角色與權限設置。為方便測試，需要很多Email帳號，而Cloudflare提供的Email Routing機制可以為自己的網域建立自訂電子郵件地址，並將收到的郵件轉送到指定的信箱。</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image.png" alt="image.png"></p><h3 id="設置DNS-MX-Mail-Exchange-記錄"><a href="#設置DNS-MX-Mail-Exchange-記錄" class="headerlink" title="設置DNS MX(Mail Exchange)記錄"></a>設置DNS MX(Mail Exchange)記錄</h3><p>設置DNS MX(Mail Exchange)記錄，用來指定該網域名稱的<strong>電子郵件伺服器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%201.png" alt="image.png"></p><p>這邊Cloudflare已經帶出設定內容，讓我們可以很便利的直接將DNS紀錄指到Cloudflare的電子郵件伺服器上，讓他來幫我們處理信件的接收與轉發事件</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%202.png" alt="image.png"></p><p>設定完DNS MX紀錄後，就會啟用Email routing 並且有寫入相關的MX紀錄設置</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%203.png" alt="image.png"></p><h3 id="新增轉發的郵件地址"><a href="#新增轉發的郵件地址" class="headerlink" title="新增轉發的郵件地址"></a>新增轉發的郵件地址</h3><p>在Destination address要新增轉發的郵件地址</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%204.png" alt="image.png"></p><h3 id="啟用Email-Routing設置"><a href="#啟用Email-Routing設置" class="headerlink" title="啟用Email Routing設置"></a>啟用Email Routing設置</h3><p>啟用Email Routing設置，設置Catch-All攔截所有郵件地址，並轉發給指定電子郵件</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%205.png" alt="image.png"></p><p>點選Edit編輯設置攔截所有郵件的行為與目的地</p><p>這邊我們就選擇 Send to an email 寄送郵件到我們剛才設置的轉發地址</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%206.png" alt="image.png"></p><aside>💡<p>到這步驟我們就能讓只要是發送到 @hairybear.me 的信件，都會被轉發到我自己的Gmail信箱中</p></aside><h3 id="Gmail接收者設定轉發對象與條件"><a href="#Gmail接收者設定轉發對象與條件" class="headerlink" title="Gmail接收者設定轉發對象與條件"></a>Gmail接收者設定轉發對象與條件</h3><p>如果想讓團隊成員都可以一起測試信件註冊驗證信、邀請信等機制或者多角色等功能，可以透過Gmail轉發機制給其他人</p><p>首先需要去設定 ⇒ 轉寄和POP/IMAP來新增轉寄的地址</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%207.png" alt="image.png"></p><p>新增後需要讓接收的信箱做驗證</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%208.png" alt="image.png"></p><p>確認是否允許接收來自XXX的自動郵件轉寄</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%209.png" alt="image.png"></p><p>接續來建構信件篩選器，設置我們想要轉寄的郵件規則</p><p>這邊收件人就可以填寫 <code>@&lt;你的域名&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%2010.png" alt="image.png"></p><p>勾選 “轉寄給” 選項，並選擇電子郵件地址</p><p>接著就建立篩選器</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%2011.png" alt="image.png"></p><p>如此我們在設定的⇒ 篩選器和封鎖的地址 就可以看到這項設定規則了</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%2012.png" alt="image.png"></p><p>接著來用第三個帳號來模擬系統轉發郵件，測試一下能不能成功轉寄給大家</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%2013.png" alt="image.png"></p><p>第三個帳號成功收到信件啦！</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-email-routing/image%2014.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> DNS </tag>
            
            <tag> Cloudflare </tag>
            
            <tag> Email Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Networking Solution：虛擬區網(VLAN) Zerotier 架設與佈建</title>
      <link href="/posts/Networking%20Solution%EF%BC%9A%E8%99%9B%E6%93%AC%E5%8D%80%E7%B6%B2(VLAN)%20Zerotier%20%E6%9E%B6%E8%A8%AD%E8%88%87%E4%BD%88%E5%BB%BA/"/>
      <url>/posts/Networking%20Solution%EF%BC%9A%E8%99%9B%E6%93%AC%E5%8D%80%E7%B6%B2(VLAN)%20Zerotier%20%E6%9E%B6%E8%A8%AD%E8%88%87%E4%BD%88%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代網路環境中，伺服器通常具有公開 IP，允許來自全球的裝置進行存取。然而，家用電腦或小型辦公室的設備通常沒有固定 IP，且基於安全考量，不會直接對外開放。這使得遠端存取變得困難，尤其是當我們希望在不同地點的設備之間建立安全且穩定的連線時。</p><p>區域網路（LAN）提供了一個封閉、安全的內部網路環境，讓同一網段的設備能夠直接互通，但它的範圍僅限於物理位置。一旦設備處於不同的網路（如家用網路與公司網路），就需要透過 VPN、NAT 穿透或其他技術來建立連接。</p><p>虛擬區域網路（VLAN）和軟體定義網路（SDN）技術應運而生，讓我們能夠在不同的網路環境中模擬 LAN。ZeroTier 作為一種軟體定義網路解決方案，允許使用者輕鬆建立自己的虛擬網路，無需傳統 VPN 的複雜設定，並提供類似 LAN 的體驗。</p><p>過去架設Minecraft伺服器邀請與朋友遊玩時，也是運用了虛擬區域網路的方式，讓朋友可以透過虛擬IP訪問到Server。</p><h2 id="章節重點"><a href="#章節重點" class="headerlink" title="章節重點"></a>章節重點</h2><ul><li>環境準備<ul><li>2台設備 + 虛擬機VM (私人中繼器方案)</li><li>Docker安裝</li><li>Zerotier安裝</li></ul></li><li>Zerotier概念介紹</li><li>Zerotier雲服務建構虛擬區域網路</li><li>私人Zerotier中繼器 - 架構說明</li><li>私人Zerotier中繼器 - Server架設</li><li>私人Zerotier中繼器 - Client連線方法</li><li>私人Zerotier中繼器 - 其他常用API操作</li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><h3 id="安裝Docker"><a href="#安裝Docker" class="headerlink" title="安裝Docker"></a>安裝Docker</h3><p>Ubuntu Docker安裝指令如下： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  移除舊版本的docker</span></span><br><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="keyword">do</span> sudo apt-get remove <span class="variable">$pkg</span>; <span class="keyword">done</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$&#123;UBUNTU_CODENAME:-<span class="variable">$VERSION_CODENAME</span>&#125;</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>給予使用者Docker權限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將$USER加入docker群組</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換群組</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="Zerotier安裝"><a href="#Zerotier安裝" class="headerlink" title="Zerotier安裝"></a>Zerotier安裝</h3><p><a href="https://www.zerotier.com/download/">https://www.zerotier.com/download/</a></p><p>安裝完畢後，在常駐區域可以看到相關狀態</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image.png" alt="image.png"></p><h2 id="Zerotier概念介紹"><a href="#Zerotier概念介紹" class="headerlink" title="Zerotier概念介紹"></a>Zerotier概念介紹</h2><p>ZeroTier 是一款功能強大的虛擬網路解決方案，透過軟體定義網路（SDN）技術與點對點加密連線，讓分散於不同網路環境中的裝置，就像處於同一個區域網路中一樣互相連結，達成安全又方便的遠端存取與網路管理</p><h2 id="Zerotier雲服務建構虛擬區域網路"><a href="#Zerotier雲服務建構虛擬區域網路" class="headerlink" title="Zerotier雲服務建構虛擬區域網路"></a>Zerotier雲服務建構虛擬區域網路</h2><p>前往 <a href="https://my.zerotier.com/">https://my.zerotier.com/</a> 登入</p><p>選Login In/Sign Up</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%201.png" alt="image.png"></p><h3 id="建立虛擬區域網路"><a href="#建立虛擬區域網路" class="headerlink" title="建立虛擬區域網路"></a>建立虛擬區域網路</h3><p>選Create A Network</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%202.png" alt="image.png"></p><p>建立成功後，就會多一筆Network ID</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%203.png" alt="image.png"></p><h3 id="選擇區域網路區段CIDR"><a href="#選擇區域網路區段CIDR" class="headerlink" title="選擇區域網路區段CIDR"></a>選擇區域網路區段CIDR</h3><p>可以選擇自己偏好的虛擬網路區段，以避免撞到</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%204.png" alt="image.png"></p><h3 id="加入虛擬區域網路"><a href="#加入虛擬區域網路" class="headerlink" title="加入虛擬區域網路"></a>加入虛擬區域網路</h3><p>我們可以複製剛才的Network ID，來加入虛擬區網</p><p>在常駐程式右鍵選擇Join network就可以輸入Network ID</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%205.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%206.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%207.png" alt="image.png"></p><h3 id="授權裝置加入"><a href="#授權裝置加入" class="headerlink" title="授權裝置加入"></a>授權裝置加入</h3><p>加入成功後，到管理頁面點那筆區域網路</p><p>可以看到有一筆裝置要加入，但尚未授權</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%208.png" alt="image.png"></p><p>勾選這筆成員，做授權行為</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%209.png" alt="image.png"></p><p>授權成功會呈現綠色勾勾</p><p>此時這筆裝置就成功加入虛擬區網，並擁有權限可以訪問該區網內的服務</p><p>並且每台裝置會被分配到特定的IP，可見圖中Managed IPs欄位</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%2010.png" alt="image.png"></p><h2 id="私人Zerotier中繼器-架構說明"><a href="#私人Zerotier中繼器-架構說明" class="headerlink" title="私人Zerotier中繼器 - 架構說明"></a>私人Zerotier中繼器 - 架構說明</h2><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/zerotier-server/image%2011.png" alt="image.png"></p><h2 id="私人Zerotier中繼器-Server架設"><a href="#私人Zerotier中繼器-Server架設" class="headerlink" title="私人Zerotier中繼器 - Server架設"></a>私人Zerotier中繼器 - Server架設</h2><p>首先我們在私人的Server安裝Zerotier後</p><div class="note info flat no-icon flat"><p>私人Zerotier中繼器必須是可以所有裝置皆可以連到的網路環境</p></div><h3 id="初始化設定moon世界定義"><a href="#初始化設定moon世界定義" class="headerlink" title="初始化設定moon世界定義"></a>初始化設定moon世界定義</h3><p>透過zerotier-idtool初始化設定moon世界定義(world definition)的檔案 (<code>identity.public</code>為辨識用的金鑰)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool initmoon /var/lib/zerotier-one/identity.public &gt;&gt; moon.json</span><br></pre></td></tr></table></figure><h3 id="編輯moon-json"><a href="#編輯moon-json" class="headerlink" title="編輯moon.json"></a>編輯moon.json</h3><p>在roots找到屬於該root server該筆資料，可用<code>identity.public</code>(通常只有一筆)</p><p>編輯<code>stableEndpoints</code>，填入ip:port，表示該root server的連線方式</p><p>如以下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;4de710377a&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;objtype&quot;</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;roots&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">&quot;identity&quot;</span>: <span class="string">&quot;4de710377a:0:636fcd4ae5e3283ea33977005ef09e04e725fc0544b2796d20f1ce4cafcb4031477715427e12eb061e4f14fdd2b4fdd7dc8c91f03577e141218d854bc1b571b3&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;stableEndpoints&quot;</span>: [<span class="string">&quot;172.207.27.6/9993&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">&quot;signingKey&quot;</span>: <span class="string">&quot;...xxxxxx&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;signingKey_SECRET&quot;</span>: <span class="string">&quot;...xxxxxx&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;updatesMustBeSignedBy&quot;</span>: <span class="string">&quot;...xxxxxx&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;worldType&quot;</span>: <span class="string">&quot;moon&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="產生已簽證的真實世界"><a href="#產生已簽證的真實世界" class="headerlink" title="產生已簽證的真實世界"></a>產生已簽證的真實世界</h3><p>將會產生一個000000<node-id>.moon檔案，不包含金鑰，但由moon.json的金鑰做簽署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></table></figure><h3 id="將簽證好的moon設定檔放入根節點紀錄區"><a href="#將簽證好的moon設定檔放入根節點紀錄區" class="headerlink" title="將簽證好的moon設定檔放入根節點紀錄區"></a>將簽證好的moon設定檔放入根節點紀錄區</h3><p>該設定檔用來了解root server的資訊(連線ip等等)</p><p><strong>其他要加入虛擬網路的節點都需要將該檔案放到此路徑下，這樣才知道要找根節點溝通</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/zerotier-one/moons.d</span><br><span class="line">cp 000000&lt;node-id&gt;.moon /var/lib/zerotier-one/moons.d</span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p>Reference: <a href="https://docs.zerotier.com/roots/">https://docs.zerotier.com/roots/</a></p></div><h3 id="重啟Zerotier"><a href="#重啟Zerotier" class="headerlink" title="重啟Zerotier"></a>重啟Zerotier</h3><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> stop</span></span><br><span class="line">systemctl stop zerotier-one</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start</span></span><br><span class="line">systemctl start zerotier-one</span><br></pre></td></tr></table></figure><p>MacOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> stop</span></span><br><span class="line">sudo launchctl unload /Library/LaunchDaemons/com.zerotier.one.plist</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start</span></span><br><span class="line">sudo launchctl load /Library/LaunchDaemons/com.zerotier.one.plist</span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p>Reference: <a href="https://docs.zerotier.com/controller#clean-up-networks">https://docs.zerotier.com/controller#clean-up-networks</a></p></div><p><strong>網路控制器</strong></p><p>資料儲存在controller.d目錄下</p><div class="note info flat no-icon flat"><p>Zerotier建議根伺服器不要充當網路控制器、加入網路或執行任何其他重疊功能<br>它們需要良好可靠的網路連接，但需要很少的 RAM、儲存或 CPU<br>因此該網路控制器可設定在根節點上，也可找另一台虛擬機來管理網路設定相關任務<br>若為別的虛擬機也一樣要把client端 根節點設定上去</p></div><h2 id="私人Zerotier中繼器-建立虛擬區域網路"><a href="#私人Zerotier中繼器-建立虛擬區域網路" class="headerlink" title="私人Zerotier中繼器 - 建立虛擬區域網路"></a>私人Zerotier中繼器 - 建立虛擬區域網路</h2><p>這邊我們將透過Zerotier Restful API來在我們的Zerotier中繼器執行虛擬區網管理的事情</p><div class="note info flat no-icon flat"><p>Zerotier Restful API<br><a href="https://docs.zerotier.com/service/v1#tag/Controller/operation/network_postNetwork">https://docs.zerotier.com/service/v1#tag/Controller/operation/network_postNetwork</a></p></div><h3 id="前置環境變數設定"><a href="#前置環境變數設定" class="headerlink" title="前置環境變數設定"></a>前置環境變數設定</h3><p>官方文件提供curl或cli方式來進行網路設定操作</p><p>curl有部分需要設定環境變數</p><p>TOKEN設定：<code>TOKEN=$(sudo cat /var/lib/zerotier-one/authtoken.secret)</code></p><p>NODEID設定：<code>NODEID=$(sudo zerotier-cli info | cut -d &quot; &quot; -f 3)</code></p><h3 id="新增虛擬網路設定"><a href="#新增虛擬網路設定" class="headerlink" title="新增虛擬網路設定"></a>新增虛擬網路設定</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:9993/controller/network/$&#123;NODEID&#125;______&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot; -d &#123;&#125;</span><br></pre></td></tr></table></figure><p>當送出以上api後controller會產生<code>隨機的Network ID</code></p><p>回傳是一筆json格式，其中id欄位為network id</p><p>NWID設定：<code>NWID=&lt;your-network-id&gt;</code></p><h3 id="列出虛擬網路清單"><a href="#列出虛擬網路清單" class="headerlink" title="列出虛擬網路清單"></a>列出虛擬網路清單</h3><p>新增後，我們可以檢查清單是否有新增的網路id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://localhost:9993/controller/network&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="取得特定虛擬網路資訊"><a href="#取得特定虛擬網路資訊" class="headerlink" title="取得特定虛擬網路資訊"></a>取得特定虛擬網路資訊</h3><p>若想要看詳細資訊，可以執行這段指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="更新特定虛擬區域網路資訊"><a href="#更新特定虛擬區域網路資訊" class="headerlink" title="更新特定虛擬區域網路資訊"></a>更新特定虛擬區域網路資訊</h3><p>我們可以針對該區域網路更改名稱資訊，以便區隔其他區網</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot; -d &#x27;&#123;&quot;name&quot;: &quot;&lt;the-network-name&gt;&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="設定特定虛擬網路管理IP區段-CIDR"><a href="#設定特定虛擬網路管理IP區段-CIDR" class="headerlink" title="設定特定虛擬網路管理IP區段(CIDR)"></a>設定特定虛擬網路管理IP區段(CIDR)</h3><p>設定管理區段，讓加入網路的節點分配到的ip為該ip區段的範圍</p><p>ipRangeStart: 192.168.196.1</p><p>ipRangeEnd: 192.168.196.254</p><p>target: 192.168.196.0/24</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot; \</span><br><span class="line">    -d &#x27;&#123;&quot;ipAssignmentPools&quot;: [&#123;&quot;ipRangeStart&quot;: &quot;192.168.196.1&quot;, &quot;ipRangeEnd&quot;: &quot;192.168.196.254&quot;&#125;], &quot;routes&quot;: [&#123;&quot;target&quot;: &quot;192.168.196.0/24&quot;, &quot;via&quot;: null&#125;], &quot;v4AssignMode&quot;: &quot;zt&quot;, &quot;private&quot;: true &#125;&#x27;</span><br></pre></td></tr></table></figure><p>此時我們已經設定好基本的區域網路設置了，可以先跳到Client去設置要連私人中繼器，並加入區域網路</p><h3 id="列出特定虛擬網路成員"><a href="#列出特定虛擬網路成員" class="headerlink" title="列出特定虛擬網路成員"></a>列出特定虛擬網路成員</h3><p>透過該API可以知道目前成員有哪些，以及授權狀態</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;/member&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="授權特定網路特定成員"><a href="#授權特定網路特定成員" class="headerlink" title="授權特定網路特定成員"></a>授權特定網路特定成員</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;/member/$&#123;MEMID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot; -d &#x27;&#123;&quot;authorized&quot;: true&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="取得特定虛擬網路特定成員資訊"><a href="#取得特定虛擬網路特定成員資訊" class="headerlink" title="取得特定虛擬網路特定成員資訊"></a>取得特定虛擬網路特定成員資訊</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEMID=a-member&#x27;s-node-id</span><br><span class="line">curl &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;/member/$&#123;MEMID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="私人Zerotier中繼器-Client連線方法"><a href="#私人Zerotier中繼器-Client連線方法" class="headerlink" title="私人Zerotier中繼器 - Client連線方法"></a>私人Zerotier中繼器 - Client連線方法</h2><h3 id="取得Root-Server簽證的世界定義設定檔"><a href="#取得Root-Server簽證的世界定義設定檔" class="headerlink" title="取得Root Server簽證的世界定義設定檔"></a>取得Root Server簽證的世界定義設定檔</h3><p>這邊要將簽證的檔案給予client端，並放入根節點紀錄區moons.d</p><p>讓client端知道連線虛擬網路要與Root Server溝通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/zerotier-one/moons.d</span><br><span class="line">cp 000000&lt;node-id&gt;.moon /var/lib/zerotier-one/moons.d</span><br></pre></td></tr></table></figure><h3 id="重啟Zerotier-1"><a href="#重啟Zerotier-1" class="headerlink" title="重啟Zerotier"></a>重啟Zerotier</h3><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> stop</span></span><br><span class="line">systemctl stop zerotier-one</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start</span></span><br><span class="line">systemctl start zerotier-one</span><br></pre></td></tr></table></figure><p>MacOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> stop</span></span><br><span class="line">sudo launchctl unload /Library/LaunchDaemons/com.zerotier.one.plist</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start</span></span><br><span class="line">sudo launchctl load /Library/LaunchDaemons/com.zerotier.one.plist</span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p>Reference: <a href="https://docs.zerotier.com/controller#clean-up-networks">https://docs.zerotier.com/controller#clean-up-networks</a></p></div><h3 id="檢查根節點是否加入連結清單"><a href="#檢查根節點是否加入連結清單" class="headerlink" title="檢查根節點是否加入連結清單"></a>檢查根節點是否加入連結清單</h3><p>此時會看到其中一個節點為MOON字眼的類別，並且查看ip是否是自架設機器的ip</p><p>有出現代表已經設定成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli listpeers</span><br></pre></td></tr></table></figure><h3 id="加入網路"><a href="#加入網路" class="headerlink" title="加入網路"></a>加入網路</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli join &lt;network-id&gt;</span><br></pre></td></tr></table></figure><h3 id="等待授權-amp-檢查是否加入網路"><a href="#等待授權-amp-檢查是否加入網路" class="headerlink" title="等待授權&amp;檢查是否加入網路"></a>等待授權&amp;檢查是否加入網路</h3><p>透過以下指令可以看到網路清單，其中可看該network-id狀態是否為OK</p><p>OK表示已授權，並且可看到自己被分配的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli listnetworks</span><br></pre></td></tr></table></figure><h2 id="私人Zerotier中繼器-其他常用API操作"><a href="#私人Zerotier中繼器-其他常用API操作" class="headerlink" title="私人Zerotier中繼器 - 其他常用API操作"></a>私人Zerotier中繼器 - 其他常用API操作</h2><h3 id="解除授權特定網路特定成員"><a href="#解除授權特定網路特定成員" class="headerlink" title="解除授權特定網路特定成員"></a>解除授權特定網路特定成員</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;/member/$&#123;MEMID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;&quot; -d &#x27;&#123;&quot;authorized&quot;: false&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="刪除特定網路特定成員"><a href="#刪除特定網路特定成員" class="headerlink" title="刪除特定網路特定成員"></a>刪除特定網路特定成員</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE &quot;http://localhost:9993/controller/network/$&#123;NWID&#125;/member/$&#123;MEMID&#125;&quot; -H &quot;X-ZT1-AUTH: $&#123;TOKEN&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Zeortier是一個網路面向的解決方案，雖然沒有提供CLI以及UI可以方便管理，但開源專案也有可以整合過，可參考使用的UI介面</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> VLAN </tag>
            
            <tag> Zerotier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向導向程式設計(AOP)概念 與 AspectJ 實作</title>
      <link href="/posts/%E9%9D%A2%E5%90%91%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88(AOP)%E6%A6%82%E5%BF%B5%20%E8%88%87%20AspectJ%20%E5%AF%A6%E4%BD%9C/"/>
      <url>/posts/%E9%9D%A2%E5%90%91%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88(AOP)%E6%A6%82%E5%BF%B5%20%E8%88%87%20AspectJ%20%E5%AF%A6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在物件導向程式設計（OOP）中，系統的功能被分散到多個類別或物件中，例如日誌記錄、權限驗證、安全性等方面的程式碼會散佈在不同的類和方法中，導致程式碼的重複性和難以維護性增加。 AOP的目標是通過提取這些橫切關注點，並將它們模組化，從而提高程式碼的可讀性、可維護性和可重用性。</p><h2 id="AOP介紹"><a href="#AOP介紹" class="headerlink" title="AOP介紹"></a>AOP介紹</h2><h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><p>簡單來說，面向導向程式設計(Aspect-oriented programming, AOP)是<strong>根據專案程式中想要介入的地方進行行為操作</strong>。</p><p>如下圖範例，想對Method A B C執行前都先進行權限驗證行為，執行後都進行日誌紀錄行為。而原本寫法上要到每個函式宣告的地方插入撰寫的內容。AOP則改為在單個面向程式碼中寫這幾個Method是切入點，要在執行前加入這項功能行為。來達成統一管理以及模組化的效用</p><p>換個情境思考，若原先的寫法上因為驗證相關的類別與方法有更新，而導致每個引用的部分皆須微調修正，那是不是會頭痛呢<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-1.jpg" alt="Untitled"></p><h3 id="AOP術語"><a href="#AOP術語" class="headerlink" title="AOP術語"></a>AOP術語</h3><p>在AOP中有以下常用的術語：</p><ul><li><p>面向連結點 (joinpoint)<br>  連結點為在面向中需要關注的點，如以下：</p><ol><li>呼叫方法或建構子 (A method or constructor call)</li><li>方法與建構子的執行 (The execution of a method or constructor)</li><li>變數欄位的訪問或更新 (The accessing or updating of a field)</li><li>異常處理 (The handling of an exception)</li><li>類別與物件的初始化 (The initialization of a class or object)</li></ol><p>  其實就是面向中操作時可以介入的點，上述的關注點可以如以下用法：</p><ol><li>在某個函式執行前，要先執行權限驗證功能，確定使用者有無權限</li><li>某個變數被賦值更新內容後，要執行重新渲染，讓畫面同步</li><li>當發生異常時，執行日誌紀錄</li><li>當某個物件初始化前，執行檢查資料有無設定完善</li></ol><p>  具題撰寫格式如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">call ( void Foo.m(int) )</span><br><span class="line">call ( Foo.new(..) )</span><br><span class="line">execution ( * Foo.*(..) throws IOException )</span><br><span class="line">execution ( !public Foo.new(..) )</span><br><span class="line">initialization ( Foo.new(int) )</span><br><span class="line">within ( com.bigboxco.* )</span><br><span class="line">args ( *, int )</span><br></pre></td></tr></table></figure>  <div class="note info flat"><p>💡可以發現call、execution、initialization等為不同的連接方法<br>括弧裡面格式通常為 (回傳型別 類別方法(參數))<br>上述範例中*星字號代表不限制，亦即皆可<br>..符號則表示不管內容為何皆可</p></div><p>  因此，上述範例的joinpoint可以為</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call(void Foo.MethodA())</span><br><span class="line">call(int Bar.MethodB())</span><br><span class="line">call(void Bear.MethodC(int))</span><br></pre></td></tr></table></figure></li><li><p>面向切入點 (pointcut)</p><p>  選擇面向連結點的方式/規則，代表該邏輯面向為一種切入點，可以當作切入點是一個該面向切入的稱呼</p><p>  例如上述中我們可以定義權限驗證的切入點為以下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pointcut auth():</span><br><span class="line">call(void Foo.MethodA()) ||</span><br><span class="line">call(int Bar.MethodB())  ||</span><br><span class="line">call(void Bear.MethodC(int))</span><br></pre></td></tr></table></figure><p>  可以看到我們將切入點取名為auth，其規則為任一執行指定類別方法即符合條件，其中採用 || 或者的符號處理</p></li><li><p>面向切入行為 (advice)</p><p>  希望在切入點進行的操作方式，例如在切入點前後增加功能，或者改寫切入點的內容</p><ol><li>Before：於指定切入點前加入行為</li><li>After：於指定切入點後加入行為</li><li>Around：於指定切入點覆寫行為</li></ol></li><li><p>面向編織器 (aspect weaver)</p><p>  負責在編譯時期將面向程式碼所定義之內容併入系統中，因此編譯後的byte code中會將切入行為注入至切入點中。若我們透過反編譯方式查看程式碼，是可以很明顯地看到。</p></li></ul><h3 id="AOP特性與優點"><a href="#AOP特性與優點" class="headerlink" title="AOP特性與優點"></a>AOP特性與優點</h3><ul><li>允許不修改原程式碼情況下添增行為</li><li>提高模組化程度與維護性</li><li>效能方面與傳統撰寫方式幾乎相同</li></ul><h2 id="Maven介紹"><a href="#Maven介紹" class="headerlink" title="Maven介紹"></a>Maven介紹</h2><h3 id="Maven概念"><a href="#Maven概念" class="headerlink" title="Maven概念"></a>Maven概念</h3><p>Maven是一個基於Java的專案管理工具，可以幫助開發人員自動化建構、發布和管理Java專案。Maven使用一個稱為POM（Project Object Model）的XML檔案來描述專案的結構、相依關係和建構過程。POM檔案包含專案的metadata，例如專案名稱、版本號、作者等，同時也定義了專案的相依關係、建構目標和插件配置等資訊。</p><p>以下是一些Maven的重要概念：</p><ol><li>POM（Project Object Model）：POM是Maven專案的核心檔案，描述了專案的結構、相依關係和建構過程。POM檔案位於專案的根目錄下，使用XML格式進行編寫。</li><li>依賴管理：Maven透過POM檔案中的相依配置來管理專案的相依關係。開發人員可以指定專案所依賴的外部函式庫或模組，Maven會自動下載這些相依項目並將其加入專案的建構路徑中。</li><li>建構生命週期(Lifecycle)：Maven定義了一組標準的建構生命週期，包括clean、compile、test、package、install和deploy等階段。開發人員可以在POM檔案中配置這些生命週期階段要執行的操作，以實現專案的建構、測試和部署等任務。</li><li>插件：Maven支援外掛程式機制，開發人員可以透過外掛程式擴展和客製化專案的建構過程。外掛程式可以在建構生命週期的不同階段執行特定的任務，例如程式碼靜態分析、單元測試、打包等。</li><li>倉庫（Repository）：Maven使用倉庫來存儲和管理相依函式庫和建構成果。有兩種類型的倉庫：本地倉庫（Local Repository）和遠端倉庫（Remote Repository）。本地倉庫位於本地開發機器上，用於快取下載的相依項目和建構成果。遠端倉庫是分佈式的，可以是公共的中央倉庫或私有的自訂倉庫，用於分享和獲取相依項目。</li></ol><p>透過使用Maven，開發人員可以簡化專案的建構過程，自動管理相依關係，提高專案的可維護性和可重複使用性。此外，Maven還提供了許多其他功能，例如專案報告、程式碼檢查、文件生成等，進一步提升開發效率和專案品質。</p><h3 id="Maven專案結構"><a href="#Maven專案結構" class="headerlink" title="Maven專案結構"></a>Maven專案結構</h3><p>以下為專案的結構</p><ol><li>在專案資料夾根目錄必定要有pom.xml檔案</li><li>src為撰寫原始碼的目錄<ol><li>main為主要程式撰寫區域</li><li>test為測試案例撰寫的區域</li></ol></li><li>target為編譯後產生bytecode與相關報告的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">|-- pom.xml</span><br><span class="line">`-- src</span><br><span class="line">|   |-- main</span><br><span class="line">|   |   `-- java</span><br><span class="line">|   |       `-- com</span><br><span class="line">|   |           `-- mycompany</span><br><span class="line">|   |               `-- app</span><br><span class="line">|   |                   `-- App.java</span><br><span class="line">|   `-- <span class="built_in">test</span></span><br><span class="line">|       `-- java</span><br><span class="line">|           `-- com</span><br><span class="line">|               `-- mycompany</span><br><span class="line">|                   `-- app</span><br><span class="line">|                       `-- AppTest.java</span><br><span class="line">` -- target</span><br></pre></td></tr></table></figure><h3 id="Maven-POM結構"><a href="#Maven-POM結構" class="headerlink" title="Maven POM結構"></a>Maven POM結構</h3><p>pom.xml採用標籤形式撰寫，project標籤包含pom整體內容，其內容可劃分幾個區域：</p><ol><li>專案資訊 groupId標籤主要是定義該專案所屬的組織，若以後發佈給他人使用，他人在引用宣告時將依循groupId的名稱使用 artifactId為定義專案的ID，就是專案的唯一辨別方法，後續發佈至公開的儲存庫中可以辨別</li><li>專案屬性 properties標籤區域主要紀錄專案使用的字源編碼與編譯版本 以下範例採用UTF-8以及Java 7版本</li><li>依賴套件 在dependencies標籤區域內撰寫使用的第三方套件，如以下範例採用了junit單元測試套件 其中每個依賴套件需要以dependency標籤宣告，groupId、artifactId、version則是定義專案需要的套件為何與版本 <div class="note info flat"><p>💡一般引用第三方套件可於mvn repository網站找到需要的套件，其中引用的內容資訊也會提供</p></div></li><li>建構資訊 &amp; 插件管理 build標籤區域主要為有關專案建構的資訊，也就是跟生命週期相關的內容 其中透過pluginManagement可以擴充以及控制生命週期指令需進行的事項 添增插件方法與依賴套件概念相似，於plugins標籤區域添加plugin標籤</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven指令"><a href="#Maven指令" class="headerlink" title="Maven指令"></a>Maven指令</h3><p>在上述介紹中提到生命週期的流程，其中常見的指令也與生命週期相關，而這些的指令操作是否可行以及執行內容也與插件有關連性。</p><ul><li>專案範本 mvn archetype:generate</li><li>編譯 mvn compile</li><li>安裝 mvn install</li><li>執行 mvn exec</li><li>測試 mvn test</li><li>打包 mvn package</li></ul><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>環境準備<ul><li>Java 11環境安裝</li><li>Maven安裝</li></ul></li><li>建立Maven專案 與 AspectJ套件依賴設置<ul><li>範本形式建立Maven專案</li><li>pom.xml 執行指令設置</li><li>AspectJ - pom.xml設置</li></ul></li><li>面向程式碼實作<ul><li>預備範例切入點對象</li><li>面向宣告</li><li>切入點宣告與行為撰寫</li><li>多個連接點為切入點</li></ul></li><li>AspectJ支援的相關資訊<ul><li>Pointcut形式</li><li>Adivce類型</li></ul></li><li>Around Advice運用方法<ul><li>ProceedingJoinPoint支援取得切入點資訊</li></ul></li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><p>接續實作上採用Windows作業系統、Java 11、Maven為環境</p><h3 id="Java-11環境安裝"><a href="#Java-11環境安裝" class="headerlink" title="Java 11環境安裝"></a>Java 11環境安裝</h3><p>到<a href="https://www.oracle.com/tw/java/technologies/javase/jdk11-archive-downloads.html">Java Archive Downloads - Java SE 11 | Oracle 台灣</a> JAVA JDK 11網站選擇下載</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-2.jpg" alt="Untitled"></p><p>安裝後，其安裝內容應該會在C:\Program Files\Java\jdk-11.x.x</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-3.jpg" alt="Untitled"></p><ul><li><p>前往環境變數設置頁面</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-4.jpg" alt="Untitled"></p></li><li><p>設定環境變數</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-5.jpg" alt="Untitled"></p></li><li><p>設定JAVA_HOME環境變數</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-6.jpg" alt="Untitled"></p></li><li><p>測試指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-7.jpg" alt="Untitled"></p></li></ul><h3 id="Maven安裝"><a href="#Maven安裝" class="headerlink" title="Maven安裝"></a>Maven安裝</h3><p><a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a></p><ul><li><p>下載Maven</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-8.jpg" alt="Untitled"></p></li><li><p>解壓縮至C磁碟</p></li><li><p>設定環境變數</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-9.jpg" alt="Untitled"></p></li><li><p>測試指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/aop-10.jpg" alt="Untitled"></p></li></ul><h2 id="建立Maven專案-與-AspectJ套件依賴設置"><a href="#建立Maven專案-與-AspectJ套件依賴設置" class="headerlink" title="建立Maven專案 與 AspectJ套件依賴設置"></a>建立Maven專案 與 AspectJ套件依賴設置</h2><h3 id="範本形式建立Maven專案"><a href="#範本形式建立Maven專案" class="headerlink" title="範本形式建立Maven專案"></a>範本形式建立Maven專案</h3><p>maven提供便捷的指令可以建構專案範本，其中甚至可以指定專案的類型需求</p><p>本次實作僅需一般的即可，使用官方建議的快速入門範本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=<span class="literal">false</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡參數說明<br>-DgroupId：你建立的專案所屬的組織<br>-DartifactId：你建立的專案ID<br>-DarchetypeArtifactId：指定的範本ID<br>-DarchetypeVersion：範本的版本，要看範本支援到哪一版<br>-DinteractiveMode：是否啟用互動模式</p></div><h3 id="pom-xml-執行指令設置"><a href="#pom-xml-執行指令設置" class="headerlink" title="pom.xml 執行指令設置"></a>pom.xml 執行指令設置</h3><p>若於專案中欲執行main函式會發生錯誤，原因為目前的pom尚未設置執行方法的插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn exec:java</span><br></pre></td></tr></table></figure><p>在pom.xml插件管理處plugins標籤區內添增以下plugin標籤描述的區塊</p><p>其中configuration的mainClass是告訴maven main函式的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.mycompany.app.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="AspectJ-pom-xml設置"><a href="#AspectJ-pom-xml設置" class="headerlink" title="AspectJ - pom.xml設置"></a>AspectJ - pom.xml設置</h3><p>在設置上包含依賴與插件設置，依賴設置主要使得在程式碼中可以使用aspectj語法(joinpoint、pointcut、advice)，插件設置則為生命週期中編譯時期需要進行編織動作，因此需要設置插件。</p><ul><li><p>依賴設置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>插件設置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectj-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">complianceLevel</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">complianceLevel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="面向程式碼實作"><a href="#面向程式碼實作" class="headerlink" title="面向程式碼實作"></a>面向程式碼實作</h2><h3 id="預備範例切入點對象"><a href="#預備範例切入點對象" class="headerlink" title="預備範例切入點對象"></a>預備範例切入點對象</h3><p>首先面向程式碼功用為於切入點進行行為操作，因此在專案中我們先宣告一個函式作為切入點</p><p>將App.java更改為以下內容，其中程式一執行就會執行App.greet()函式，輸出Hello World!字串</p><p>待會我們的切入點就是App.greet()函式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        App app = <span class="keyword">new</span> App();</span><br><span class="line">        app.greet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;Hello World!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向宣告"><a href="#面向宣告" class="headerlink" title="面向宣告"></a>面向宣告</h3><p>使用@Aspect於指定的類別面向宣告，告訴AspectJ Weaver編譯時需進行面向相關操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切入點宣告與行為撰寫"><a href="#切入點宣告與行為撰寫" class="headerlink" title="切入點宣告與行為撰寫"></a>切入點宣告與行為撰寫</h3><p>在AOP介紹時，有提到joinpoint或pointcut的寫法格式，這次我們要對App.greet()函式作為切入點，並且是在執行App.greet()函式的時間點</p><p>那我們的joinpoint會是<code>execution(* com.mycompany.app.App.greet())</code> </p><p>接著根據我們想要介入的時機點進行advice的宣告，如Before、Around、After</p><p>範例如下：</p><ul><li><p>Before advice</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect- Before!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編織並執行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn aspectj:compile exec:java</span><br></pre></td></tr></table></figure><p>  執行結果<br>  Before是指在切入點前添加行為<br>  可以發現原先無面向切入預期只有輸出Hello World!，但藉由面向切入，指定在greet函式前執行我們添加的行為。<br>  因此先輸出了Hello Aspect- Before!</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello Aspect- Before!</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li><li><p>Around advice</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Around!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編織並執行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn aspectj:compile exec:java</span><br></pre></td></tr></table></figure><p>  執行結果<br>  Around為覆寫切入點的切入行為advice，因此執行結果只有切入執行的部分：Hello Aspect - Around!。<br>  原先的Hello World!則被覆寫掉了</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Aspect - Around!</span><br></pre></td></tr></table></figure></li><li><p>after advice</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - After!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編織並執行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn aspectj:compile exec:java</span><br></pre></td></tr></table></figure><p>  執行結果<br>  After是指在切入點後添加行為<br>  可以發現原先無面向切入預期只有輸出Hello World!，但藉由面向切入，指定在greet函式後執行我們添加的行為。<br>  因此先輸出了Hello Aspect - After!</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello Aspect - After!</span><br></pre></td></tr></table></figure></li><li><p>切入點管理問題</p><p>  若三個advice都一同使用的話，如下程式碼</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Before!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Around!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - After!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>會發現有一個缺點，其實切入點皆為execution(* com.mycompany.app.App.greet())，那何不統一管理</p><ul><li>切入點定義  我們將execution(* com.mycompany.app.App.greet())取名為executeAppGreet()切入點，如此在使用時只要輸入executeAppGreet()即可，而切入點有變動時只要修正定義的地方  範例如下：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAppGreet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  完整程式碼：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAppGreet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;executeAppGreet()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Before!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;executeAppGreet()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Around!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;executeAppGreet()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - After!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="多個連接點為切入點"><a href="#多個連接點為切入點" class="headerlink" title="多個連接點為切入點"></a>多個連接點為切入點</h3><p>在前面AOP介紹時有提到透過規則組合方式定義切入點，其中AspectJ包含以下方法：</p><ul><li>Not規則：!</li><li>OR規則：||</li><li>AND規則：&amp;&amp;</li><li>wildcards規則：*</li><li>wildcards規則：..</li><li>包含subtype規則：+</li></ul><p>以下為採用其中幾種的範例，可以看到</p><ol><li>‘* com.mycompany.app.App.greet’的*符號代表wildcards容許任何回傳類型</li><li>com.mycompany.app.App.greet(..)的..符號代表wildcards容許任何參數(不論有無或多少個)</li><li>!execution(* com.mycompany.app.App.greet())的!符號代表不要對該連接點切入</li><li>整體使用 &amp;&amp; 串接表示條件都相符才是切入點</li></ol><p>總結該切入點是所有不論任何回傳類型與參數多寡的com.mycompany.app.App.greet函式，且不接受沒有參數的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.mycompany.app.App.greet(..)) &amp;&amp; !execution(* com.mycompany.app.App.greet())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAppGreet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;executeAppGreet()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Before!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;executeAppGreet()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - After!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這次範例的App.java內容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        App app = <span class="keyword">new</span> App();</span><br><span class="line">        app.greet();</span><br><span class="line">        app.greet(<span class="string">&quot;App&quot;</span>);</span><br><span class="line">        app.hibernate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;Hello World!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;Hello&quot;</span> + message +<span class="string">&quot;!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hibernate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;App is hibernating&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>編織並執行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn aspectj:compile exec:java</span><br></pre></td></tr></table></figure><p>執行結果如下，可以發現greet()函式確實沒有被添增行為，而greet(“App”)函式則前後添增行為</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello Aspect - Before!</span><br><span class="line">HelloApp!</span><br><span class="line">Hello Aspect - After!</span><br><span class="line">App is hibernating</span><br></pre></td></tr></table></figure><h2 id="AspectJ支援的相關資訊"><a href="#AspectJ支援的相關資訊" class="headerlink" title="AspectJ支援的相關資訊"></a>AspectJ支援的相關資訊</h2><p>在下面連結的這項文件中，整理了AsepctJ的語法，有需求可以詳細察看<br><a href="https://www.eclipse.org/aspectj/doc/released/quick5.pdf">https://www.eclipse.org/aspectj/doc/released/quick5.pdf</a></p><h3 id="Pointcut形式"><a href="#Pointcut形式" class="headerlink" title="Pointcut形式"></a>Pointcut形式</h3><p>切入點形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">call(MethodPat) </span><br><span class="line">call(ConstructorPat) </span><br><span class="line">execution(MethodPat) </span><br><span class="line">execution(ConstructorPat) </span><br><span class="line">initialization(ConstructorPat) </span><br><span class="line">preinitialization(ConstructorPat) </span><br><span class="line">staticinitialization(TypePat) </span><br><span class="line">get(FieldPat) </span><br><span class="line">set(FieldPat) </span><br><span class="line">handler(TypePat) </span><br><span class="line">adviceexecution()</span><br><span class="line">within(TypePat) </span><br><span class="line">withincode(MethodPat) </span><br><span class="line">withincode(ConstructorPat) </span><br><span class="line">cflow(Pointcut) </span><br><span class="line">cflowbelow(Pointcut) </span><br><span class="line"><span class="keyword">if</span>(Expression) </span><br><span class="line"><span class="keyword">this</span>(Type | Var) </span><br><span class="line">target(Type | Var) </span><br><span class="line">args(Type | Var , …) </span><br><span class="line"><span class="meta">@this(Type|Var)</span> </span><br><span class="line"><span class="meta">@target(Type|Var)</span> </span><br><span class="line"><span class="meta">@args(Type|Var, …)</span> </span><br><span class="line"><span class="meta">@within(Type|Var)</span> </span><br><span class="line"><span class="meta">@withincode(Type|Var)</span> </span><br><span class="line"><span class="meta">@annotation(Type|Var)</span></span><br></pre></td></tr></table></figure><h3 id="Adivce類型"><a href="#Adivce類型" class="headerlink" title="Adivce類型"></a>Adivce類型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="meta">@AfterReturning</span></span><br><span class="line"><span class="meta">@AfterThrowing</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="meta">@Around</span></span><br></pre></td></tr></table></figure><h2 id="Around-Advice運用方法"><a href="#Around-Advice運用方法" class="headerlink" title="Around Advice運用方法"></a>Around Advice運用方法</h2><p>around advice可以讓我們覆寫原切入點內容，但若是以類別函式為切入點，那如何在面向程式碼中使用類別函式的參數與類別變數呢?</p><p>假設App.java如以下內容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        App app = <span class="keyword">new</span> App(<span class="string">&quot;Bear&quot;</span>);</span><br><span class="line">        app.greet();</span><br><span class="line">        app.greet(<span class="string">&quot;App&quot;</span>);</span><br><span class="line"></span><br><span class="line">        app = <span class="keyword">new</span> App(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        app.greet();</span><br><span class="line">        app.greet(<span class="string">&quot;meow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;Hello World!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;Hello&quot;</span> + message +<span class="string">&quot;!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到App類別有name變數，預設為空字串，在物件初始化時進行設定</p><p>一般執行結果會是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello App!</span><br><span class="line">Hello World!</span><br><span class="line">Hello meow!</span><br></pre></td></tr></table></figure><p>若我們想達成使用參數與類別變數，光看之前的Around範例是無法達成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;executeAppGreet()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAppGreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello Aspect - Around!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProceedingJoinPoint支援取得切入點資訊"><a href="#ProceedingJoinPoint支援取得切入點資訊" class="headerlink" title="ProceedingJoinPoint支援取得切入點資訊"></a>ProceedingJoinPoint支援取得切入點資訊</h3><p>ProceedingJoinPoint可以提供切入點相關資訊，因此在使用Around Advice時可以搭配，以取得所需內容與方法</p><p>使用方法為在面向函式中加入ProceedingJoinPoint參數即可使用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.mycompany.app.App.greet(String))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAppGreet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;executeAppGreet()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundAppGreet</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String arg1 = (String) joinPoint.getArgs()[<span class="number">0</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Aspect - Around! - &quot;</span> + arg1);</span><br><span class="line"></span><br><span class="line">        App myAppClass = (App) joinPoint.getTarget();</span><br><span class="line">        System.out.println(<span class="string">&quot;My name is &quot;</span> + myAppClass.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到</p><p>使用了joinPoint.getArgs()方法取得該切入點所有的參數</p><p>使用了joinPoint.getTarget()方法取得當前切入點所屬物件與其變數</p><p>編織並執行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn aspectj:compile exec:java</span><br></pre></td></tr></table></figure><p>執行結果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello Aspect - Around! - App</span><br><span class="line">My name is Bear</span><br><span class="line">Hello World!</span><br><span class="line">Hello Aspect - Around! - meow</span><br><span class="line">My name is Cat</span><br></pre></td></tr></table></figure><!-- ## 結語本篇大致敘述AOP、Maven概念以及使用AspectJ實作AOP的內容， -->]]></content>
      
      
      <categories>
          
          <category> AOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> AspectJ </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>運用Docker建置GitLab Server與GitLab CI Runner</title>
      <link href="/posts/%E9%81%8B%E7%94%A8Docker%E5%BB%BA%E7%BD%AEGitLab%20Server%E8%88%87GitLab%20CI%20Runner/"/>
      <url>/posts/%E9%81%8B%E7%94%A8Docker%E5%BB%BA%E7%BD%AEGitLab%20Server%E8%88%87GitLab%20CI%20Runner/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GitLab提供self-managed GitLab伺服器架設方式，讓企業或團隊可以在自己的基礎設施(infrastructure)中運行GitLab Server。私人的GitLab Server使得專案機密資料不會因第三方因素而暴露，導致企業研發之專利技術內容公開而失去價值。</p><p>GitLab CI Runner為提供GitLab 運行CI/CD作業的應用程式</p><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>環境準備<ul><li>安裝Docker</li></ul></li><li>建置GitLab Server<ul><li>撰寫Docker Compose.yml設置運行容器服務</li><li>申請Gmail應用程式密碼</li><li>撰寫.env環境變數</li><li>運行GitLab Server容器</li><li>寄送測試信件確認SMTP功能</li><li>使用者註冊設置</li></ul></li><li>建置GitLab CI Runner<ul><li>於GitLab專案Repo上新增CI/CD Runner</li><li>撰寫Docker Compose.yml設置運行容器服務</li><li>運行GitLab CI Runner容器</li><li>註冊GitLab CI Runner</li><li>查看該Project的Runner是否成功註冊</li></ul></li><li>測試GitLab CI Runner<ul><li>於Repo中建立.gitlab-ci.yml持續整合設定檔</li><li>觸發CI/CD機制</li><li>查看GitLab CI/CD Pipelines狀態</li><li>.gitlab-ci.yml設置Docker指令</li></ul></li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><p>範例中的作業系統採用Ubuntu 22.04版本，環境只要安裝Docker</p><h3 id="安裝Docker"><a href="#安裝Docker" class="headerlink" title="安裝Docker"></a>安裝Docker</h3><h4 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br><span class="line"></span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h4 id="給予使用者Docker權限"><a href="#給予使用者Docker權限" class="headerlink" title="給予使用者Docker權限"></a>給予使用者Docker權限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將$USER加入docker群組</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換群組</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h2 id="建置GitLab-Server"><a href="#建置GitLab-Server" class="headerlink" title="建置GitLab Server"></a>建置GitLab Server</h2><h3 id="撰寫docker-compose-yml設置運行容器服務"><a href="#撰寫docker-compose-yml設置運行容器服務" class="headerlink" title="撰寫docker-compose.yml設置運行容器服務"></a>撰寫docker-compose.yml設置運行容器服務</h3><p>gitlab server有許多的環境配置可以設定，其中本篇以SSL憑證設置與SMTP寄信設定做為分享內容</p><div class="tabs" id="gitlab-server-docker-compose.yml設置"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#gitlab-server-docker-compose.yml設置-1">自備SSL憑證 & Gmail SMTP設定</button></li><li class="tab"><button type="button" data-href="#gitlab-server-docker-compose.yml設置-2">自動letsencrypt SSL憑證 & Gmail SMTP設定</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="gitlab-server-docker-compose.yml設置-1"><ul><li><p>撰寫docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span></span><br><span class="line">    container_name: gitlab</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: <span class="string">&#x27;your_domain&#x27;</span></span><br><span class="line">    environment:</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url <span class="string">&#x27;https://your_domain&#x27;</span></span><br><span class="line">        letsencrypt[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.gmail.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 587</span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;<span class="variable">$&#123;SMTP_EMAIL&#125;</span>&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;<span class="variable">$&#123;SMTP_PASSWORD&#125;</span>&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.gmail.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_openssl_verify_mode&#x27;</span>] = <span class="string">&#x27;peer&#x27;</span></span><br><span class="line">      GITLAB_ROOT_PASSWORD: <span class="variable">$&#123;GITLAB_ROOT_PASSWORD&#125;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;22:22&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&#x27;./config:/etc/gitlab&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;./ssl:/etc/gitlab/ssl&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;./logs:/var/log/gitlab&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;./data:/var/opt/gitlab&#x27;</span></span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    shm_size: <span class="string">&#x27;256m&#x27;</span></span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: <span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>建立ssl資料夾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ssl</span><br></pre></td></tr></table></figure></li><li><p>將自備的憑證放入ssl資料夾，並取名為your_domain.crt、your_domain.key格式</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gitlab-server-docker-compose.yml設置-2"><ul><li>撰寫docker-compose.yml<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span></span><br><span class="line">    container_name: gitlab</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: <span class="string">&#x27;your_domain&#x27;</span></span><br><span class="line">    environment:</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url <span class="string">&#x27;https://your_domain&#x27;</span></span><br><span class="line">        letsencrypt[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">    letsencrypt[<span class="string">&#x27;auto_renew&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">letsencrypt[<span class="string">&#x27;contact_emails&#x27;</span>] = [<span class="string">&#x27;your_email&#x27;</span>]</span><br><span class="line">        letsencrypt[<span class="string">&#x27;auto_renew_hour&#x27;</span>] = <span class="string">&quot;12&quot;</span></span><br><span class="line">letsencrypt[<span class="string">&#x27;auto_renew_minute&#x27;</span>] = <span class="string">&quot;30&quot;</span></span><br><span class="line">letsencrypt[<span class="string">&#x27;auto_renew_day_of_month&#x27;</span>] = <span class="string">&quot;*/7&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.gmail.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 587</span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;<span class="variable">$&#123;SMTP_EMAIL&#125;</span>&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;<span class="variable">$&#123;SMTP_PASSWORD&#125;</span>&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.gmail.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_openssl_verify_mode&#x27;</span>] = <span class="string">&#x27;peer&#x27;</span></span><br><span class="line">      GITLAB_ROOT_PASSWORD: <span class="variable">$&#123;GITLAB_ROOT_PASSWORD&#125;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;22:22&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&#x27;./config:/etc/gitlab&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;./logs:/var/log/gitlab&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;./data:/var/opt/gitlab&#x27;</span></span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    shm_size: <span class="string">&#x27;256m&#x27;</span></span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: <span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>其中letsencrypt即為免費自動憑證的設置</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>💡有關詳細的SMTP設定可以查看GitLab官方文件<br><a href="https://docs.gitlab.com/omnibus/settings/smtp.html">https://docs.gitlab.com/omnibus/settings/smtp.html</a></p></div><h3 id="申請Gmail應用程式密碼"><a href="#申請Gmail應用程式密碼" class="headerlink" title="申請Gmail應用程式密碼"></a>申請Gmail應用程式密碼</h3><p>若想要使用Gmail SMTP服務，讓你的軟體可以用指定的gmail發信，但又不想要在系統/軟體輸入自己的gmail密碼。如此可於google帳戶中申請應用程式密碼</p><ul><li>前往Google帳戶管理頁面<br>  如圖點擊紅框處的按鈕  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-1.jpg" alt="Untitled"></li></ul><ul><li><p>到安全性頁面點擊兩步驟驗證，並進行相關設定</p>  <div class="note info flat"><p>💡透過兩步驟驗證使得之後不小心外洩密碼，google發現是異地登入時會需要手機驗證<br>增加帳戶的安全性</p></div><p>  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-2.jpg" alt="Untitled"></p></li></ul><ul><li><p>下拉到下方內容點擊紅框，前往應用程式密碼頁面<br>  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-3.jpg" alt="Untitled"></p></li><li><p>選擇所需的產生密碼的應用程式與裝置</p><ul><li>我們的需求是SMTP也就郵件應用程式</li><li>裝置可以自訂名稱。如GitLab server</li><li>按產生按鈕就會顯示密碼拉<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-4.jpg" alt="Untitled"></li></ul></li></ul><h3 id="撰寫-env環境變數"><a href="#撰寫-env環境變數" class="headerlink" title="撰寫.env環境變數"></a>撰寫.env環境變數</h3><p>從docker-compose.yml中可以看到有被${}符號標記的為使用環境變數，SMTP_PASSWORD的值就是填寫剛才申請的應用程式密碼拉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GITLAB_ROOT_PASSWORD=</span><br><span class="line">SMTP_EMAIL=</span><br><span class="line">SMTP_PASSWORD=</span><br></pre></td></tr></table></figure><h3 id="運行GitLab-Server容器"><a href="#運行GitLab-Server容器" class="headerlink" title="運行GitLab Server容器"></a>運行GitLab Server容器</h3><p>GitLab Server初始運行時會需要跑好一陣子，直到gitlab頁面可以訪問了就成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up</span><br></pre></td></tr></table></figure><h3 id="寄送測試信件確認SMTP功能"><a href="#寄送測試信件確認SMTP功能" class="headerlink" title="寄送測試信件確認SMTP功能"></a>寄送測試信件確認SMTP功能</h3><p>雖然上述有設定完畢SMTP功能了，但還是要確定能否正常上傳</p><p>輸入以下指令進入gitlab容器內</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab bash</span><br></pre></td></tr></table></figure><p>gitlab應用程式是由Ruby on Rails framework建構的，其中rails console提供互動command line可以與gitlab實體互動，因此透過輸入以下指令可以發送測試信件至指定的email</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console</span><br><span class="line"></span><br><span class="line">Notify.test_email(<span class="string">&#x27;your_email&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>).deliver_now</span><br></pre></td></tr></table></figure><h3 id="使用者註冊設置"><a href="#使用者註冊設置" class="headerlink" title="使用者註冊設置"></a>使用者註冊設置</h3><p>使用者註冊時GitLab就會發送註冊確認信件給予使用者，如此一來可以再次檢驗信件功能有無正常</p><p>在使用者註冊上，GitLab有提供許多的設置選項，讓團隊可以根據需求設定</p><ul><li><p>以root身分登入並前往admin頁面<br>  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-5.jpg" alt="Untitled"></p></li><li><p>在側邊選單點擊Settings→General<br>  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-6.jpg" alt="Untitled"></p></li><li><p>下拉至Sign-up restrictions</p><p>  這邊是註冊的限制相關設定，如：</p><ol><li>否允許註冊</li><li>是否需要管理者同意新註冊用戶</li><li>信件確認設定 (不強制使用者信件確認、可立即登入，但三天內需信件確認、登入前必須完成信件確認)</li><li>密碼最低長度</li><li>允許或拒絕來自哪些domain的註冊</li><li>設定註冊信箱必須符合設置的regex格式<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-7.jpg" alt="Untitled"></li></ol></li></ul><pre><code>完成設定後，就可以去嘗試使用者註冊啦</code></pre><h2 id="建置GitLab-CI-Runner"><a href="#建置GitLab-CI-Runner" class="headerlink" title="建置GitLab CI Runner"></a>建置GitLab CI Runner</h2><h3 id="於GitLab專案Repo上新增CI-CD-Runner"><a href="#於GitLab專案Repo上新增CI-CD-Runner" class="headerlink" title="於GitLab專案Repo上新增CI/CD Runner"></a>於GitLab專案Repo上新增CI/CD Runner</h3><p>每個專案repo都可以設定runner，GitLab會給予註冊runner的token，讓他知道你的專案要與這個runner做連結</p><p>如下圖步驟到專案CI/CD設置頁面的Runner區域新增Runner<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-8.jpg" alt="Untitled"></p><p>根據需求選擇，其中Tags為必填選項，他會影響到後續ci設置時指定呼叫的runner<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-9.jpg" alt="Untitled"></p><p>在紅框處可以看到GitLab server要求我們到runner中執行該指令<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-10.jpg" alt="Untitled"></p><h3 id="撰寫Docker-Compose-yml設置運行容器服務"><a href="#撰寫Docker-Compose-yml設置運行容器服務" class="headerlink" title="撰寫Docker Compose.yml設置運行容器服務"></a>撰寫Docker Compose.yml設置運行容器服務</h3><p>環境的部分可以先設定CI_SERVER_URL讓ruuner知道server的網址，後續註冊時無須再次輸入網址</p><p>volumes中第一個設定為使其可在CI/CD流程運行docker相關指令<br>第二個則為將設定檔映射出來方便管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  gitlab-runner:</span><br><span class="line">    image: gitlab/gitlab-runner:latest</span><br><span class="line">    container_name: <span class="string">&quot;gitlab_runner&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - CI_SERVER_URL=https://your_domain</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">      - ./config:/etc/gitlab-runner</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><h3 id="運行GitLab-CI-Runner容器"><a href="#運行GitLab-CI-Runner容器" class="headerlink" title="運行GitLab CI Runner容器"></a>運行GitLab CI Runner容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up</span><br></pre></td></tr></table></figure><p>由於尚未註冊，runner中的config.toml沒被建立會一直報錯<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-11.jpg" alt="Untitled"></p><h3 id="註冊GitLab-CI-Runner"><a href="#註冊GitLab-CI-Runner" class="headerlink" title="註冊GitLab CI Runner"></a>註冊GitLab CI Runner</h3><ul><li><p>進入runner容器內</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab_runner bash</span><br></pre></td></tr></table></figure></li><li><p>設置信任的網站SSL憑證</p><p>  若嘗試訪問的網站具有已過期或來自不受信任的頒發機構的 SSL 證書，可能會出現下圖問題<br>  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-12.jpg" alt="Untitled"></p><p>  因此註冊前先將gitlab server網站的憑證加入至信任內</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">/etc/gitlab-runner/certs</span></span><br><span class="line"><span class="string">openssl</span> <span class="string">s_client</span> <span class="string">-showcerts</span> <span class="string">-connect</span> <span class="string">your_domain:443</span> <span class="string">servername</span> <span class="string">your_domain</span> <span class="string">&lt;</span> <span class="string">/dev/null</span> <span class="number">2</span><span class="string">&gt;/dev/null</span> <span class="string">|</span> <span class="string">openssl</span> <span class="string">x509</span> <span class="string">-outform</span> <span class="string">PEM</span> <span class="string">&gt;</span> <span class="string">/etc/gitlab-runner/certs/your_domain.crt</span></span><br></pre></td></tr></table></figure></li><li><p>執行runner註冊指令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure><p>  註冊中會要求輸入：</p><ol><li>GitLab server URL：由於docker-compose.yml有先設定了，這邊默認即可</li><li>註冊Runner的token：貼上剛才指令的token</li><li>該Runner的tags：空白即可</li><li>維護的資訊：空白即可</li><li>執行器：docker</li><li>預設docker image：alpine:latest<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-13.jpg" alt="Untitled"><div class="note info flat"><p>💡Docker executor 使用 Docker 引擎創建一個新的容器來執行作業。每個作業都在一個獨立的容器中運行，可以指定不同的容器鏡像和運行環境。這種執行者適用於需要隔離環境或依賴特定容器鏡像的作業。</p></div></li></ol></li></ul><ul><li><p>查看設定檔config.toml</p><p>  可以看到剛才的註冊資訊寫入至該設定檔中，後續更新與檢查可使用</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">config.toml</span></span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-14.jpg" alt="Untitled"></p></li><li><p>更新config.toml配置檔設定</p><p>  config.toml配置檔中volumes部分需更新為以下，如此執行docker相關指令時才可運作</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">volumes</span> <span class="string">=</span> [<span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>, <span class="string">&quot;/cache&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看該Project的Runner是否成功註冊"><a href="#查看該Project的Runner是否成功註冊" class="headerlink" title="查看該Project的Runner是否成功註冊"></a>查看該Project的Runner是否成功註冊</h3><p>重整頁面，可發現下圖紅框處有可使用的runner<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-15.jpg" alt="Untitled"></p><h2 id="測試GitLab-CI-Runner"><a href="#測試GitLab-CI-Runner" class="headerlink" title="測試GitLab CI Runner"></a>測試GitLab CI Runner</h2><p>上一節建立GitLab CI Runner後，在設置頁面雖然有可使用的Runner，但仍需要檢驗CI/CD流程是否會觸發進行任務需求</p><h3 id="於Repo中建立-gitlab-ci-yml持續整合設定檔"><a href="#於Repo中建立-gitlab-ci-yml持續整合設定檔" class="headerlink" title="於Repo中建立.gitlab-ci.yml持續整合設定檔"></a>於Repo中建立.gitlab-ci.yml持續整合設定檔</h3><p>在個人專案中，建立.gitlab-ci.yml，其中內容如下：</p><p>這是簡易的運行範例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">- build</span><br><span class="line">build:</span><br><span class="line">  stage: build</span><br><span class="line">  tags:</span><br><span class="line">   - master</span><br><span class="line">  script:</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;Hello GitLab Runner&quot;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡tags為指定執行的runner，在最初runner新增設定時有提到</p></div><h3 id="觸發CI-CD機制"><a href="#觸發CI-CD機制" class="headerlink" title="觸發CI/CD機制"></a>觸發CI/CD機制</h3><p>接著就推送版本紀錄即可觸發CI/CD機制</p><p>上述版本沒有任何限制，若期望只在master分支或指定分支版本紀錄時觸發也可以額外設置</p><p>或者是merge request事件觸發等規則設定</p><h3 id="查看GitLab-CI-CD-Pipelines狀態"><a href="#查看GitLab-CI-CD-Pipelines狀態" class="headerlink" title="查看GitLab CI/CD Pipelines狀態"></a>查看GitLab CI/CD Pipelines狀態</h3><p>觸發後在GitLab CI/CD Pipelines可以查看目前的任務</p><p>狀態前期會有pending → running</p><p>pending代表準備將任務指派給runner</p><p>running代表runner已經在執行CI/CD任務了</p><div class="note info flat"><p>💡若一直處於pending狀態可點擊前去查看原因，可能是沒有可用的runner</p></div><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gitlab-server-16.jpg" alt="Untitled"></p><h3 id="gitlab-ci-yml設置Docker環境"><a href="#gitlab-ci-yml設置Docker環境" class="headerlink" title=".gitlab-ci.yml設置Docker環境"></a>.gitlab-ci.yml設置Docker環境</h3><p>可以看到我的pipeline中有幾次的失敗，其原因為若欲在CI/CD中使用docker指令，需要設置image為docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">- build</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  stage: build</span><br><span class="line">  image: docker</span><br><span class="line">  tags:</span><br><span class="line">   - master</span><br><span class="line">  script:</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;Hello GitLab Runner2&quot;</span></span><br><span class="line">    - docker -v</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本篇大致敘述以docker建置GitLab Server與GitLab Runner的方法，並進行了簡易的CI測試Runner運作狀態。透過容器化方式可以使得CI/CD任務需求中更容易達成所需的環境。本篇在gitlab ci設置檔屬於簡易使用，未來可詳細探討設置的細節。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> Docker </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>運用Borg 與 Crontab建立自動化本地與異地備份Backup</title>
      <link href="/posts/%E9%81%8B%E7%94%A8Borg%20%E8%88%87%20Crontab%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%8B%95%E5%8C%96%E6%9C%AC%E5%9C%B0%E8%88%87%E7%95%B0%E5%9C%B0%E5%82%99%E4%BB%BDBackup/"/>
      <url>/posts/%E9%81%8B%E7%94%A8Borg%20%E8%88%87%20Crontab%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%8B%95%E5%8C%96%E6%9C%AC%E5%9C%B0%E8%88%87%E7%95%B0%E5%9C%B0%E5%82%99%E4%BB%BDBackup/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當架設後端服務時，伺服器通常會隨著時間儲存了許多使用者的資料(圖片、影片等等)。然而若沒有本地備份與異地備份，當發生意外刪除或者磁碟損壞時，使用者的重要資料也就無法恢復了。因此定時備份為一種災難恢復(disaster recovery)的方式。</p><p>Borg是一種備份工具，他提供增量備份、去除重複壓縮與加密等功能。</p><p>Crontab是一個在Unix操作系統上用於定期執行任務的工具，透過設置任務方式，使其在預定時間或間隔自動執行指令或腳本</p><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>環境準備<ul><li>安裝Borg</li></ul></li><li>本地端 - 備份方法<ul><li>初始化備份資料的存放區</li><li>建立備份歸檔</li><li>列出歸檔清單</li><li>修剪備份存檔</li></ul></li><li>異地端 - 備份方法<ul><li>初始化備份資料的存放區</li><li>建立備份歸檔</li><li>透過金鑰授權，避免每次輸入異地機器的密碼方式</li></ul></li><li>自動化備份<ul><li>建立備份腳本Shell script</li><li>設定Crontab定時任務</li></ul></li><li>其他備份指令介紹<ul><li>比較歸檔差異性</li><li>恢復資料</li></ul></li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><h3 id="安裝Borg"><a href="#安裝Borg" class="headerlink" title="安裝Borg"></a>安裝Borg</h3><p>這邊使用的是borg1.2.2版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wget -q --show-progress https://github.com/borgbackup/borg/releases/download/1.2.2/borg-linuxold64</span><br><span class="line"></span><br><span class="line">wget -q --show-progress https://github.com/borgbackup/borg/releases/download/1.2.2/borg-linuxold64.asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驗證來源</span></span><br><span class="line">gpg --verify borg-linuxold64.asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將備份工具放置環境中</span></span><br><span class="line">sudo cp borg-linuxold64 /usr/<span class="built_in">local</span>/bin/borg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改所有權</span></span><br><span class="line">sudo chown root:root /usr/<span class="built_in">local</span>/bin/borg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改權限，使一般使用者可使用</span></span><br><span class="line">sudo chmod 755 /usr/<span class="built_in">local</span>/bin/borg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看borg版本, 確認有無安裝成功</span></span><br><span class="line">borg -V</span><br></pre></td></tr></table></figure><div class="note info flat"><p>若有其他需求亦可在borg的Github repo找需要的版本：<br><a href="https://github.com/borgbackup/borg">https://github.com/borgbackup/borg</a></p></div><h2 id="本地端-備份方法"><a href="#本地端-備份方法" class="headerlink" title="本地端 - 備份方法"></a>本地端 - 備份方法</h2><h3 id="初始化備份資料的存放區"><a href="#初始化備份資料的存放區" class="headerlink" title="初始化備份資料的存放區"></a>初始化備份資料的存放區</h3><p>一開始要設定想要備份在哪個目錄底下，初始化時會設定-e參數的加密方式，指令質性後會要求填寫passphrase，這是之後執行這個項備份相關任務時需要的密語</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg init -e repokey &lt;備份資料存放的目錄&gt;</span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg init -e repokey ~/my_backup</span><br></pre></td></tr></table></figure><h3 id="建立備份歸檔"><a href="#建立備份歸檔" class="headerlink" title="建立備份歸檔"></a>建立備份歸檔</h3><p>假設我們想要將專案的圖片目錄備份至上述初始化好的備份區中，可以執行下方指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg create --stats --progress --compression &lt;壓縮形式&gt; &lt;備份區&gt;::&lt;標籤&gt; &lt;想要備份的資料目錄&gt;</span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg create --stats --progress --compression lz4  ~/my_backup::2023_02_22_0219 ~/my_project/assets</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡參數介紹<br>–stats：列印已創建存檔的統計資訊<br>–progress：顯示目前建立備份的進度<br>–compression：壓縮形式</p></div><div class="note warning flat"><p>💡壓縮選項包含以下選項：<br>• lz4：壓縮速度快，但壓縮率較低，適合需要快速備份和恢復的情境<br>• zstd：可調節壓縮級別的選項，可以適需求客製化<br>• zlib：壓縮速度與壓縮率中等<br>• lzma：壓縮速度慢，但壓縮率較高，備份與恢復速度較慢</p></div><p>如下圖顯示建立備份後的資訊，如原本資料大小、壓縮後大小、去除重複資料大小<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/borg-create.jpg" alt="Untitled"></p><h3 id="列出歸檔清單"><a href="#列出歸檔清單" class="headerlink" title="列出歸檔清單"></a>列出歸檔清單</h3><p>經過一次或數次備份後，若想查看目前備份區中有多少個備份紀錄，可使用以下指令查看備份歸檔清單</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg list &lt;備份資料存放的目錄&gt;</span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg list ~/my_backup</span><br></pre></td></tr></table></figure><p>如下圖顯示目前的歸檔清單<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/borg-list.jpg" alt="Untitled"></p><h3 id="修剪備份存檔"><a href="#修剪備份存檔" class="headerlink" title="修剪備份存檔"></a>修剪備份存檔</h3><p>如果一天備份2次，那365天就備份730次，這將導致備份檔案膨脹。其實過了一年我們需要的可能是過往每週一份或每月一份即可，因此可使用修剪方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">borg prune -v --list --keep-daily=&lt;日級別保留數&gt; --keep-weekly=&lt;周級別保留數&gt; --keep-monthly=&lt;月份級別保留數&gt; --keep-yearly=&lt;年度保留數&gt; &lt;備份目錄&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg prune -v --list --keep-daily=14 --keep-monthly=6 --keep-yearly=1 /backup/my-project</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡參數介紹<br>-v, –verbose：會列印出詳細的操作資料<br>–keep-daily：保留近期N個每日備份<br>–keep-weekly：保留近期N個每周備份<br>–keep-monthly：保留近期N個每月備份<br>–keep-yearly：保留近期N個每年備份</p></div><p>這是官方的例子。若經過一年，會保留以下日期的備份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List view</span><br><span class="line">---------</span><br><span class="line"></span><br><span class="line">--keep-daily 14     --keep-monthly 6     --keep-yearly 1</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"> 1. 2015-12-31       (2015-12-31 kept     (2015-12-31 kept</span><br><span class="line"> 2. 2015-12-30        by daily rule)       by daily rule)</span><br><span class="line"> 3. 2015-12-29       1. 2015-11-30        1. 2015-01-01 (oldest)</span><br><span class="line"> 4. 2015-12-28       2. 2015-10-31</span><br><span class="line"> 5. 2015-12-27       3. 2015-09-30</span><br><span class="line"> 6. 2015-12-26       4. 2015-08-31</span><br><span class="line"> 7. 2015-12-25       5. 2015-07-31</span><br><span class="line"> 8. 2015-12-24       6. 2015-06-30</span><br><span class="line"> 9. 2015-12-23</span><br><span class="line">10. 2015-12-22</span><br><span class="line">11. 2015-12-21</span><br><span class="line">12. 2015-12-20</span><br><span class="line">    (no backup made on 2015-12-19)</span><br><span class="line">13. 2015-12-18</span><br><span class="line">14. 2015-12-17</span><br></pre></td></tr></table></figure><h2 id="異地端-備份方法"><a href="#異地端-備份方法" class="headerlink" title="異地端 - 備份方法"></a>異地端 - 備份方法</h2><p>異地與本地備份不同處在於</p><ul><li>輸入備份區的目錄會是ssh://username@remote_ip/&lt;指定的路徑&gt;</li><li>每次備份需要輸入異地登入的密碼，因為每次都使用ssh連線</li><li>使用前，異地端需要安裝borg</li></ul><p>輸入上多一點前面的連線資訊而已，試著做做看吧</p><h3 id="初始化備份資料的存放區-1"><a href="#初始化備份資料的存放區-1" class="headerlink" title="初始化備份資料的存放區"></a>初始化備份資料的存放區</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg init -e repokey ssh://username@remote_ip/&lt;備份資料存放的目錄&gt;</span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg init -e repokey ssh://username@remote_ip/~/my_backup</span><br></pre></td></tr></table></figure><h3 id="建立備份歸檔-1"><a href="#建立備份歸檔-1" class="headerlink" title="建立備份歸檔"></a>建立備份歸檔</h3><p>假設我們想要將專案的圖片目錄備份至上述初始化好的備份區中，可以執行下方指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg create --stats --progress --compression &lt;壓縮形式&gt; &lt;備份區&gt;::&lt;標籤&gt; ssh://username@remote_ip/&lt;備份資料存放的目錄&gt;</span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg create --stats --progress --compression lz4  ssh://username@remote_ip/~/my_backup::2023_02_22_0219 ~/my_project/assets</span><br></pre></td></tr></table></figure><h3 id="透過金鑰授權，避免每次輸入異地機器的密碼方式"><a href="#透過金鑰授權，避免每次輸入異地機器的密碼方式" class="headerlink" title="透過金鑰授權，避免每次輸入異地機器的密碼方式"></a>透過金鑰授權，避免每次輸入異地機器的密碼方式</h3><p>透過上述實作會發現每次備份都需要輸入登入的密碼，以下透過金鑰授權來省略此步驟<br>另外若要實施自動化備份必然不能有手動輸入密碼的步驟</p><h4 id="建立ssh-key"><a href="#建立ssh-key" class="headerlink" title="建立ssh key"></a>建立ssh key</h4><p>下方指令將產生一組ssh key，會有一些問答互動，基本上默認即可 (若要更安全點, 可以設置)</p><p>建立後的金鑰位置會在你當前使用者的家目錄/.ssh目錄底下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h4 id="使用ssh-copy-id方式授予遠端伺服器金鑰"><a href="#使用ssh-copy-id方式授予遠端伺服器金鑰" class="headerlink" title="使用ssh-copy-id方式授予遠端伺服器金鑰"></a>使用ssh-copy-id方式授予遠端伺服器金鑰</h4><p>ssh-copy-id可以跟遠端伺服器說這個金鑰是以後登入用的, 而遠端伺服器就會將此金鑰寫入至authorized_keys檔案中<br>authorized_keys檔案紀錄可以存取的使用者公開金鑰<br>輸入以下指令後，會要求輸入遠端登入密碼，確認你有權限登入<br>若成功會提示說可以用 ssh username@remote_ip  方式登入，而且無須輸入密碼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id username@remote_ip </span><br></pre></td></tr></table></figure><h4 id="使用ssh登入確認可無密碼輸入登入"><a href="#使用ssh登入確認可無密碼輸入登入" class="headerlink" title="使用ssh登入確認可無密碼輸入登入"></a>使用ssh登入確認可無密碼輸入登入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@remote_ip</span><br></pre></td></tr></table></figure><div class="note info flat"><p>若伺服器未安裝openssh-server需安裝</p></div><h2 id="自動化備份"><a href="#自動化備份" class="headerlink" title="自動化備份"></a>自動化備份</h2><p>在Linux上我們可以應用crontab設置定時任務來達到自動化的效果</p><p>在這之前，borg github repo上有給予一個自動化備份的sample shell script<br><a href="https://github.com/borgbackup/borg/blob/master/docs/quickstart.rst">https://github.com/borgbackup/borg/blob/master/docs/quickstart.rst</a><br>這個shell script可以分為幾點來看</p><ol><li>備份區目錄設定：borg透過環境變數方式，只要設定好BORG_REPO就可以省去操作指令時的輸入</li><li>備份區密語設定：borg透過環境變數方式，只要設定好BORG_PASSPHRASE就可以省去需要輸入密語的步驟</li><li>備份建立指令：就是我們主要的備份動作</li><li>備份歸檔剪枝指令：每次備份完後，可以進行剪枝來縮減備份占用的空間</li><li>備份壓縮指令：可以當作是優化儲存壓縮的空間，將重複的資料重新組織達到更好的壓縮與儲存效果</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting this, so the repo does not need to be given on the commandline:</span></span><br><span class="line">export BORG_REPO=ssh://username@example.com:2022/~/backup/main</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See the section <span class="string">&quot;Passphrase notes&quot;</span> <span class="keyword">for</span> more infos.</span></span><br><span class="line">export BORG_PASSPHRASE=&#x27;XYZl0ngandsecurepa_55_phrasea&amp;&amp;123&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> some helpers and error handling:</span></span><br><span class="line">info() &#123; printf &quot;\n%s %s\n\n&quot; &quot;$( date )&quot; &quot;$*&quot; &gt;&amp;2; &#125;</span><br><span class="line">trap &#x27;echo $( date ) Backup interrupted &gt;&amp;2; exit 2&#x27; INT TERM</span><br><span class="line"></span><br><span class="line">info &quot;Starting backup&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Back up the most important directories into an archive named after</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the machine this script is currently running on:</span></span><br><span class="line"></span><br><span class="line">borg create                         \</span><br><span class="line">    --verbose                       \</span><br><span class="line">    --filter AME                    \</span><br><span class="line">    --list                          \</span><br><span class="line">    --stats                         \</span><br><span class="line">    --show-rc                       \</span><br><span class="line">    --compression lz4               \</span><br><span class="line">    --exclude-caches                \</span><br><span class="line">    --exclude &#x27;home/*/.cache/*&#x27;     \</span><br><span class="line">    --exclude &#x27;var/tmp/*&#x27;           \</span><br><span class="line">                                    \</span><br><span class="line">    ::&#x27;&#123;hostname&#125;-&#123;now&#125;&#x27;              \</span><br><span class="line">    /etc                            \</span><br><span class="line">    /home                           \</span><br><span class="line">    /root                           \</span><br><span class="line">    /var</span><br><span class="line"></span><br><span class="line">backup_exit=$?</span><br><span class="line"></span><br><span class="line">info &quot;Pruning repository&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> archives of THIS machine. The <span class="string">&#x27;&#123;hostname&#125;-*&#x27;</span> globbing is very important to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">limit</span> prune<span class="string">&#x27;s operation to this machine&#x27;</span>s archives and not apply to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> other machines<span class="string">&#x27; archives also:</span></span></span><br><span class="line"></span><br><span class="line">borg prune                              \</span><br><span class="line">    --list                              \</span><br><span class="line">    --glob-archives &#x27;&#123;hostname&#125;-*&#x27;  \</span><br><span class="line">    --show-rc                           \</span><br><span class="line">    --keep-daily    7                   \</span><br><span class="line">    --keep-weekly   4                   \</span><br><span class="line">    --keep-monthly  6</span><br><span class="line"></span><br><span class="line">prune_exit=$?</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> actually free repo disk space by compacting segments</span></span></span><br><span class="line"></span><br><span class="line">info &quot;Compacting repository&quot;</span><br><span class="line"></span><br><span class="line">borg compact</span><br><span class="line"></span><br><span class="line">compact_exit=$?</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> use highest exit code as global exit code</span></span></span><br><span class="line">global_exit=$(( backup_exit &gt; prune_exit ? backup_exit : prune_exit ))</span><br><span class="line">global_exit=$(( compact_exit &gt; global_exit ? compact_exit : global_exit ))</span><br><span class="line"></span><br><span class="line">if [ $&#123;global_exit&#125; -eq 0 ]; then</span><br><span class="line">    info &quot;Backup, Prune, and Compact finished successfully&quot;</span><br><span class="line">elif [ $&#123;global_exit&#125; -eq 1 ]; then</span><br><span class="line">    info &quot;Backup, Prune, and/or Compact finished with warnings&quot;</span><br><span class="line">else</span><br><span class="line">    info &quot;Backup, Prune, and/or Compact finished with errors&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit $&#123;global_exit&#125;</span><br></pre></td></tr></table></figure><h3 id="建立備份腳本Shell-script"><a href="#建立備份腳本Shell-script" class="headerlink" title="建立備份腳本Shell script"></a>建立備份腳本Shell script</h3><p>將以上程式碼貼上吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/auto_backup.sh</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡 程式碼中需更改部分有</p><ol><li>BORG_REPO (需要填寫欲存放備份資料的目錄，也就是borg init的地方)</li><li>BORG_PASSPHRASE (需填寫borg init時的密語，這樣才有權限執行)</li><li>borg create 時需要的備份目錄路徑 (範例中是備份/home、/root、/var目錄)</li><li>borg prune 時需要的剪枝設定 (例如想要保留年份的備份)</li></ol></div><h3 id="設定Crontab定時任務"><a href="#設定Crontab定時任務" class="headerlink" title="設定Crontab定時任務"></a>設定Crontab定時任務</h3><p>若我們希望每日23:30執行這個auto_backup.sh的話，如以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 23 * * * ~/auto_backup.sh &gt;&gt; ~/auto_backup.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>💡 若要查看是否有順利備份可前往auto_backup.log查看，這邊的設置將備份的操作output到log檔案中，若有錯誤也可以看到</p><p>※ 2&gt;&amp;1 意思是把 標準錯誤輸出 重定向到 標準輸出</p></div><h2 id="其他指令介紹"><a href="#其他指令介紹" class="headerlink" title="其他指令介紹"></a>其他指令介紹</h2><h3 id="比較歸檔差異性"><a href="#比較歸檔差異性" class="headerlink" title="比較歸檔差異性"></a>比較歸檔差異性</h3><p>如果想知道A版跟B版多了什麼檔案或者少了甚麼檔案，可以使用已下指令了解<br>先寫的是基準, 如下標籤1是基準, 所以標籤2多檔案, 會顯示多了XX檔案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg diff &lt;備份資料存放的目錄&gt;::&lt;標籤1&gt; &lt;標籤2&gt;</span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg diff ~/my_backup::2023_02_22_0219 2023_02_23_0219</span><br></pre></td></tr></table></figure><p>如下圖顯示比較歸檔差異性<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/borg-diff.jpg" alt="Untitled"></p><h3 id="恢復資料"><a href="#恢復資料" class="headerlink" title="恢復資料"></a>恢復資料</h3><p>如果因為意外因素導致，某些資料損壞無法讀取情形，此時可以考慮恢復過去資料</p><p><strong>※還原到當前目錄</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">borg extract &lt;備份資料存放的目錄&gt;::&lt;標籤&gt; </span><br><span class="line"><span class="comment"># 舉例</span></span><br><span class="line">borg extract ~/my_backup::2023_02_22_0219 </span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本篇大致敘述了borg備份工具的使用，自動化異地備份使資料不會放在同一個籃子上而毀壞，大幅增加災難恢復的能力。此外，在災難恢復中有著2個關鍵的指標RTO (Recovery Time Objective, 復原時間目標)和RPO (Recovery Point Objective, 復原點目標)，期望復原點目標越近，備份的頻率就相對高，而期望復原時間目標越快則需要更快速的故障轉移(failover)策略。除了Backup and Restore，Pilot Light、Warm Standby、Multi-site亦是未來可研究的方向。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Backup </tag>
            
            <tag> Disaster Recovery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Plugin插件開發入門</title>
      <link href="/posts/Jenkins%20Plugin%E6%8F%92%E4%BB%B6%E9%96%8B%E7%99%BC%E5%85%A5%E9%96%80/"/>
      <url>/posts/Jenkins%20Plugin%E6%8F%92%E4%BB%B6%E9%96%8B%E7%99%BC%E5%85%A5%E9%96%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DevOps是一種軟體開發方法論，旨在加速軟體生命週期，從設計到交付，並透過持續集成、持續交付、持續監控來提高軟體質量。透過持續集成和持續交付實現快速、可靠地將軟體部署到生產環境。</p><p>而Jenkins 是一種用於自動化構建和測試的軟件工具。它通常用於持續集成和持續交付流程中，可以自動執行程序構建、測試和部署任務。使用 Jenkins 可以減少人為干預，提高應用程序的品質和可用性。它還可以通過監控項目的構建狀態，提供即時反饋和報告。</p><p>Jenkins提供Jenkins Plugin的方式使開發者可以開發需要的程式以擴充至建置流程中，滿足團隊專案在持續整合期間的需求。</p><div class="note info flat"><p>由於當初在找Jenkins Plugin教學時，發現官方資料非常稀少，後來得知官方教學的網域有改，之前的文章都無法Acess了<br>像遇到此種情況，當時很機靈的拿去網站時光機試試看，沒想到還真有資料。不過網站時光機訪問時有些緩慢就是了，這是一個小缺點</p></div><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>環境準備<ul><li>安裝Java JDK 8</li><li>安裝Maven</li><li>設定環境變數</li></ul></li><li>使用插件範本建立專案、測試運行與發佈打包<ul><li>使用樣本插件原型建立專案結構</li><li>確認可以建構專案</li><li>運行插件</li><li>在Jenkins上測試範本插件</li><li>發佈打包插件</li></ul></li><li>Plugin結構與Java與Jelly的關聯說明<ul><li>空白插件專案結構</li><li>Jenkins 通過固定的命名方式，來確定對應的檔案</li><li>撰寫java與jelly溝通變數(物件帶有Descriptors)</li></ul></li><li>Jenkins BuildStep功能<ul><li>表單驗證機制</li><li>撰寫執行內容 &amp; 取得Workspace(讀檔、寫檔)</li></ul></li><li>了解Jelly Tags<ul><li>Jelly namespace</li><li>一般文字(國際化與在地化)</li><li>幫助說明(國際化與在地化)</li><li>預設數值(Default value)</li><li>Jelly 中使用變數資料</li><li>全域環境變數設置</li></ul></li><li>建置報告獨立頁面<ul><li>建立HelloWorldAction.java以實作RunAction2</li><li>獨立頁面UI設置</li><li>在Builder執行Action以觸發頁面生成</li></ul></li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><h3 id="安裝Java-JDK-8"><a href="#安裝Java-JDK-8" class="headerlink" title="安裝Java JDK 8"></a>安裝Java JDK 8</h3><p>Jenkins是基於Java建構的，因此我們需要先安裝Java 開發套件(JDK)</p><div class="note info flat"><p>若有額外需求可查看Jenkins對各個Java版本支援：<br><a href="https://www.jenkins.io/doc/administration/requirements/java/">https://www.jenkins.io/doc/administration/requirements/java/</a></p></div><h3 id="安裝Maven"><a href="#安裝Maven" class="headerlink" title="安裝Maven"></a>安裝Maven</h3><p>Jenkins插件主要使用Maven建置<br>版本注意，請確保提供最近版本的 Maven 3，最好是 3.3.9 或較新版本</p><h3 id="設定環境變數"><a href="#設定環境變數" class="headerlink" title="設定環境變數"></a>設定環境變數</h3><ol><li>PATH：<ol><li>C:\Program Files\Java\jdk1.8.0_202\bin</li><li>C:\apache-maven-3.8.3\bin</li></ol></li><li>JAVA_HOME：C:\Program Files\Java\jdk1.8.0_202</li></ol><h2 id="使用插件範本建立專案、測試運行與發佈打包"><a href="#使用插件範本建立專案、測試運行與發佈打包" class="headerlink" title="使用插件範本建立專案、測試運行與發佈打包"></a>使用插件範本建立專案、測試運行與發佈打包</h2><h3 id="使用樣本插件原型建立專案結構"><a href="#使用樣本插件原型建立專案結構" class="headerlink" title="使用樣本插件原型建立專案結構"></a>使用樣本插件原型建立專案結構</h3><p>在我們的workspace打開terminal執行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -U archetype:generate -Dfilter=<span class="string">&quot;io.jenkins.archetypes:&quot;</span></span><br></pre></td></tr></table></figure><p>透過上述指令會列出符合條件的幾個遠端repo讓我們選擇，接著可以選擇插件版本、artifactId等專案屬性</p><div class="note info flat"><p>💡 參數介紹<br><strong><code>-U,--update-snapshots</code> 強制檢查與遠端存儲庫的缺失版本和更新快照<br><code>archetype:generate</code> 從原型生成一個新的專案，如果使用部分原型，則更新當前專案。<br><code>-D,--define</code> 定義系統屬性<br><code>-filter</code> 設定過濾</strong></p></div><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/jenkins-plugin-1.png" alt="Untitled"></p><h3 id="確認可以建構專案"><a href="#確認可以建構專案" class="headerlink" title="確認可以建構專案"></a>確認可以建構專案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv demo demo-plugin </span><br><span class="line"><span class="built_in">cd</span> demo-plugin</span><br><span class="line">mvn verify</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡 <code>verify</code> 驗證檔案package是否正確<br>在過程中會依照maven的生命週期依序執行，其中會下載許多的dependencies、分析測試，最後驗證，預期結果最後如下圖</p></div><h3 id="運行插件"><a href="#運行插件" class="headerlink" title="運行插件"></a>運行插件</h3><p><strong>maven-hpi-plugin</strong>幫我們處理建構和打包jenkins plugin，他還提供了便利的方式執行Jenkins instance(含有我們的插件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn hpi:run</span><br></pre></td></tr></table></figure><p>當看到💡 <code>INFO: Jenkins is fully up and running</code>時表示Jenkins instance成功啟動後，我們就可以打開瀏覽器訪問<a href="http://localhost:8080/jenkins/">http://localhost:8080/jenkins/</a> 立即測試插件</p><div class="note info flat"><p>💡 我們運行的Jenkins instance，jenkins_home則為專案目錄中的work資料夾，因此資料都保留於這</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn hpi:run -Djetty.port=<span class="number">8090</span> # 更改port</span><br><span class="line">mvn hpi:run -Dhpi.prefix=/jenkins # Context path (環境路徑)</span><br></pre></td></tr></table></figure></div><h4 id="關於測試時更改程式碼"><a href="#關於測試時更改程式碼" class="headerlink" title="關於測試時更改程式碼"></a>關於測試時更改程式碼</h4><p>根據你的更改，你可以在運行實例中(running instance)看到，而不用重啟整個Maven Process</p><ul><li><strong>Views</strong>：每當瀏覽器請求頁面時，都會重新編譯(re-compiled) Groovy/Jelly，因此只要重整瀏覽器中的頁面即可</li><li><strong>Java code</strong>：<ul><li>當你在debug時，只要不接觸<strong>method signature</strong>，JVM的熱插拔(HotSwap)功能將會幫我們重新載入程式碼</li><li>此外，我們可以在Maven Process中按”ENTER”鍵，將會重新載入Jenkins webapp。但通常最好是停止該Process並重新啟動</li></ul></li><li><strong>POM</strong>：如果更改 POM，則必須停止並重新啟動 Maven 才能看到更改</li></ul><h3 id="在Jenkins上測試範本插件"><a href="#在Jenkins上測試範本插件" class="headerlink" title="在Jenkins上測試範本插件"></a>在Jenkins上測試範本插件</h3><p>在範例中我們使用hello-world-plugin的範本，因此在專案設置的”建置”流程中可以新增”Say Hello world”選項，並且設置面板，如下圖<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/jenkins-plugin-2.png" alt="Untitled"></p><p>建置後畫面<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/jenkins-plugin-3.png" alt="Untitled"></p><h3 id="發佈打包插件"><a href="#發佈打包插件" class="headerlink" title="發佈打包插件"></a>發佈打包插件</h3><p>如果想要打包我們的插件，只要執行以下指令，該指令將會在target目錄下產生<code>*.hpi</code>檔案。</p><p>※其他用戶可以在Jenkins Web UI將此插件檔案上傳使用，或者將檔案放置在<code>$JENKINS_HOME/plugins</code>也可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><h2 id="Plugin結構與Java與Jelly的關聯說明"><a href="#Plugin結構與Java與Jelly的關聯說明" class="headerlink" title="Plugin結構與Java與Jelly的關聯說明"></a>Plugin結構與Java與Jelly的關聯說明</h2><h3 id="空白插件專案結構"><a href="#空白插件專案結構" class="headerlink" title="空白插件專案結構"></a><strong>空白插件專案結構</strong></h3><ul><li><code>src/main/java</code> ：外掛的 Java 原始檔</li><li><code>src/main/resources</code> ：外掛的 Jelly 檔案(用於UI、Form)、config設定(國際化/在地化)</li><li><code>src/main/webapp</code> ：外掛的靜態資源，如圖片或 HTLM 等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── .github <span class="comment"># 與貢獻至jenkins plugin中相關流程 </span></span><br><span class="line">├── .mvn <span class="comment"># 定義專案資訊</span></span><br><span class="line">│   ├── extensions.xml</span><br><span class="line">│   └── maven.config</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java </span><br><span class="line">│   │   │   └── io </span><br><span class="line">│   │   │       └── jenkins</span><br><span class="line">│   │   │           └── plugins</span><br><span class="line">│   │   └── resources </span><br><span class="line">│   │       └── index.jelly</span><br><span class="line">│   └── <span class="built_in">test</span> </span><br><span class="line">│       └── java </span><br><span class="line">│           └── io </span><br><span class="line">│               └── jenkins</span><br><span class="line">│                   └── plugins</span><br><span class="line">├── Jenkinsfile</span><br><span class="line">├── LICENSE.md</span><br><span class="line">├── pom.xml</span><br><span class="line">└── README.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Jenkins-通過固定的命名方式，來確定對應的檔案"><a href="#Jenkins-通過固定的命名方式，來確定對應的檔案" class="headerlink" title="Jenkins 通過固定的命名方式，來確定對應的檔案"></a><strong>Jenkins 通過固定的命名方式，來確定對應的檔案</strong></h3><p>Jenkins Plugin中的UI內容都由Jelly來處理，因此我們必須讓Plugin中的java檔與相對應jelly檔互動，在這裡Jenkins透過<strong>固定的命名方式處理，來確定對應的檔案</strong></p><p>在範例中有一個範例元件，也就是我們在前面建置選擇的Say hello world，該元件是由此<code>java\io\jenkins\plugins\sample\HelloWorldBuilder.java</code>  擴充的</p><p><code>HelloWorldBuilder.java</code>會撰寫使用的建置擴充點以及運行的相關程式邏輯</p><p>而若要撰寫UI方面的內容則需：</p><ol><li>那我們必須在<code>resources</code>目錄下建立相應的路徑的資料夾 <code>resources\io\jenkins\plugins\sample\HelloWorldBuilder</code></li><li>在該目錄下建立<code>config.jelly</code><ol><li><code>resources\io\jenkins\plugins\sample\HelloWorldBuilder\config.jelly</code></li></ol></li></ol><div class="note info flat"><p>💡 通常UI內容可以用來讓使用者輸入一些設定，例如路徑</p></div><h3 id="撰寫java與jelly溝通變數-物件帶有Descriptors"><a href="#撰寫java與jelly溝通變數-物件帶有Descriptors" class="headerlink" title="撰寫java與jelly溝通變數(物件帶有Descriptors)"></a>撰寫java與jelly溝通變數(物件帶有Descriptors)</h3><p>在上述我們了解檔案java與jelly對應檔案的規則，那其中的變數欄位如何配對呢?<br>在這裡我們將說明物件帶有Descriptors情況下，需要實作的內容</p><div class="note info flat"><p>💡 Descriptors是我們在Build steps中會需要使用到的<br>Descriptors在多個實例的某個擴展會被需要</p></div><ol><li>Java<ol><li>定義不可變類別(immutable class)</li><li>將 <code>@DataBoundConstructor</code> 放在constructor上，它將告訴 Jenkins 如何實例化它</li><li>為需要設定的欄位定義getters，或是將欄位設置為<code>public final</code> ，這樣將允許Jenkins讀取數值以填置設定頁面(連到jelly)</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">SimpleBuildStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> useFrench;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataBoundConstructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldBuilder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Jelly<ol><li>撰寫Jelly片段程式碼(通常命名為 config.jelly)</li><li>@field為屬性的名稱(對應constructor parameter name)…這樣jenkins才知道要將資料map到該欄位</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?jelly escape-by-default=&#x27;true&#x27;?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:st</span>=<span class="string">&quot;jelly:stapler&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;jelly:define&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:l</span>=<span class="string">&quot;/lib/layout&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:t</span>=<span class="string">&quot;/lib/hudson&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:f</span>=<span class="string">&quot;/lib/form&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;$&#123;%Name&#125;&quot;</span> <span class="attr">field</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">f:textbox</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">f:entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Jenkins-BuildStep功能"><a href="#Jenkins-BuildStep功能" class="headerlink" title="Jenkins BuildStep功能"></a>Jenkins BuildStep功能</h2><h3 id="表單驗證機制"><a href="#表單驗證機制" class="headerlink" title="表單驗證機制"></a><strong>表單驗證機制</strong></h3><p>若想要為我們的UI表單增加驗證功能也是可以的</p><p>在<code>HelloWorldBuilder.java</code>的descriptor中我們可以依照規則增加method，讓jenkins知道該欄位需要經過該method驗證</p><p><strong>規則：</strong>method名稱須為 <strong>doCheck”FieldName”</strong> ⇒ <code>doCheckName</code> 且回傳型態為FormValidation，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Symbol(&quot;greet&quot;)</span></span><br><span class="line"><span class="meta">@Extension</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescriptorImpl</span> <span class="keyword">extends</span> <span class="title">BuildStepDescriptor</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FormValidation <span class="title">doCheckName</span><span class="params">(<span class="meta">@QueryParameter</span> String value, <span class="meta">@QueryParameter</span> <span class="keyword">boolean</span> useFrench)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value.length() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> FormValidation.error(Messages.HelloWorldBuilder_DescriptorImpl_errors_missingName());</span><br><span class="line">            <span class="keyword">if</span> (value.length() &lt; <span class="number">4</span>)</span><br><span class="line">                <span class="keyword">return</span> FormValidation.warning(Messages.HelloWorldBuilder_DescriptorImpl_warnings_tooShort());</span><br><span class="line">            <span class="keyword">if</span> (!useFrench &amp;&amp; value.matches(<span class="string">&quot;.*[éáàç].*&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> FormValidation.warning(Messages.HelloWorldBuilder_DescriptorImpl_warnings_reallyFrench());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> FormValidation.ok();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FormValidation提供我們簡單易懂的功能："><a href="#FormValidation提供我們簡單易懂的功能：" class="headerlink" title="FormValidation提供我們簡單易懂的功能："></a>FormValidation提供我們簡單易懂的功能：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FormValidation.error(String message)</span><br><span class="line"></span><br><span class="line">FormValidation.warning(String message)</span><br><span class="line"></span><br><span class="line">FormValidation.ok()</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡 我們還可以用@QueryParameter定義其他欄位的參數，如果我們這段method還需要其他參數，這將會非常有用<br><strong>使用方式：</strong>增加參數時，參數名稱為field名稱</p></div><div class="note warning flat"><p>💡 Jenkins使用Localizer生成Messages Class，能夠以類型安全的方式訪問Message資源。<br>所以src/main/resources/**/Messages.properties匹配的所以文件都會生成一個對應的Messages類別<br>因此程式碼中調用FormValidation.error()方法的參數內容就是如此取得<br>透過該方法可以獲取當地語系化的消息</p></div><h3 id="撰寫執行內容-amp-取得Workspace-讀檔、寫檔"><a href="#撰寫執行內容-amp-取得Workspace-讀檔、寫檔" class="headerlink" title="撰寫執行內容 &amp; 取得Workspace(讀檔、寫檔)"></a>撰寫執行內容 &amp; 取得Workspace(讀檔、寫檔)</h3><p>在Class 中我們 implements <code>jenkins.tasks.SimpleBuildStep</code> 這個Interface Class,<br>其中我們必須實作 <code>perform</code> 函式，該函式會為我們 “Run this step.” 在該步驟執行我們的plugin想做的事</p><div class="note info flat"><p>💡 <code>perform</code> 函式中有提供許多參數，<code>FilePath workspace</code> 可以讓我們取得Workspace的路徑，有了路徑後我們就能讀檔、寫檔啦<br><code>listener.getLogger().println()</code> 可以將內容在jenkins console面板印出<br><strong>以下程式碼實作讀檔、走訪目錄所有檔案、寫檔</strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">(Run&lt;?, ?&gt; run, FilePath workspace, EnvVars env, Launcher launcher, TaskListener listener)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        listener.getLogger().println(<span class="string">&quot;workspace path:&quot;</span> + workspace.getRemote());</span><br><span class="line">        </span><br><span class="line">        String filePath = workspace.getRemote() + <span class="string">&quot;\\Triangle.java&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// read file and for loop print line</span></span><br><span class="line">        <span class="keyword">try</span> (Stream&lt;String&gt; stream = Files.lines(Paths.get(filePath))) &#123;</span><br><span class="line">        stream.forEach(line -&gt; listener.getLogger().println(line));</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// walk for the directory all file </span></span><br><span class="line">        <span class="keyword">try</span> (Stream&lt;Path&gt; paths = Files.walk(Paths.get(workspace.getRemote()))) &#123;</span><br><span class="line">        paths</span><br><span class="line">            .filter(Files::isRegularFile)</span><br><span class="line">            .forEach(item -&gt; listener.getLogger().println(item));</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// write file</span></span><br><span class="line">        Path path = Paths.get(workspace.getRemote() + <span class="string">&quot;\\plugin-generate.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> doesFileExist = Files.exists(path, <span class="keyword">new</span> LinkOption[]&#123; LinkOption.NOFOLLOW_LINKS &#125;);</span><br><span class="line">        <span class="keyword">if</span>(!doesFileExist) &#123;</span><br><span class="line">        listener.getLogger().println(<span class="string">&quot;before write file.&quot;</span>);</span><br><span class="line">            List&lt;String&gt; lines = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;jenkins&quot;</span>);</span><br><span class="line">            Files.write(Paths.get(workspace.getRemote() + <span class="string">&quot;\\plugin-generate.txt&quot;</span>), lines, StandardCharsets.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="了解Jelly-Tags"><a href="#了解Jelly-Tags" class="headerlink" title="了解Jelly Tags"></a>了解Jelly Tags</h2><p> jelly程式檔由許多不同的 jelly 標籤組成。Jenkins 主要是用 Jelly 來進行 UI 管理。而 Jelly UI 技術的主要原理是通過伺服器端的渲染引擎將 Jelly 定義好的 XML 檔案渲染成用戶端需要的 HTML，Javascript 和 Ajax 等。</p><h3 id="Jelly-namespace"><a href="#Jelly-namespace" class="headerlink" title="Jelly namespace"></a>Jelly namespace</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?jelly escape-by-default=&#x27;true&#x27;?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:st</span>=<span class="string">&quot;jelly:stapler&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;jelly:define&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:l</span>=<span class="string">&quot;/lib/layout&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:t</span>=<span class="string">&quot;/lib/hudson&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:f</span>=<span class="string">&quot;/lib/form&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;$&#123;%Name&#125;&quot;</span> <span class="attr">field</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">f:textbox</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">f:entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">f:advanced</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;$&#123;%French&#125;&quot;</span> <span class="attr">field</span>=<span class="string">&quot;useFrench&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">description</span>=<span class="string">&quot;$&#123;%FrenchDescr&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">f:checkbox</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">f:entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">f:advanced</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡 上述標籤告訴我們可以找到指定 namespace 中的 <strong>jelly 文件來源</strong>和<strong>其他標籤的引入</strong><br>xmlns:<em>namespace_name</em>=”<em>where to find resources in that namespace</em>“</p></div><div class="note info flat"><p>💡 從上方範例可以看出 <code>f:entry f:textbox f:advanced f:checkbox</code> 都是由 <code>xmlns:f=&quot;/lib/form&quot;</code> 宣告來的<br>詳細可查看Jenkins中Jelly Tags的原始碼專案</p><div><a class='link-card' title='https://github.com/jenkinsci/jenkins/tree/master/core/src/main/resources/lib' href='https://github.com/jenkinsci/jenkins/tree/master/core/src/main/resources/lib'><div class='left'><i class='fas fa-link'></i></div><div class='right'><p class='text'>Jenkins中Jelly Tags的原始碼專案</p><p class='url'>https://github.com/jenkinsci/jenkins/tree/master/core/src/main/resources/lib</p></div></a></div>有關完整taglib來源介紹可以看此連結<div><a class='link-card' title='https://reports.jenkins.io/core-taglib/jelly-taglib-ref.html' href='https://reports.jenkins.io/core-taglib/jelly-taglib-ref.html'><div class='left'><i class='fas fa-link'></i></div><div class='right'><p class='text'>Jenkins - Jelly Taglib references</p><p class='url'>https://reports.jenkins.io/core-taglib/jelly-taglib-ref.html</p></div></a></div></div><h3 id="一般文字-國際化與在地化"><a href="#一般文字-國際化與在地化" class="headerlink" title="一般文字(國際化與在地化)"></a>一般文字(國際化與在地化)</h3><p>在jenkins與jelly基本使用的文章中我們知道 欄位與變數 的關係。除欄位外，我們也會擁有一般文字(標題、敘述)需要撰寫在UI上</p><p>對此jenkins在jelly支援國際化與在地化，設定上方便簡單</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下方jelly程式碼我們可以發現title處有個`$&#123;%Name&#125;` ，**$&#123;%...&#125;這個標記是指定stapler要尋找在地化資源(localized resources)**，找不到就print 該文字</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;$&#123;%Name&#125;&quot;</span> <span class="attr">field</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">f:textbox</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">f:entry</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>關於在地化資源要在哪裡設定?</strong></p><p>在與<code>config.jelly</code>同一個目錄下新增<code>config.properties</code> ，設定方式非常簡易(<code>key=value</code>)</p><p><code>config.properties</code>為基本預設，若要新增其他語系可以新增<code>config_zone.properties</code> (ex. <code>config_zh_CN.properties</code>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Name=Name123</span><br><span class="line">French=French</span><br><span class="line">FrenchDescr=Check if we should say hello in French</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/jenkins-plugin-4.png" alt="Untitled"></p><h3 id="幫助說明-國際化與在地化"><a href="#幫助說明-國際化與在地化" class="headerlink" title="幫助說明(國際化與在地化)"></a>幫助說明(國際化與在地化)</h3><p>在設定上我們會需要撰寫一些幫助說明，輔助使用者瞭解該欄位需填入的內容 (如下圖?按鈕)<br>因此這邊會說明如何<strong>增加幫助說明</strong>與<strong>國際化與在地化方式</strong></p><blockquote><p><strong>這裡提供2種形式</strong></p></blockquote><ol><li>指定檔案  如下方程式碼，在tag內輸入help屬性並指定html檔案 <strong>國際化與在地化</strong>：在檔名後面按規則增加語系 (如<code>help_de.html</code>) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;$&#123;%title&#125;&quot;</span> <span class="attr">help</span>=<span class="string">&quot;/plugin/myPlugin/help.html&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>以欄位field規則建立 一樣在config.jelly目錄下，我們依照所需的欄位field(這裡以field為name為例)，建立<code>help-name.html</code> <strong>國際化與在地化</strong>：在help-field後按規則增加語系 (如<code>help-name_zh_CN.html</code>)</li></ol><p>關於html內容，我們撰寫html語法的內容即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Your name.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="預設數值-Default-value"><a href="#預設數值-Default-value" class="headerlink" title="預設數值(Default value)"></a>預設數值(<strong>Default value)</strong></h3><p>如果我們希望輸入框中有預設的數值，只要增加<code>default</code>屬性即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> <span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span> <span class="attr">xmlns:f</span>=<span class="string">&quot;/lib/form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;$&#123;%Port&#125;&quot;</span> <span class="attr">field</span>=<span class="string">&quot;port&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">f:textbox</span> <span class="attr">default</span>=<span class="string">&quot;80&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">f:entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Jelly-中使用變數資料"><a href="#Jelly-中使用變數資料" class="headerlink" title="Jelly 中使用變數資料"></a>Jelly 中使用變數資料</h3><p>在上述中我們知道了Jelly 文件與Java Class有直接關聯，這意味著我們可以調用這些class的方法或是變數資料</p><p>如何使用? </p><ul><li>在Jelly中我們使用”<strong>it</strong>“關鍵字可以調用方法method</li><li>若要定義變數var則使用${insert code here}</li></ul><ol><li>在 <code>java\io\jenkins\plugins\sample\HelloWorldBuilder.java</code>  中我們定義了一個method <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMyString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Jenkins!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在<code>resources\io\jenkins\plugins\sample\HelloWorldBuilder\config.jelly</code> 中將 getMyString 調用 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:st</span>=<span class="string">&quot;jelly:stapler&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:d</span>=<span class="string">&quot;jelly:define&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:l</span>=<span class="string">&quot;/lib/layout&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:t</span>=<span class="string">&quot;/lib/hudson&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:f</span>=<span class="string">&quot;/lib/form&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    $&#123;it.myString&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>接著若我們執行可以看到’Hello Jenkins!’ 成功出現在UI上啦</li></ol><div class="note info flat"><p>💡 注意：’get’ 被自動從方法名稱中去除，剩下的method name第一個字母是小寫的。<br>建議method name都使用駱駝峰式(CamelCase)命名，以便 Jelly 始終可以找到這些方法。</p><p>變數只要${it.變數名稱}也可是調用</p></div><div class="note info flat"><p>💡 <strong>其他的預定義物件(predefined objects)</strong></p><p>除了it物件，Jenkins 還有定義了以下物件：</p><ul><li>app：the instance of Jenkins (or Hudson)</li><li>instance：Jelly UI 所對應的正在被設定的物件</li><li>descriptor：與 instance 所對應的 Descriptor</li><li>h：an instance of hudson.Functions, with various useful functions</li></ul></div><h3 id="全域環境變數設置"><a href="#全域環境變數設置" class="headerlink" title="全域環境變數設置"></a>全域環境變數設置</h3><p>先前的例子都是以建置元件的設置介紹，若需要全域的環境變數設置也有提供方法</p><p>全域的jelly程式檔名會是global.jelly，而路經在元件目錄底下，也就等同是該元件的全域變數</p><p><code>resources\io\jenkins\plugins\sample\HelloWorldBuilder\global.jelly</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?jelly escape-by-default=&#x27;true&#x27;?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:st</span>=<span class="string">&quot;jelly:stapler&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:d</span>=<span class="string">&quot;jelly:define&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:l</span>=<span class="string">&quot;/lib/layout&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:t</span>=<span class="string">&quot;/lib/hudson&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:f</span>=<span class="string">&quot;/lib/form&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f:section</span> <span class="attr">title</span>=<span class="string">&quot;Hello World&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">f:entry</span> <span class="attr">title</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">field</span>=<span class="string">&quot;age&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">description</span>=<span class="string">&quot;i am description&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">f:textbox</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">f:entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">f:section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/jenkins-plugin-5.png" alt="Untitled"></p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/jenkins-plugin-6.png" alt="Untitled"></p><h2 id="建置報告獨立頁面"><a href="#建置報告獨立頁面" class="headerlink" title="建置報告獨立頁面"></a>建置報告獨立頁面</h2><p>在上述介紹已經了解建置過程可以加入添加元件執行程式，若想要將執行後的報告告訴使用者，除了使用<code>listener.getLogger().println()</code>方法輸出至Console Output頁面，也可以透過實作RunAction2來建構獨立頁面。</p><h3 id="建立HelloWorldAction-java以實作RunAction2"><a href="#建立HelloWorldAction-java以實作RunAction2" class="headerlink" title="建立HelloWorldAction.java以實作RunAction2"></a>建立HelloWorldAction.java以實作RunAction2</h3><p><code>java\io\jenkins\plugins\sample\</code>HelloWorldAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.jenkins.plugins.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hudson.model.Run;</span><br><span class="line"><span class="keyword">import</span> io.jenkins.plugins.sample.template.SimpleIssue;</span><br><span class="line"><span class="keyword">import</span> jenkins.model.RunAction2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAction</span> <span class="keyword">implements</span> <span class="title">RunAction2</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Run&lt;?,?&gt; run; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldAction</span><span class="params">(String  msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg= msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttached</span><span class="params">(Run&lt;?, ?&gt; run)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run = run; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoad</span><span class="params">(Run&lt;?, ?&gt; run)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run = run; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Run&lt;?,?&gt; getRun() &#123; </span><br><span class="line">        <span class="keyword">return</span> run;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIconFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;document.png&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Greeting&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrlName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Greeting&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡 相關說明：<br>建構子中可放入參數，將Builder的資料傳到Action，這樣獨立頁面的jelly就可以取得需要顯示的資料<br>getIconFileName方法可以設置側邊欄項目圖示<br>getDisplayName方法可以設置側邊欄項目顯示名稱<br>getUrlName方法可以設置獨立頁面的路徑名稱</p></div><h3 id="獨立頁面UI設置"><a href="#獨立頁面UI設置" class="headerlink" title="獨立頁面UI設置"></a>獨立頁面UI設置</h3><p>獨立頁面的話需要設置index.jelly檔案，範例如下：<br><code>resources\io\jenkins\plugins\sample\HelloWorldAction\index.jelly</code></p><p>若要使用變數資料一樣${it.變數名稱}透過這樣的格式就可以調用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?jelly escape-by-<span class="keyword">default</span>=<span class="string">&#x27;true&#x27;</span>?&gt;</span><br><span class="line">&lt;j:jelly xmlns:j=<span class="string">&quot;jelly:core&quot;</span> xmlns:l=<span class="string">&quot;/lib/layout&quot;</span> xmlns:st=<span class="string">&quot;jelly:stapler&quot;</span>&gt;</span><br><span class="line">    &lt;l:layout title=<span class="string">&quot;Greeting&quot;</span>&gt; </span><br><span class="line">        &lt;l:side-panel&gt; </span><br><span class="line">            &lt;st:include page=<span class="string">&quot;sidepanel.jelly&quot;</span> it=<span class="string">&quot;$&#123;it.run&#125;&quot;</span> optional=<span class="string">&quot;true&quot;</span> /&gt; </span><br><span class="line">        &lt;/l:side-panel&gt;</span><br><span class="line">        &lt;l:main-panel&gt; </span><br><span class="line">     $&#123;it.msg&#125;</span><br><span class="line">        &lt;/l:main-panel&gt;</span><br><span class="line">    &lt;/l:layout&gt;</span><br><span class="line">&lt;/j:jelly&gt;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>💡 1.「layout」是 Jenkins 核心定義的可重用標籤，它提供頁面的基本布局，包括標頭、側邊面板、主內容區域和頁腳。<br>2. 「side-panel」標籤為在側邊面板中顯示<br>3.「main-panel」標籤可以放入獨立頁面中要顯示的內容。</p></div><h3 id="在Builder執行Action以觸發頁面生成"><a href="#在Builder執行Action以觸發頁面生成" class="headerlink" title="在Builder執行Action以觸發頁面生成"></a>在Builder執行Action以觸發頁面生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">(Run&lt;?, ?&gt; run, FilePath workspace, EnvVars env, Launcher launcher, TaskListener listener)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">run.addAction(<span class="keyword">new</span> HelloWorldAction(<span class="string">&quot;Something input&quot;</span>));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然篇幅有些長，不過在這篇章節裡，已經可以了解Jenkins Plugin的基本架構以及關聯邏輯，不過除了建置執行之外還有許多擴展點可以研究。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> jenkins </tag>
            
            <tag> jenkins plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Docker Compose 一次建立 Nginx 伺服器 與 Cerbot(SSL自動憑證)</title>
      <link href="/posts/%E4%BD%BF%E7%94%A8%20Docker%20Compose%20%E4%B8%80%E6%AC%A1%E5%BB%BA%E7%AB%8B%20Nginx%20%E4%BC%BA%E6%9C%8D%E5%99%A8%20%E8%88%87%20Cerbot(SSL%E8%87%AA%E5%8B%95%E6%86%91%E8%AD%89)/"/>
      <url>/posts/%E4%BD%BF%E7%94%A8%20Docker%20Compose%20%E4%B8%80%E6%AC%A1%E5%BB%BA%E7%AB%8B%20Nginx%20%E4%BC%BA%E6%9C%8D%E5%99%A8%20%E8%88%87%20Cerbot(SSL%E8%87%AA%E5%8B%95%E6%86%91%E8%AD%89)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>網路發展迅速，人們使用網際網路於網頁上獲取新知，網站之間傳輸需經由安全加密以避免有心人士從中做壞，因此SSL（Secure Sockets Layer）憑證是一種用於網站的安全證書，它可以保證在傳送數據時保持安全性。通常SSL憑證來源可以由SSL憑證供應商取得，不過可能需要付出一定非用。當然也有免費的來源，而免費的憑證服務有效期限為90天，一段時間就得重複同樣操作其實浪費時間與心力，若有自動化的方式何不為樂呢。因此這次帶來容器化方式一次將所有服務設置完成。</p><h3 id="什麼是Docker-amp-Docker-Compose"><a href="#什麼是Docker-amp-Docker-Compose" class="headerlink" title="什麼是Docker &amp; Docker Compose?"></a>什麼是Docker &amp; Docker Compose?</h3><p>Docker 將軟體封裝到名為容器的標準化單位，容器是在作業系統層上虛擬化，並將容器獨立環境且直接使用系統OS資源，無須安裝/虛擬化作業系統。透過Docker可以最小化方式建立微服務且能快速啟動、停止、刪除等操作。其中Jekins與SonarQube都有各自的image提供在Docker hub上。</p><p>Docker Compose是為了協助定義和運行多容器應用程式而開發的工具，利用 YAML 檔案來配置需要的服務以及服務的環境設定。</p><h3 id="什麼是Nginx"><a href="#什麼是Nginx" class="headerlink" title="什麼是Nginx?"></a>什麼是Nginx?</h3><p>Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。與Apache網頁伺服器都相當知名，Nginx設置簡易，記憶體消耗低，反向代理＆負載平衡功能也很不錯</p><h4 id="什麼是SSL憑證"><a href="#什麼是SSL憑證" class="headerlink" title="什麼是SSL憑證?"></a>什麼是SSL憑證?</h4><p>SSL是Secure Socket Layer的縮寫，是一種資訊傳輸的加密技術，能夠加密兩個網站之間互相傳輸的資料，讓他人無法取得您的網站與客戶之間的隱私訊息。經過SSL憑證加密成功的網站，網址會由http變成https。</p><h3 id="為什麼需要SSL憑證"><a href="#為什麼需要SSL憑證" class="headerlink" title="為什麼需要SSL憑證?"></a>為什麼需要SSL憑證?</h3><p>剛剛提到SSL是資料傳輸的加密技術，可以知道當網站與使用者互動時輸入的資料是有被加密過的。那反之，如果沒有SSL不就意謂著你的資料是裸露的，有心人士若攔截封包，就可以輕易取得你的資料，因為沒有加密，不需要解密過程。</p><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>環境準備<ul><li>準備域名</li><li>安裝Docker</li><li>安裝Docker-Compose</li></ul></li><li>服務架設 for 一般域名憑證申請方式<ul><li>設置docker-compose.yml容器化服務的環境與配置</li><li>啟動主要容器服務</li><li>設置docker-composeLE.yml，首次憑證申請容器服務</li><li>啟動首次憑證申請容器服務，完成SSL憑證申請</li><li>Nginx SSL設置</li><li>切換容器服務啟動自動SSL憑證申請</li></ul></li><li>服務架設 for 萬用子域憑證申請方式<ul><li>DNS服務管理權限金鑰申請</li><li>設置docker-compose.yml、docker-composeLE.yml容器化服務的環境與配置</li><li>啟動主要容器服務</li><li>啟動首次憑證申請容器服務，完成SSL憑證申請</li><li>Nginx SSL設置</li><li>切換容器服務啟動自動SSL憑證申請</li></ul></li></ul><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><p>環境只要安裝Docker跟Docker-Compose而已，可以知道接下來的設置都會在容器中，大幅降低環境汙染</p><h3 id="準備域名"><a href="#準備域名" class="headerlink" title="準備域名"></a>準備域名</h3><p>域名就跟車牌一樣有貴的有便宜的，而免費也有。freenom提供許多免費一年的域名供使用者申請。</p><p>輸入你想要的域名，從圖中可以看到freenom給予一些選擇, 有些可以使用有些已經被使用過了<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/freenom-1.jpg" alt="Untitled"></p><p>接著選擇使用期限，一年之前都是免費的。如果一年到期的話其實還可以繼續申請同一個，也還是免費。而且在過期前一個月就可以先續約，相當於優先權。<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/freenom-2.jpg" alt="Untitled"></p><p>申請完畢後，前往我的域名以管理域名<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/freenom-3.jpg" alt="Untitled"></p><p>在域名這邊我們可以設定該域名指向的IP位置，我的域名是指到github page的服務上，若自己有虛擬機也可以指向自己的公開IP上<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/freenom-4.jpg" alt="Untitled"></p><h3 id="安裝Docker"><a href="#安裝Docker" class="headerlink" title="安裝Docker"></a>安裝Docker</h3><p>Docker安裝指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  移除舊版本的docker</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>給予使用者Docker權限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將$USER加入docker群組</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換群組</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="安裝Docker-Compose"><a href="#安裝Docker-Compose" class="headerlink" title="安裝Docker-Compose"></a>安裝Docker-Compose</h3><p>Docker Compose安裝指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="服務架設-for-一般域名憑證申請方式"><a href="#服務架設-for-一般域名憑證申請方式" class="headerlink" title="服務架設 for 一般域名憑證申請方式"></a>服務架設 for 一般域名憑證申請方式</h2><p>一般域名在憑證申請上只要證明該域名是你的即可，通常只要依照規定在伺服器內設置路由，憑證機器人會在該路由處產生一個token檔，讓它驗證是否能夠順利訪問，若訪問成功憑證機器人就認可該域名是你擁有的。</p><h3 id="設置docker-compose-yml容器化服務的環境與配置"><a href="#設置docker-compose-yml容器化服務的環境與配置" class="headerlink" title="設置docker-compose.yml容器化服務的環境與配置"></a>設置docker-compose.yml容器化服務的環境與配置</h3><p>我們的docker-compose.yml總共會有3個角色</p><ol><li>網頁伺服器: Nginx</li><li>開發的服務: 前端、後端等等</li><li>證書機器人: Cerbot</li></ol><p>至少會有3個容器服務，這次開發的服務我使用Jenkins作為範例，以下是我的docker-compose.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Taipei</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/var/log/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx:/etc/nginx/conf.d</span>    </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/certbot/conf:/etc/nginx/ssl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/certbot/data:/var/www/certbot</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;/bin/sh -c &#x27;while :; do sleep 6h &amp; wait $$&#123;!&#125;; nginx -s reload; done &amp; nginx -g \&quot;daemon off;\&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins:lts</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&#x27;jenkins&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;50000:50000&quot;</span></span><br><span class="line"><span class="attr">mem_limit:</span> <span class="string">1024m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./jenkins:/var/jenkins_home</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">certbot:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">certbot/certbot</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">certbot</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/certbot/conf:/etc/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/certbot/logs:/var/log/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/certbot/data:/var/www/certbot</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/ssl:/secrets</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">&quot;/bin/sh -c &#x27;trap exit TERM; while :; do certbot renew; sleep 12h &amp; wait $$&#123;!&#125;; done;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p>💡 在docker-compose.yml設定檔中可以看到每個容器的volumes都有設置映射的目標，這邊分別介紹一下</p><ol><li>./logs:/var/log/nginx：伺服器日誌</li><li>./nginx:/etc/nginx/conf.d：伺服器設定檔</li><li>./nginx/certbot/conf:/etc/nginx/ssl：伺服器憑證 (這邊與cerbot串聯)</li><li>./nginx/certbot/data:/var/www/certbot：憑證機器人資料 (機器人產生的加密驗證檔會存與此)</li></ol></div><h3 id="設置Nginx伺服器設定檔"><a href="#設置Nginx伺服器設定檔" class="headerlink" title="設置Nginx伺服器設定檔"></a>設置Nginx伺服器設定檔</h3><p>從docker-compose.yml設定檔中可以得知，檔案需撰寫於nginx目錄下，在首次服務運行時我們會做首次憑證申請，因此這邊的設定只為了第一次的憑證訪問</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen [::]:80;</span><br><span class="line">     listen 80;</span><br><span class="line"></span><br><span class="line">     server_name your_domain.com;</span><br><span class="line"></span><br><span class="line">     location ~ /.well-known/acme-challenge &#123;</span><br><span class="line">         allow all; </span><br><span class="line">         root /var/www/certbot;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="啟動主要容器服務"><a href="#啟動主要容器服務" class="headerlink" title="啟動主要容器服務"></a>啟動主要容器服務</h3><p>我們已經建立好需要的服務在docker-compose.yml上了，接著只要使用docker-compose的指令就可以一次建立好容器。</p><p>通常單一域名的憑證申請會須要驗證特定目錄是否能正常訪問且含有服務建立好的標誌，因此先啟動容器服務讓瀏覽器輸入域名可以正常訪問</p><p>在docker-compose.yml檔案的目錄下執行建置指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 執行已寫好的docker-compose.yml</span></span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p>💡 執行過程中一開始local端尚未擁有nginx、jenkins、cerbot的images，因此一開始會先進行pull下載</p></div><h3 id="設置docker-composeLE-yml，首次憑證申請容器服務"><a href="#設置docker-composeLE-yml，首次憑證申請容器服務" class="headerlink" title="設置docker-composeLE.yml，首次憑證申請容器服務"></a>設置docker-composeLE.yml，首次憑證申請容器服務</h3><ol><li><p>撰寫docker-composeLE.yml</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">certbot:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">certbot/certbot</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">certonly</span> <span class="string">--webroot</span> <span class="string">--webroot-path</span> <span class="string">/var/www/certbot/</span> <span class="string">-d</span> <span class="string">$&#123;HOST_DOMAIN&#125;</span> <span class="string">--email</span> <span class="string">$&#123;HOST_EMAIL&#125;</span> <span class="string">--agree-tos</span> </span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/certbot/www/:/var/www/certbot/:rw</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/certbot/conf/:/etc/letsencrypt/:rw</span></span><br></pre></td></tr></table></figure> <div class="note info flat no-icon flat"><p>💡 參數介紹<br>webroot：通過將文件檔放在網頁跟目錄中以驗證憑證的方式，如此cerbot透過訪問domain.com/.well-known/acme-challenge來查看是否有該檔案，以驗證該域名的使用者是否屬於你<br>d：要申請的域名 ( 若一次要申請多個域名，可以-d abc.domain.com -d xyz.domain.com )<br>email： 聯繫或恢復用的信箱<br>agree-tos：同意ACME用戶協議，在申請途中會有問答yes/no，而我們使用docker-compose的過程是自動化的，並不能作答，因此這邊可以先設置同意。</p></div></li><li><p>撰寫環境變數(.env)</p><p> 在docker-composeLE.yml的certbot command可以看到有使用到環境變數，而這部分可以設定在.env檔中，讓docker-compose自動讀取</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HOST_DOMAIN=&lt;要註冊的域名&gt;</span><br><span class="line">HOST_EMAIL=&lt;信箱&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="啟動首次憑證申請容器服務，完成SSL憑證申請"><a href="#啟動首次憑證申請容器服務，完成SSL憑證申請" class="headerlink" title="啟動首次憑證申請容器服務，完成SSL憑證申請"></a>啟動首次憑證申請容器服務，完成SSL憑證申請</h3><p>指定啟動docker-composeLE.yml的服務，接著會執行cerbot預先寫好的command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-composeLE.yml up</span><br></pre></td></tr></table></figure><p>基本上我們在此可看到憑證申請過程，若失敗則會輸出相關錯誤訊息於終端機上</p><h3 id="將Nginx伺服器設定改為SSL，並重新載入Nginx"><a href="#將Nginx伺服器設定改為SSL，並重新載入Nginx" class="headerlink" title="將Nginx伺服器設定改為SSL，並重新載入Nginx"></a>將Nginx伺服器設定改為SSL，並重新載入Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name your_domain.com;</span><br><span class="line">    location ~ /.well-known/acme-challenge &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        root /var/www/certbot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 301 https://your_domain.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name your_domain.com;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/live/gcp12893678.tk/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/live/gcp12893678.tk/privkey.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成後重新整理nginx伺服器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>訪問自己的域名看看有沒有成功開啟SSL憑證吧</p><h3 id="更新憑證容器，完成自動化更新SSL憑證"><a href="#更新憑證容器，完成自動化更新SSL憑證" class="headerlink" title="更新憑證容器，完成自動化更新SSL憑證"></a>更新憑證容器，完成自動化更新SSL憑證</h3><p>還記得docker-compose.yml上有撰寫cerbot容器嗎，透過再次啟動下方指令，將首次申請用的容器替代即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="服務架設-for-萬用子域憑證申請方式"><a href="#服務架設-for-萬用子域憑證申請方式" class="headerlink" title="服務架設 for 萬用子域憑證申請方式"></a>服務架設 for 萬用子域憑證申請方式</h2><div class="note warning flat no-icon flat"><p>💡 若想要萬用子域驗證的話，需要注意的是你的DNS供應商，不同的供應商需要更改不同的image，因為萬用子域驗證需要經過”DNS挑戰”，DNS挑戰是要證明你擁有該DNS的權限，這樣才敢發萬用子域的憑證給你。</p><p>Cerbot已經在各別的image建立好不同供應商的API，對我們使用者來說只要將供應商API的權限金鑰給他即可，當然怕不安全的話，建立金鑰時，可以選擇該金鑰擁有的權限。</p></div><h3 id="DNS服務管理權限金鑰申請"><a href="#DNS服務管理權限金鑰申請" class="headerlink" title="DNS服務管理權限金鑰申請"></a>DNS服務管理權限金鑰申請</h3><div class="tabs" id="dns服務管理權限金鑰申請"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dns服務管理權限金鑰申請-1">若dns使用cloudflare</button></li><li class="tab"><button type="button" data-href="#dns服務管理權限金鑰申請-2">若dns使用cloudflare</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dns服務管理權限金鑰申請-1"><p>首先前往cloudflare網站登入後，點選個人帳戶的API Token(如圖)<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-api-token-page.jpg" alt="Untitled"></p><p>接著點選建立Token，會到下圖頁面，我們需要給予DNS編輯權限並且設定區域資源給予我們要使用的網域Domin<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/cloudflare-api-token-edit-page.jpg" alt="Untitled"></p><p>建立完成後我們會獲得一串金鑰token，將這串金鑰token填寫到 <code>nginx/ssl/cloudflare.ini</code> ，覆蓋掉”your_token”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dns_cloudflare_api_token = your_token</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dns服務管理權限金鑰申請-2"><p>前往API和服務→憑證建立服務帳戶<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gcp-dns-auth-key-step1.jpg" alt="Untitled"></p><p>輸入基本資訊<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gcp-dns-auth-key-step2.jpg" alt="Untitled"></p><p>設定將DNS權限給予服務<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gcp-dns-auth-key-step3.jpg" alt="Untitled"></p><p>建立完畢後，選取我們建立好的服務帳戶<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gcp-dns-auth-key-step4.jpg" alt="Untitled"></p><p>前往金鑰選項並新增金鑰<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gcp-dns-auth-key-step5.jpg" alt="Untitled"></p><p>選擇JSON格式，建立完畢後將自動下載金鑰<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/gcp-dns-auth-key-step6.jpg" alt="Untitled"></p><p>下載完成後我們將json內容複製填寫到 <code>nginx/ssl/google.json</code> ，下方為我們需要看到的格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;project_id&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private_key_id&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private_key&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_email&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_id&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;auth_uri&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token_uri&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;auth_provider_x509_cert_url&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_x509_cert_url&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="設置docker-compose-yml容器化服務的環境與配置-1"><a href="#設置docker-compose-yml容器化服務的環境與配置-1" class="headerlink" title="設置docker-compose.yml容器化服務的環境與配置"></a>設置docker-compose.yml容器化服務的環境與配置</h3><div class="tabs" id="設置docker-compose.yml容器化服務的環境與配置"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#設置docker-compose.yml容器化服務的環境與配置-1">若dns使用cloudflare</button></li><li class="tab"><button type="button" data-href="#設置docker-compose.yml容器化服務的環境與配置-2">若dns使用cloudflare</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="設置docker-compose.yml容器化服務的環境與配置-1"><ol><li><p>撰寫docker-composeLE.yml<br> 因為使用的dns服務商不同，我們的cerbot image和指令也不同，<br> 因此要檢查 <code>docker/docker-compose.yml</code>、<code>docker/docker-composeLE.yml</code> </p><p> 必須與下方一致</p><p> <code>docker/docker-compose.yml</code> (這裡只列出cerbot服務)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">certbot:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">certbot/dns-cloudflare</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">certbot</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../nginx/certbot/conf:/etc/letsencrypt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../nginx/certbot/logs:/var/log/letsencrypt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../nginx/certbot/data:/var/www/certbot</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../nginx/ssl:/secrets</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">&quot;/bin/sh -c &#x27;trap exit TERM; while :; do certbot renew; sleep 12h &amp; wait $$&#123;!&#125;; done;&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p> <code>docker/docker-composeLE.yml</code> </p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">certbot:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">certbot/dns-cloudflare</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">certonly</span> <span class="string">--expand</span> <span class="string">-d</span> <span class="string">$&#123;HOST_DOMAIN&#125;</span> <span class="string">-d</span> <span class="string">$&#123;WILDCARD_DOMAIN&#125;</span> <span class="string">--preferred-challenges</span> <span class="string">dns</span> <span class="string">--dns-cloudflare</span> <span class="string">--dns-cloudflare-credentials</span> <span class="string">/secrets/cloudflare.ini</span>  <span class="string">--email</span> <span class="string">$&#123;HOST_EMAIL&#125;</span> <span class="string">--agree-tos</span> <span class="string">--server</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../nginx/certbot/conf:/etc/letsencrypt</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../nginx/certbot/logs:/var/log/letsencrypt</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../nginx/certbot/data:/var/www/certbot</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../nginx/ssl:/secrets</span></span><br></pre></td></tr></table></figure> <div class="note info flat no-icon flat"><p>💡 參數介紹<br>–preferred-challenges：指定 Certbot 客戶端應該使用哪種方法來證明您控制請求證書的域名。Certbot 客戶端支援多種不同的挑戰類型，包括 HTTP、DNS 和 TLS-SNI，如果指定 –preferred-challenges dns，Certbot 客戶端將首先嘗試通過將特定的 DNS 記錄添加到您的域名的 DNS 配置中來證明您的域名控制權。<br>–dns-cloudflare：允許 Certbot 通過使用 Cloudflare API 創建和修改 DNS 記錄來驗證您對域的所有權。<br>–dns-cloudflare-credentials： 指控制DNS服務金鑰的檔案位置</p></div></li><li><p>撰寫環境變數(.env)</p><p> 在docker-composeLE.yml的certbot command可以看到有使用到環境變數，而這部分可以設定在.env檔中，讓docker-compose自動讀取</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOST_DOMAIN=&lt;要註冊的域名&gt;</span><br><span class="line">WILDCARD_DOMAIN=&lt;要註冊的萬用域名&gt;</span><br><span class="line">HOST_EMAIL=&lt;信箱&gt;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="設置docker-compose.yml容器化服務的環境與配置-2"><ol><li><p>撰寫docker-composeLE.yml</p><p> 因為使用的dns服務商不同，我們的cerbot image和指令也不同，<br> 因此要檢查 <code>docker/docker-compose.yml</code>、<code>docker/docker-composeLE.yml</code> </p><p> 必須與下方一致</p><p> <code>docker/docker-compose.yml</code> (這裡只列出cerbot服務)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">certbot:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">certbot/dns-google</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">certbot</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/certbot/conf:/etc/letsencrypt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/certbot/logs:/var/log/letsencrypt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/certbot/data:/var/www/certbot</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/ssl:/secrets</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">&quot;/bin/sh -c &#x27;trap exit TERM; while :; do certbot renew; sleep 12h &amp; wait $$&#123;!&#125;; done;&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p> <code>docker/docker-composeLE.yml</code> </p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">certbot:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">certbot/dns-google</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">certonly</span> <span class="string">--expand</span> <span class="string">-d</span> <span class="string">$&#123;HOST_DOMAIN&#125;</span> <span class="string">-d</span> <span class="string">$&#123;WILDCARD_DOMAIN&#125;</span> <span class="string">--preferred-challenges</span> <span class="string">dns</span> <span class="string">--dns-google</span> <span class="string">--dns-google-credentials</span> <span class="string">/secrets/google.json</span> <span class="string">--email</span> <span class="string">$&#123;HOST_EMAIL&#125;</span> <span class="string">--agree-tos</span> <span class="string">--server</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span> <span class="string">--dry-run</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./nginx/certbot/conf:/etc/letsencrypt</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./nginx/certbot/logs:/var/log/letsencrypt</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./nginx/certbot/data:/var/www/certbot</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./nginx/ssl:/secrets</span></span><br></pre></td></tr></table></figure> <div class="note info flat no-icon flat"><p>💡 參數介紹<br>–preferred-challenges：指定 Certbot 客戶端應該使用哪種方法來證明您控制請求證書的域名。Certbot 客戶端支援多種不同的挑戰類型，包括 HTTP、DNS 和 TLS-SNI，如果指定 –preferred-challenges dns，Certbot 客戶端將首先嘗試通過將特定的 DNS 記錄添加到您的域名的 DNS 配置中來證明您的域名控制權。<br>–dns-google：告訴 Certbot 客戶端使用 Google Cloud DNS API 在證書發行過程中添加和刪除用於域名驗證的 DNS 記錄<br>–dns-google-credentials： 指控制DNS服務金鑰的檔案位置</p></div></li><li><p>撰寫環境變數(.env)</p><p> 在docker-composeLE.yml的certbot command可以看到有使用到環境變數，而這部分可以設定在.env檔中，讓docker-compose自動讀取</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOST_DOMAIN=&lt;要註冊的域名&gt;</span><br><span class="line">WILDCARD_DOMAIN=&lt;要註冊的萬用域名&gt;</span><br><span class="line">HOST_EMAIL=&lt;信箱&gt;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="啟動主要容器服務-1"><a href="#啟動主要容器服務-1" class="headerlink" title="啟動主要容器服務"></a>啟動主要容器服務</h3><p>我們已經建立好需要的服務在docker-compose.yml上了，接著只要使用docker-compose的指令就可以一次建立好容器。</p><p>通常單一域名的憑證申請會須要驗證特定目錄是否能正常訪問且含有服務建立好的標誌，因此先啟動容器服務讓瀏覽器輸入域名可以正常訪問</p><p>在docker-compose.yml檔案的目錄下執行建置指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 執行已寫好的docker-compose.yml</span></span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><div class="note info flat no-icon flat"><p>💡 執行過程中一開始local端尚未擁有nginx、jenkins、cerbot的images，因此一開始會先進行pull下載</p></div><h3 id="啟動首次憑證申請容器服務，完成SSL憑證申請-1"><a href="#啟動首次憑證申請容器服務，完成SSL憑證申請-1" class="headerlink" title="啟動首次憑證申請容器服務，完成SSL憑證申請"></a>啟動首次憑證申請容器服務，完成SSL憑證申請</h3><p>指定啟動docker-composeLE.yml的服務，接著會執行cerbot預先寫好的command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-composeLE.yml up</span><br></pre></td></tr></table></figure><p>基本上我們在此可看到憑證申請過程，若失敗則會輸出相關錯誤訊息於終端機上</p><h3 id="將Nginx伺服器設定改為SSL，並重新載入Nginx-1"><a href="#將Nginx伺服器設定改為SSL，並重新載入Nginx-1" class="headerlink" title="將Nginx伺服器設定改為SSL，並重新載入Nginx"></a>將Nginx伺服器設定改為SSL，並重新載入Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name your_domain.com;</span><br><span class="line">    location ~ /.well-known/acme-challenge &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        root /var/www/certbot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 301 https://your_domain.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name your_domain.com;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/live/gcp12893678.tk/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/live/gcp12893678.tk/privkey.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成後重新整理nginx伺服器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>訪問自己的域名看看有沒有成功開啟SSL憑證吧</p><h3 id="更新憑證容器，完成自動化更新SSL憑證-1"><a href="#更新憑證容器，完成自動化更新SSL憑證-1" class="headerlink" title="更新憑證容器，完成自動化更新SSL憑證"></a>更新憑證容器，完成自動化更新SSL憑證</h3><p>還記得docker-compose.yml上有撰寫cerbot容器嗎，透過再次啟動下方指令，將首次申請用的容器替代即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>透過Docker compose方式使我們無須手動安裝Nginx以及憑證服務，大部分透過設定即可。甚至今後只需要做好範本，就可以很便捷佈署。</p>]]></content>
      
      
      <categories>
          
          <category> web伺服器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ssl </tag>
            
            <tag> dns </tag>
            
            <tag> certbot </tag>
            
            <tag> cloudflare </tag>
            
            <tag> google cloud </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab + Jenkins 建置CICD流程</title>
      <link href="/posts/GitLab%20%E5%92%8C%20Jenkins%20%E5%BB%BA%E7%BD%AECICD%E6%B5%81%E7%A8%8B/"/>
      <url>/posts/GitLab%20%E5%92%8C%20Jenkins%20%E5%BB%BA%E7%BD%AECICD%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在軟體工程中，頻繁的交付新的軟體版本是常見的現象。而 <mark class="hl-label default">在軟體版本持續更新的同時，如何保證程式保持一定的品質呢？</mark>  若每一次的小部分更動都交由人力來監管品質，則消耗大量人力成本，且耗費時間也將提升。因此在應用程式的提交、建置、測試和部署中實施自動化，透過每次自動化的流程達成持續整合、持續交付與持續佈署。</p><h3 id="什麼是CI-Continuous-Integration-持續整合"><a href="#什麼是CI-Continuous-Integration-持續整合" class="headerlink" title="什麼是CI(Continuous Integration, 持續整合)?"></a>什麼是CI(Continuous Integration, 持續整合)?</h3><p>持續整合(CI)是開發人員將軟體系統每個變動實行自動化驗證，其中驗證包含：專案建置(build)、測試(test)、程式碼安全分析(analysis)等等，若驗證通過代表此次提交的更動版本對過去設置的標準，可以確定新版程式碼和原有的能否正確地整合在一起。這一系列的驗證會交由自動化工具執行，DevOps人員只需要將工具的觸發、執行等設定完成即可自動化運作。常見的CI工具如下：</p><ul><li>Jenkins</li><li>Drone</li><li>Circle CI</li><li>GitLab CI</li></ul><h3 id="什麼是CD-Continuous-delivery-Continuous-deployment-持續交付-持續佈署"><a href="#什麼是CD-Continuous-delivery-Continuous-deployment-持續交付-持續佈署" class="headerlink" title="什麼是CD(Continuous delivery / Continuous deployment, 持續交付/持續佈署)?"></a>什麼是CD(Continuous delivery / Continuous deployment, 持續交付/持續佈署)?</h3><p>持續交付(CD)是在持續整合的基礎上，將整合的專案進一步測試，嘗試將專案佈署至與正式版本環境相似的環境上，並且保持在隨時可以產出的狀況。例如將程式佈署後在測試環境進行動態測試，檢驗實際運行是否流暢。在完成持續交付後可以選擇自動/手動進行接續的自動佈署至正式環境，以啟用新版本內容。</p><p>持續佈署(CD)是在完成持續交付後進行自動佈署至生產環境的流程，代表專案的變動將套用至生產環境中，此外也將執行監控系統隨時檢測系統有無異常。</p><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>流程分析</li><li>環境準備<ul><li>Docker &amp; Docker Compose安裝</li><li>開源持續整合CI工具「 Jenkins 」安裝</li><li>開源程式碼分析系統「 SonarQube 」安裝</li><li>Jenkins 環境設置 (插件安裝與設定)</li></ul></li><li>Jenkins 建立專案建置流程<ul><li>設置程式碼管理(SCM)</li><li>設定建置觸發程序(Trigger)</li><li>設定建置流程(Build)</li><li>設置建置後動作(After Build)</li><li>執行建置專案</li><li>Webhook自動化執行</li></ul></li><li>Pipeline形式專案建置流程<ul><li>撰寫Jenkins pipeline配置檔</li></ul></li><li>Jenkins分散式建構與佈署<ul><li>節點環境準備</li><li>新增節點</li><li>在pipeline上指定節點執行</li></ul></li></ul><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-process.jpg" alt="Untitled"></p><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><p>雖然可以使用一般方式安裝Jenkins與SonarQube，但想到繁瑣的安裝步驟、版本更新，就選擇使用Docker與Docker Compose安裝啦</p><div class="note info flat"><p>Docker 將軟體封裝到名為容器的標準化單位，容器是在作業系統層上虛擬化，並將容器獨立環境且直接使用系統OS資源，無須安裝/虛擬化作業系統。透過Docker可以最小化方式建立微服務且能快速啟動、停止、刪除等操作。其中Jekins與SonarQube都有各自的image提供在Docker hub上。</p></div><div class="note success flat"><p>Docker Compose是為了協助定義和運行多容器應用程式而開發的工具，利用 YAML 檔案來配置需要的服務以及服務的環境設定。在Docker Compose中定義好Jenkins與SonarQube和SonarQube的資料庫服務後，最後只需要執行一行指令即可建置 (超方便！)</p></div><h3 id="安裝Docker"><a href="#安裝Docker" class="headerlink" title="安裝Docker"></a>安裝Docker</h3><p>Docker安裝指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  移除舊版本的docker</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>安裝完成後，需要給予使用者Docker權限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將$USER加入docker群組</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換群組</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="安裝Docker-Compose"><a href="#安裝Docker-Compose" class="headerlink" title="安裝Docker Compose"></a>安裝Docker Compose</h3><p>Docker Compose安裝指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試是否安裝成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="使用Docker-Compose安裝Jenkins-amp-SonarQube"><a href="#使用Docker-Compose安裝Jenkins-amp-SonarQube" class="headerlink" title="使用Docker Compose安裝Jenkins &amp; SonarQube"></a>使用Docker Compose安裝Jenkins &amp; SonarQube</h3><p>我們在想要存放的docker-compose.yml、jenkins、sonarqube等資料的目錄新增docker-compose.yml，其中docker-compose.yml的內容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose的版本</span></span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    container_name: <span class="string">&#x27;jenkins&#x27;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      - <span class="string">&quot;50000:50000&quot;</span></span><br><span class="line">mem_limit: 1024m</span><br><span class="line">    volumes:</span><br><span class="line">      - ./jenkins:/var/jenkins_home</span><br><span class="line">networks:</span><br><span class="line">      - devops</span><br><span class="line">      </span><br><span class="line">  sonarqube:</span><br><span class="line">    image: sonarqube:lts</span><br><span class="line">    container_name: <span class="string">&#x27;sonarqube&#x27;</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    environment:</span><br><span class="line">      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar</span><br><span class="line">      SONAR_JDBC_USERNAME: sonar</span><br><span class="line">      SONAR_JDBC_PASSWORD: sonar</span><br><span class="line">    volumes:</span><br><span class="line">      - ./sonarqube/sonarqube_data:/opt/sonarqube/data</span><br><span class="line">      - ./sonarqube/sonarqube_extensions:/opt/sonarqube/extensions</span><br><span class="line">      - ./sonarqube/sonarqube_logs:/opt/sonarqube/logs</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">networks:</span><br><span class="line">      - devops</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:12</span><br><span class="line">    container_name: <span class="string">&#x27;postgres&#x27;</span></span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_USER: sonar</span><br><span class="line">      POSTGRES_PASSWORD: sonar</span><br><span class="line">    volumes:</span><br><span class="line">      - ./db/postgresql:/var/lib/postgresql</span><br><span class="line">      - ./db/postgresql_data:/var/lib/postgresql/data</span><br><span class="line">networks:</span><br><span class="line">      - devops</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  devops:</span><br></pre></td></tr></table></figure><div class="note info flat"><p>在docker-compose.yml中設置了jenkins、sonarqube、database(sonarqube用的)服務，設定中每個服務包含了映像檔(image)、開放的port、需要映射到主機的資料(volumes)等，之後只要在docker-compose.yml就可以知道當初的設定，後續的更改或是擴充都很方便</p></div><h3 id="建置服務-amp-注意事項"><a href="#建置服務-amp-注意事項" class="headerlink" title="建置服務 &amp; 注意事項"></a>建置服務 &amp; 注意事項</h3><p>在docker-compose.yml的目錄下執行建置指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 執行已寫好的docker-compose.yml</span></span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>在建置過程可能會發現容器中途失敗退出的問題，原因有很多種，大部分在建置過程的紀錄都會顯示原因</p></div><h4 id="sonarqube虛擬記憶體設定"><a href="#sonarqube虛擬記憶體設定" class="headerlink" title="sonarqube虛擬記憶體設定"></a>sonarqube虛擬記憶體設定</h4><p>由於SonarQube 使用 an embedded Elasticsearch (全文檢索引擎)，所以虛擬機的配置要符合 Elasticsearch production mode要求和File Descriptors配置，因此虛擬記憶體需要達到他的需求<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-sonarqube-memory-problem.jpg" alt="Untitled"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久更改的話，需在/etc/sysctl.conf設定</span></span><br><span class="line"></span><br><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br><span class="line">sudo sysctl -w fs.file-max=65536</span><br></pre></td></tr></table></figure><h4 id="Jenkins權限處理"><a href="#Jenkins權限處理" class="headerlink" title="Jenkins權限處理"></a>Jenkins權限處理</h4><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-problem.jpg" alt="Untitled"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uid 1000 為 jenkins用戶 (jenkins image&#x27;s Dockerfile 設定的)</span></span><br><span class="line"><span class="comment"># 由於我們在volumes的路徑是./jenkins，所以是對該目錄進行權限設定，/var/jenkins_home是預設目錄</span></span><br><span class="line">sudo mkdir ./jenkins</span><br><span class="line">sudo chown -R 1000:1000 ./jenkins</span><br></pre></td></tr></table></figure><p>服務建置成功後我們可以透過docker ps指令查看目前容器運行狀態<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-docker-ps.jpg" alt="Untitled"><br>圖中可看到Jenkins開放的port是8080，sonarqube則是9000<br>因此在瀏覽器中打開對應的port可以看到服務的頁面</p><ul><li>jenkins：localhost:8080</li><li>sonarqube：localhost:9000</li></ul><div class="note info flat"><p><strong>Sonarqube預設帳號密碼</strong><br>default account: admin<br>default password: admin</p></div><h3 id="Jenkins環境設置"><a href="#Jenkins環境設置" class="headerlink" title="Jenkins環境設置"></a>Jenkins環境設置</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>進入jenkins頁面中會發現jenkins要求我們輸入初始的管理員密碼以解鎖jenkins，密碼我們可以在映射到local端的jenkins目錄可以找到(./jenkins/secrets/initialAdminPassword)</p><p>將檔案裡的密碼貼上後就進入到下個頁面啦<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-unlock.jpg" alt="Untitled"><br>Jenkins提供2種方式客製化自己的Jenkins，分別是<mark class="hl-label default">安裝建議的插件</mark>  和 <mark class="hl-label default">自己選擇插件安裝</mark> ，兩者看個人喜好選擇，之後都可以再安裝或刪除個別插件<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-install-suggest.jpg" alt="Untitled"><br>這邊我選擇安裝建議的插件，在下圖可以看到它幫我們先安裝Git、Github、Gradle、Pipleline、Mailer等插件<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-install-suggest-ing.jpg" alt="Untitled"><br><strong>設定第一個管理員使用者</strong><br>安裝插件完成後會要求我們設定管理員的帳戶資訊，也就是之後登入jenkins的帳戶<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-setting-admin.jpg" alt="Untitled"></p><p><strong>設定Jenkins server的網址</strong><br>jenkins以及插件可能會需要用到，提供給使用者正確的網址路徑<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-setting-url.jpg" alt="Untitled"></p><p>設定完畢後，就進入到Jenkins主頁面啦<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-setting-first.jpg" alt="Untitled"></p><h4 id="安裝插件"><a href="#安裝插件" class="headerlink" title="安裝插件"></a>安裝插件</h4><p>在jenkins左側選單中有Mange Jenkins的選項，其中包含Jenkins的相關設定以及各插件設定<br>這裡將預先安裝以下插件，在接續的實作過程中會使用到<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-manage-jenkins.jpg" alt="Untitled"></p><ol><li>在進入管理插件頁面後，需要注意的是要點選Available選項才能找到尚未安裝的插件</li><li>在使用右上的搜尋欄找到所需的插件吧</li></ol><div class="tabs" id="jenkins-各插件安裝"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#jenkins-各插件安裝-1">GitLab</button></li><li class="tab"><button type="button" data-href="#jenkins-各插件安裝-2">SonarQube</button></li><li class="tab"><button type="button" data-href="#jenkins-各插件安裝-3">Jacoco</button></li><li class="tab"><button type="button" data-href="#jenkins-各插件安裝-4">OWASP Dependency Check</button></li><li class="tab"><button type="button" data-href="#jenkins-各插件安裝-5">Slack</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="jenkins-各插件安裝-1"><p>GitLab插件支援使用gitlab webhook來觸發建置程序<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-install-gitlab.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jenkins-各插件安裝-2"><p>SonarQube插件支援建置時，掃描程式碼分析程式碼品質與安全<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-install-sonarqub.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jenkins-各插件安裝-3"><p>Jacoco插件更方便顯示程式碼覆蓋率報告<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-install-jacoco.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jenkins-各插件安裝-4"><p>OWASP Dependency Check插件能掃描分析專案依賴危險<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-install-dependency-check.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jenkins-各插件安裝-5"><p>Slack插件可以透過建置完成發送通知至Slack上<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-install-slack.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="插件設定"><a href="#插件設定" class="headerlink" title="插件設定"></a>插件設定</h4><p>有些插件在Jenkins系統設定頁面會提供插件的全域設定，例如sonarqube的伺服器位置、權限、版本或是slack的工作區、權限，這些共用性的設定無需在專案流程中每次特別設置</p><div class="tabs" id="jenkins-各插件設定"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#jenkins-各插件設定-1">SonarQube</button></li><li class="tab"><button type="button" data-href="#jenkins-各插件設定-2">OWASP Dependency Check</button></li><li class="tab"><button type="button" data-href="#jenkins-各插件設定-3">Slack</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="jenkins-各插件設定-1"><p><strong>設置Sonarqube Server</strong><br>Jenkins需要知道Sonarqube Server的網址、權限才能串接</p><p><strong>步驟1：</strong>首先到管理Jenkins選單頁，並點擊系統設置選項<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-menu.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>找到SonarQube servers區塊，新增sonarqube server<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-sonarqube-server.jpg" alt="Untitled"></p><p><strong>步驟3：</strong>填入SonarQube相關資訊</p><ul><li>Name：自訂名稱 (辨識不同server用途)</li><li>Server URL：docker compose架設的sonarqube server的 URL</li><li>Server authentication token：sonarqube權限金鑰 (需在sonarqube取得金鑰)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-sonarqube-server-setting.jpg" alt="Untitled"></p><p><strong>步驟3-1：</strong>前往SonarQube頁面產生權限金鑰<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-sonarqube-security.jpg" alt="Untitled"></p><p><strong>步驟3-2：</strong>複製sonarqube權限金鑰<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-sonarqube-auth-token.jpg" alt="Untitled"></p><p><strong>步驟3-3：</strong>設置sonarqube權限 (選擇權限驗證種類：Secret text)<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-sonarqube-server-credential.jpg" alt="Untitled"></p><p><strong>設置Sonarqube Scanner</strong><br>Sonarqube Scanner幫助掃描專案程式碼</p><p><strong>步驟1：</strong>在Jenkins管理頁面選擇全域工具設置<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-sonarqube-scanner.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>新增Sonarqube Scanner，並選擇合適的版本<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-sonarqube-scanner-install.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jenkins-各插件設定-2"><p>在這邊將設置OWASP Dependency Check的版本和名稱</p><p><strong>步驟1：</strong>在Jenkins管理頁面選擇全域工具設置<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-sonarqube-scanner.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>新增OWASP Dependency Check，並選擇合適的版本<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-dependency-check-setting.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jenkins-各插件設定-3"><p>我們需要從Slack建立機器人，並且取得slack上的網域和金鑰</p><p><strong>步驟1：</strong>在Slack新增Jenkins CI應用程式<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-slack-jenkins.jpg" alt="Untitled"><br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-slack-jenkins-install.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>選擇Jenkins機器人發通知的頻道<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-slack-jenkins-install-channel.jpg" alt="Untitled"></p><p><strong>步驟3：</strong>Slack上詳細說明了接續設定，其中包含網域和權限<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-slack-jenkins-setting.jpg" alt="Untitled"></p><p><strong>步驟4：</strong>在Slack設置中要求我們填入工作區網址、權限、預設頻道/成員ID<br><strong>步驟5：</strong>設定完成後可以點擊右下的Test Connection測試有無成功，若成功Jenkins bot將發送一則測試訊息至當初設定的Slack頻道上<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-plugin-slack-setting.jpg" alt="Untitled"></p><p>測試後Jenkins機器人將發送一則測試消息在頻道上<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-slack-display.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="建立專案建置流程"><a href="#建立專案建置流程" class="headerlink" title="建立專案建置流程"></a>建立專案建置流程</h2><p>環境設定完了就可以正式進入建立專案建置流程啦！</p><p><strong>步驟1：</strong>首先在Jenkins主頁點擊New Item創建項目<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-homepage-click-new-item.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>輸入項目名稱，這邊選擇Freestyle project(提供彈性UI設置)<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-add-new-item.jpg" alt="Untitled"></p><p>到設置頁面可以看到上方有6個選項</p><ol><li>General：一般設定</li><li>Source Code Management：專案程式碼管理，讓Jenkins知道要Checkout的專案，以及分支</li><li>Build Triggers：建置觸發條件，除了在UI上手動建置，也可以給予觸發條件，以自動化執行</li><li>Build Enviroment：建置環境</li><li>Build：建置動作</li><li>Post-build Actions：建置”後”動作 (通知、產生報告等等)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-1.jpg" alt="Untitled"></p><h3 id="設置程式碼管理-SCM"><a href="#設置程式碼管理-SCM" class="headerlink" title="設置程式碼管理(SCM)"></a>設置程式碼管理(SCM)</h3><p><strong>步驟1：</strong>在程式碼管理必須設定Git repositories，填入專案網址以及專案權限<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-scm.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>專案權限設置中可以使用UserName with password種類，輸入GitLab/Github的帳密即可<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-scm-credentials.jpg" alt="Untitled"></p><p>權限設置好後，原先的紅字錯誤就消失啦<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-scm-full.jpg" alt="Untitled"></p><h3 id="設定建置觸發程序-Trigger"><a href="#設定建置觸發程序-Trigger" class="headerlink" title="設定建置觸發程序(Trigger)"></a>設定建置觸發程序(Trigger)</h3><p>在建置觸發條件中勾選當有push變更至GitLab時觸發，下方提供Push, Merge等事件選擇<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-trigger-gitlab.jpg" alt="Untitled"></p><h3 id="設定建置流程-Build"><a href="#設定建置流程-Build" class="headerlink" title="設定建置流程(Build)"></a>設定建置流程(Build)</h3><p>在建置流程中我希望依序執行 build → Jacoco(unit test、coverage rate) → SonarQube → Deoendency check </p><p><strong>設置Gradle</strong></p><p>這裡我使用java gradle專案，新增呼叫gradle script(在先前初始化時選擇的建議安裝內有包含gradle插件)<br>由於我專案內有gradle wrapper，就不使用Jenkins上的Gradle環境了 (PS. 若需要需前往插件設定新增Gradle版本)<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-build-gradle.jpg" alt="Untitled"></p><div class="note info flat"><p>在gradle build生命週期中test也包含在內(test將執行jacoco的單元測試與覆蓋率)</p></div><div class="note info flat"><p>使用maven也有相應的插件，其他語言的專案也可以直接選擇使用Execute shell方式輸入指令方式</p></div><p><strong>設置SonarQube Scanner</strong><br>在Gradle build和test完成後會有Java Class檔和jacoco report，接著提供給SonarQube Scanner掃描<br>我們需要設定相關參數給Sonarqube Scanner知道</p><ul><li>sonar.projectKey：專案ID (可自訂)，用來辨識project</li><li>sonar.projectName：專案名稱，會顯示於sonarqube上</li><li>sonar.projectVersion：專案版本</li><li>sonar.sources：專案程式碼來源位置</li><li>sonar.java.binaries：專案編譯Java Class位置</li><li>sonar.coverage.jacoco.xmlReportPaths：Jacoco報告路徑</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-build-sonarqube-scanner-properties.jpg" alt="Untitled"></p><p><strong>設置Dependency-Check</strong><br>Dependency-Check基本上不需要設定，只要在插件設定時有設置好Dependency-Check版本即可<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-build-dependency-check-setting.jpg" alt="Untitled"></p><h3 id="設置建置後動作-After-Build"><a href="#設置建置後動作-After-Build" class="headerlink" title="設置建置後動作(After Build)"></a>設置建置後動作(After Build)</h3><p>在完成建置後，我們可以在建置後動作產生一些報告或者通知</p><p><strong>產生Jacoco報告</strong><br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-after-build-jacoco.jpg" alt="Untitled"><br>基本上不需要設定<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-after-build-jacoco-setting.jpg" alt="Untitled"></p><p><strong>產生Dependency-Check報告</strong><br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-after-build-dependency-check.jpg" alt="Untitled"></p><p>可以指定Dependency-Check產出的報告檔案路徑<br>PS. 基本上在圖形介面上就有報告可以查看<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-after-build-dependency-check-setting.jpg" alt="Untitled"></p><p><strong>發送Slack通知</strong><br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-after-build-slack.jpg" alt="Untitled"></p><p>我們在插件設定已經完成串接，這邊只需要勾選觸發條件<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-setting-after-build-slack-setting.jpg" alt="Untitled"></p><h3 id="執行建置專案"><a href="#執行建置專案" class="headerlink" title="執行建置專案"></a>執行建置專案</h3><p>完成專案建置設定後，目前有2種方式可以觸發專案建置</p><ol><li>手動執行</li><li>透過專案設置的觸發器條件執行，先前設置是當gitlab有push event時</li></ol><p>為了確保建置設定沒有出錯，可以先使用手動方式執行</p><p>執行後在左下可以看到此次建置的資訊(目前進度以及編號(第幾次執行)等)，若建置完畢後出現三種結果：</p><ul><li>紅燈代表失敗</li><li>橘燈代表不穩定</li><li>綠燈代表成功</li></ul><p>在完成建置後可以點擊建置編號查看此次建置的詳細內容</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-status.jpg" alt="Untitled"></p><p>另外在建置的開始與結束我們應該會在Slack收到Jenkins bot的消息，其中Jenkins會通知此次建置的狀態、時間，另外也附上此次專案建置的連結 (或許會有多個專案執行)<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-notify-slack.jpg" alt="Untitled"></p><p>在左側選單還有許多內容可以查看，還記得我們剛才設定的其他報告嗎?</p><ol><li>Console Output：整個建置的歷程</li><li>Coverage Report：專案覆蓋率報告 (Jacoco)</li><li>Dependency-Check：專案依賴檢查報告</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-record.jpg" alt="Untitled"></p><p><strong>Coverage Report</strong><br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-record-jacoco.jpg" alt="Untitled"></p><p><strong>Dependency-Check</strong><br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-record-dependency-check.jpg" alt="Untitled"></p><p><strong>Sonarqube</strong><br>則需在專案流程主頁點擊，且詳細內容需至sonarqube伺服器網頁上查看<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-record-sonarqube.jpg" alt="Untitled"></p><p>在Sonarqube上可以看到專案的bug、漏洞、不良習慣、技術債花費時間等<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-free-style-project-run-record-sonarqube-server.jpg" alt="Untitled"></p><p>如果手動建置有成功的話，可以試試看透過Gitalb webhook觸發</p><p><strong>GitLab webhook設定</strong><br><strong>步驟1：</strong>首先到GitLab專案頁面上，選擇Setting -&gt; Integrations -&gt; Jenkins CI<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-gitlab-jenkins-webhook.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>這邊填上Jenkins url，注意是domain + port，不需要子路徑喔<br>Project name填上Jenkins上新增項目的名稱<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-gitlab-jenkins-webhook-setting.jpg" alt="Untitled"></p><p>若使用Gitlab webhook發送的方式觸發的話，可以在該次建置的觸發者，Slack上也可以看到<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-gitlab-jenkins-run-status.jpg" alt="Untitled"></p><h2 id="Pipeline形式專案建置流程"><a href="#Pipeline形式專案建置流程" class="headerlink" title="Pipeline形式專案建置流程"></a>Pipeline形式專案建置流程</h2><p>剛才我們使用Free-Style的形式建置專案流程，其中可以透過在Jenkins上UI點選輸入形式自定義內容。那Pipeline形式有何不同呢? Pipeline有2個不錯的特點</p><ol><li>程式碼形式簡潔易讀的設定內容</li><li>配置檔整合至git專案上，供開發人員在開發專案時即可了解建置流程</li></ol><p><strong>新增項目</strong><br><strong>步驟1：</strong>在新增項目種選擇Pipeline<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-pipeline-add.jpg" alt="Untitled"></p><p>新增後進入設定頁面，會發現Jenkins有提供部分UI設定，主要是給將Pipeline寫在Jenkins上的人使用的或者一些Pipeline設定的選擇，若<strong>步驟2：</strong>選擇pipeline配置檔在Git專案上則需要切換選項<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-pipeline-setting-1.jpg" alt="Untitled"></p><p><strong>步驟3：</strong>這邊只需要設置Git專案的資訊即可<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-pipeline-setting-scm.jpg" alt="Untitled"></p><h3 id="撰寫Jenkins-pipeline配置檔"><a href="#撰寫Jenkins-pipeline配置檔" class="headerlink" title="撰寫Jenkins pipeline配置檔"></a>撰寫Jenkins pipeline配置檔</h3><p>首先Jenkins pipeline配置檔預設是專案根目錄的Jenkinsfile檔案，如果想更換位置可以在Jenkins的UI上設定<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-pipeline-jenkinsfile-setting.jpg" alt="Untitled"></p><p>撰寫方法很簡單，使用大括弧形式並配合關鍵語意即可：</p><ul><li>pipeline：整個流程的最外層</li><li>agent：是指定執行時的節點</li><li>stages：是設置階段執行內容與環境，我們可以為stage有個暱稱，執行時在Jenkins上可以更直觀看出現在的進度</li><li>post：是建置後需要執行的步驟，這邊我們可以做報告產出、通知等，另外post提供各種狀態可以附加的動作<strong>always、changed、fixed、regression、aborted、failure、success、unstable、unsuccessful 和 cleanup</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Checkout SCM&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;Checkout SCM&#x27;</span></span><br><span class="line">                git url: <span class="string">&#x27;https://gitlab-se.ntcu.edu.tw/ntcu-acs106103/shape-by-gradle.git&#x27;</span>, branch: <span class="string">&#x27;master&#x27;</span>, credentialsId: <span class="string">&#x27;gitlab-user&#x27;</span>   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;Building&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;chmod +x ./gradlew&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;./gradlew clean build&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Analyze&#x27;</span>) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                scannerHome = tool <span class="string">&#x27;SonarQube 4.6.2&#x27;</span> // SonarQube Scanner 該版本Name</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;Analyzing&#x27;</span></span><br><span class="line">                withSonarQubeEnv(<span class="string">&#x27;sonarqube&#x27;</span>) &#123; // SonarQube servers Name</span><br><span class="line">                    sh <span class="string">&quot;<span class="variable">$&#123;scannerHome&#125;</span>/bin/sonar-scanner &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.projectKey=spring-first-project &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.projectName=spring-first-project &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.sources=./src &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.java.binaries=./build/classes/java &quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            junit <span class="string">&#x27;build/test-results/**/*.xml&#x27;</span></span><br><span class="line">            jacoco()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Checkout SCM是可以省略的，因為在Jenkins上我們已經設置了Git專案<br>若將pipeline設置在Jenkins上則需要撰寫</p></div><p>設定完成後push至gitlab上，我們一樣先進行手動建置<br>若要Gitlab webwook觸發則須在Jenkins UI設定trigger，畢竟Jenkinsfile在Git上</p><h2 id="Jenkins分散式建構與佈署"><a href="#Jenkins分散式建構與佈署" class="headerlink" title="Jenkins分散式建構與佈署"></a>Jenkins分散式建構與佈署</h2><p>Jenkins提供新增節點功能，使Jenkins可以將任務派發給其他節點，加快作業執行以及減少Jenkins主機工作負載量(workload)，以確保 Jenkins 可以保持在最佳的運作狀態下。</p><p>另外我們也可以在指定節點執行專案內容達到佈署效果</p><h3 id="節點環境準備"><a href="#節點環境準備" class="headerlink" title="節點環境準備"></a>節點環境準備</h3><p>我們需要為另一台server準備jenkins的使用者、工作區以及Java8環境</p><p><strong>新增使用者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增使用者</span></span><br><span class="line">sudo adduser jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換使用者</span></span><br><span class="line">su jenkins</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-user-add.jpg" alt="Untitled"></p><p><strong>新增使用者的ssh公私鑰 &amp; 安裝Java 8</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -f <span class="string">&quot;jenkinsAgent_rsa&quot;</span></span><br><span class="line">cat jenkinsAgent_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys ~/.ssh/jenkinsAgent_rsa</span><br><span class="line"></span><br><span class="line">cat ~/.ssh/jenkinsAgent_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝Java 8</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h3 id="新增節點"><a href="#新增節點" class="headerlink" title="新增節點"></a>新增節點</h3><p><strong>步驟1：</strong>在管理Jenkins頁面點擊管理節點<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-add.jpg" alt="Untitled"></p><p><strong>步驟2：</strong>新增節點<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-new.jpg" alt="Untitled"></p><p><strong>步驟3：</strong>輸入節點名稱以及勾選類別<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-new-1.jpg" alt="Untitled"></p><ol><li>Remote root directory：遠端根目錄，就像是Jenkins Home一樣會放置工作區的內容</li><li>Usage：使用模式，這邊我是設置只有指定該節點時才使用</li><li>Launch method：啟動方式，透過SSH方式</li><li>Host：主機IP</li><li>Credentials：權限認證，驗證使用SSH方式，附上private key</li><li>Host Key Verification Strategy：金鑰認證策略，這邊選擇手動驗證，在Jenkins UI的側邊欄上會有選項要確認<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-new-2.jpg" alt="Untitled"></li></ol><p>設定完畢後，Jenkins就會開始嘗試連上新的節點，將Jenkins的相關程式安裝至新節點上<br>此時可從圖中看到還在啟動中<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-new-3.jpg" alt="Untitled"></p><p>點擊節點的Log中可以看到節點目前的狀況<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-new-4.jpg" alt="Untitled"></p><p>啟動完畢後，就可以看到節點的資訊<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/devops-cicd/devops-cicd-jenkins-node-new-5.jpg" alt="Untitled"></p><h3 id="在pipeline上指定節點執行"><a href="#在pipeline上指定節點執行" class="headerlink" title="在pipeline上指定節點執行"></a>在pipeline上指定節點執行</h3><p>這裡新增了佈署的stage，並且佈署的stage上指定了deploy-server節點</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Checkout SCM&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;Checkout SCM&#x27;</span></span><br><span class="line">                git url: <span class="string">&#x27;https://gitlab-se.ntcu.edu.tw/ntcu-acs106103/shape-by-gradle.git&#x27;</span>, branch: <span class="string">&#x27;master&#x27;</span>, credentialsId: <span class="string">&#x27;gitlab-user&#x27;</span>   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;Building&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;chmod +x ./gradlew&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;./gradlew clean build&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Analyze&#x27;</span>) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                scannerHome = tool <span class="string">&#x27;SonarQube 4.6.2&#x27;</span> // SonarQube Scanner 該版本Name</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;Analyzing&#x27;</span></span><br><span class="line">                withSonarQubeEnv(<span class="string">&#x27;sonarqube&#x27;</span>) &#123; // SonarQube servers Name</span><br><span class="line">                    sh <span class="string">&quot;<span class="variable">$&#123;scannerHome&#125;</span>/bin/sonar-scanner &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.projectKey=spring-first-project &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.projectName=spring-first-project &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.sources=./src &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.java.binaries=./build/classes/java &quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">stage(<span class="string">&#x27;PassDeployFile&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                stash includes: <span class="string">&#x27;docker-compose.yml&#x27;</span>, name: <span class="string">&#x27;docker-compose.yml&#x27;</span></span><br><span class="line">                stash includes: <span class="string">&#x27;Dockerfile&#x27;</span>, name: <span class="string">&#x27;Dockerfile&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Deploy&#x27;</span>) &#123;</span><br><span class="line">            agent &#123; label <span class="string">&#x27;deploy-server&#x27;</span> &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                unstash <span class="string">&#x27;docker-compose.yml&#x27;</span></span><br><span class="line">                unstash <span class="string">&#x27;Dockerfile&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;sudo docker-compose up -d&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            junit <span class="string">&#x27;build/test-results/**/*.xml&#x27;</span></span><br><span class="line">            jacoco()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在整篇中我們可以看到大多都透過UI設定就完成了許多自動化的流程，而透過串接許多工具使流程自動化，就可以讓開發與維運減少成本。另外，若團隊專案有額外需求還可以客製化自己的插件，研究Jenkins插件撰寫也是不錯的點子。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> jenkins </tag>
            
            <tag> sonarqube </tag>
            
            <tag> maven </tag>
            
            <tag> gradle </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Webpack 和 Webpack Dev Server 打造前端專案環境</title>
      <link href="/posts/%E4%BD%BF%E7%94%A8Webpack%20%E5%92%8C%20Webpack%20Dev%20Server%E6%89%93%E9%80%A0%E5%89%8D%E7%AB%AF%E5%B0%88%E6%A1%88%E7%92%B0%E5%A2%83/"/>
      <url>/posts/%E4%BD%BF%E7%94%A8Webpack%20%E5%92%8C%20Webpack%20Dev%20Server%E6%89%93%E9%80%A0%E5%89%8D%E7%AB%AF%E5%B0%88%E6%A1%88%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什麼是Webpack"><a href="#什麼是Webpack" class="headerlink" title="什麼是Webpack?"></a>什麼是Webpack?</h3><p>Webpack 是一個前端模組打包(module bundler)工具，提供模組化開發方式。將各種靜態資源視為模組(如不同語言vue、sass、js…)，它會從進入點(entry point)開始分析專案結構，找出每個模組間的依賴關係，並分析其中是否有瀏覽器不能直接使用的語法or檔案。最後將每個模組透過編譯方式，轉換成瀏覽器所支援的檔案(html、 css、 js…)打包至指定的輸出資料夾。</p><p>如下圖：</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack.jpg" alt="webpack.jpg"></p><h3 id="為什麼要使用Webpack等前端打包工具"><a href="#為什麼要使用Webpack等前端打包工具" class="headerlink" title="為什麼要使用Webpack等前端打包工具?"></a>為什麼要使用Webpack等前端打包工具?</h3><p>隨著技術演進…前端不再是單純html、css、js，為了符合各種需求，開始開發各種框架、預處理器引進專案內，並使用模組化方式開發專案。然而瀏覽器並無法直接辨識這樣的專案內容，因此需要透過webpack等前端打包工具使用編譯的方式轉換成瀏覽器看得懂的內容。</p><h4 id="選擇webpack的原因"><a href="#選擇webpack的原因" class="headerlink" title="選擇webpack的原因"></a>選擇webpack的原因</h4><p>除了webpack當然還有許多打包工具，如gulp、parcel、esbuild等等，每個工具都有它的特點，而webpack是目前筆者在開發上順手的工具。</p><p>下圖為 <a href="https://2020.stateofjs.com/en-US/technologies/build-tools/">state of js</a> 的Build Tools調查，可以看到webpack至今使用率非常高。<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/2020-build-tool-rank.jpg" alt="2020-build-tool-rank.jpg"></p><h3 id="什麼是Webpack-Dev-Server"><a href="#什麼是Webpack-Dev-Server" class="headerlink" title="什麼是Webpack Dev Server?"></a>什麼是Webpack Dev Server?</h3><p>webpack-dev-server是webpack所開發的工具，它提供我們在開發中有一個基本的web server，並且具有  live reloading  功能。因此我們不需要等待每次從頭編譯煩人的時間～</p><p>在開發時，webpack只是幫我們做檔案編譯的動作而已，實際上我們還需要開一個web server才能瀏覽編譯後的檔案所渲染的網頁內容。</p><div class="note warning flat"><p><strong>live reloading (即時重載)</strong> ：常見又稱hot reload。主要闡述開發的同時能夠即時載入看到最新畫面<br>※webpack-dev-server提供 <strong>Hot Module Replacement(HMR)</strong> 模式，透過即時替換、添加或刪除模組來達到無須重新載入頁面即可看到最新畫面。</p></div><h3 id="Webpack-—watch-與-Webpack-Dev-Server差異"><a href="#Webpack-—watch-與-Webpack-Dev-Server差異" class="headerlink" title="Webpack —watch 與 Webpack Dev Server差異"></a>Webpack —watch 與 Webpack Dev Server差異</h3><p>先來解釋 <code>webpack --watch</code>。我們知道透過 <code>webpack</code> 指令會進行編譯動作，而 <code>webpack --watch</code> 則是執行編譯動作外，並且要啟用觀察模式；當檔案一有變動時就會立即重新編譯，所以不須每次手動輸入指令。</p><p>看到這會想說…欸～跟上面webpack-dev-server的概念好像一樣。沒錯，只不過詳細差別有：</p><div class="note info flat no-icon flat"><ul><li>webpack-dev-server有提供server</li><li>webpack-dev-server編譯之後不會寫入任何輸出檔案，而是將編譯後檔案存在記憶體內供server運行(畢竟只是當時開發用)</li><li>webpack-dev-server有HMR模式，無須刷新瀏覽器頁面即可看到最新畫面</li></ul></div><h2 id="實作重點"><a href="#實作重點" class="headerlink" title="實作重點"></a>實作重點</h2><ul><li>安裝webpack、webpack-cli、webpack-dev-server和webpack-merge</li><li>使用webpack –config、webpack-merge區分 dev 與 prod 環境設定檔</li><li>使用html-webpack-plugin自動輸出指定html並引入js</li><li>配置css、js、image模組編譯規則<ul><li>使用mini-css-extract-plugin輸出單獨CSS檔，支援CSS和SourceMap需要時載載入</li><li>使用css-loader處理在js中引入的css檔</li><li>使用optimize-css-assets-webpack-plugin優化、最小化CSS</li><li>使用babel-loader處理js語法轉換成能被瀏覽器支援的語法</li><li>使用file-loader處理引入的檔案物件、輸出目錄和它的url</li><li>使用url-loader將部分檔案轉base64編碼嵌入js中，以減少請求次數</li><li>使用image-webpack-loader將圖片壓縮優化</li></ul></li><li>安裝Vue(JavaScript Framework)、Tailwind CSS(CSS Framework)</li></ul><h2 id="建立新專案-amp-安裝Webpack相關套件"><a href="#建立新專案-amp-安裝Webpack相關套件" class="headerlink" title="建立新專案 &amp; 安裝Webpack相關套件"></a>建立新專案 &amp; 安裝Webpack相關套件</h2><h3 id="建立新專案"><a href="#建立新專案" class="headerlink" title="建立新專案"></a>建立新專案</h3><p>建立我們的專案目錄(webpack-dev-server-learning)，在專案目錄下輸入下方指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 參數-y為使用預設選項初始化</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>在目錄下會產生package.json檔，內容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack-dev-server-learning&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p><strong>npm(Node Package Manager)是基於Node.js的專案套件管理工具。</strong><br>透過npm，我們可以統一專案使用的套件版本以及設定環境，可以前往<a href="https://www.npmjs.com/">npm平台</a>查看所有提供的套件，其中套件的詳細資訊(Readme、依賴關係、安裝方式、github專案、下載數、各版本資訊)。<br>不同語言也有製作他們的套件管理工具，如：java的mvn</p></div><div class="note warning flat"><p><strong>在npm的世界我們一定要牢記的事：</strong></p><ul><li>有些套件還需要安裝其他依賴的套件才能使用</li><li>套件之間若有關聯會有版本相容問題</li><li>安裝前除了看套件的文件外，要去該套件的npm網站看各版本下載數，下載數多的相對較穩定，當然還是要記得<strong>版本相容</strong></li></ul></div><h3 id="安裝webpack、webpack-cli、webpack-dev-server和webpack-merge"><a href="#安裝webpack、webpack-cli、webpack-dev-server和webpack-merge" class="headerlink" title="安裝webpack、webpack-cli、webpack-dev-server和webpack-merge"></a>安裝webpack、webpack-cli、webpack-dev-server和webpack-merge</h3><p>首先解釋一下沒提到的webpack-cli、webpack-merge：</p><ul><li><strong>webpack-cli</strong> ：cli(Command-Line Interface)也就是命令列介面，由於webpack把cli部分獨立出來，因此我們需要安裝才能使用webpack的指令。</li><li><strong>webpack-merge</strong> ：幫助我們可以分別撰寫dev 和 prod 的 webpack設定檔</li></ul><h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><p>我這邊指定安裝webpack v4版本，以及其他下載數高的穩定版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --save-dev參數表示：套件關係只有在開發或測試的時候需要</span></span><br><span class="line">npm install webpack@4.46.0 webpack-dev-server@3.11.2 webpack-cli@3.3.12 webpack-merge@5.7.3 --save-dev</span><br></pre></td></tr></table></figure><p>安裝成功後，在package.json檔會幫我們新增內容，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack-dev-server-learning&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^4.46.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.12&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.11.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-merge&quot;</span>: <span class="string">&quot;^5.7.3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="測試環節"><a href="#測試環節" class="headerlink" title="測試環節"></a>測試環節</h4><p>接著我們先來測試是否能使用吧！</p><ol><li><p>先建立src目錄，並且在src目錄建立index.js，如下圖：</p><p> <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-src-index.jpg" alt="Untitled"></p></li><li><p>在package.json新增一條scripts，如下：(記得上一行的逗號)</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack-dev-server-learning&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^4.46.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.12&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.11.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-merge&quot;</span>: <span class="string">&quot;^5.7.3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>輸入下方指令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p> 若輸入結果如下圖就成功啦</p><p> <img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-install-output.jpg" alt="Untitled"></p></li></ol><h2 id="依-dev-和-prod-環境分別撰寫webpack設定檔"><a href="#依-dev-和-prod-環境分別撰寫webpack設定檔" class="headerlink" title="依 dev 和 prod 環境分別撰寫webpack設定檔"></a>依 dev 和 prod 環境分別撰寫webpack設定檔</h2><p>一般我們可以直接在根目錄撰寫 <code>webpack.config.js</code> 設定檔，但當我們開發與生產的環境設定不同時怎麼辦呢？若有些設定會相同，但又不想每次維護兩份檔案的話呢？</p><div class="note success flat"><ul><li>使用 <code>webpack --config</code> 參數來選取我們的需要的設定檔</li><li>使用 <code>webpack-merge</code> 套件幫助我們合併 <mark class="hl-label default">共用的</mark>  設定檔</li></ul></div><h3 id="依專案架構建立webpack設定檔"><a href="#依專案架構建立webpack設定檔" class="headerlink" title="依專案架構建立webpack設定檔"></a>依專案架構建立webpack設定檔</h3><h4 id="專案架構"><a href="#專案架構" class="headerlink" title="專案架構"></a>專案架構</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">│   ├── webpack.config.common.js <span class="comment"># 共用設定檔   </span></span><br><span class="line">│   ├── webpack.config.dev.js    <span class="comment"># 開發環境設定檔</span></span><br><span class="line">│   └── webpack.config.prod.js   <span class="comment"># 生產環境設定檔</span></span><br><span class="line">├── dist <span class="comment"># output輸出資料夾</span></span><br><span class="line">├── node_modules</span><br><span class="line">├── src</span><br><span class="line">│   └── index.js <span class="comment"># entry 入口點</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><h3 id="撰寫webpack共用設定檔-common"><a href="#撰寫webpack共用設定檔-common" class="headerlink" title="撰寫webpack共用設定檔(common)"></a>撰寫webpack共用設定檔(common)</h3><p>我們可以在webpack設定該專案編譯的根目錄(context)、入口點(entry)、輸出檔案名稱規則和位置(output)<br>可以看到我們的設定檔在build資料夾內，所以context必須指向外層才符合我們的需求</p><div class="tabs" id="依-dev-和-prod-環境分別撰寫webpack設定檔-撰寫webpack共用設定檔(common)"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#依-dev-和-prod-環境分別撰寫webpack設定檔-撰寫webpack共用設定檔(common)-1">webpack.config.common.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="依-dev-和-prod-環境分別撰寫webpack設定檔-撰寫webpack共用設定檔(common)-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>), <span class="comment">// 設定編譯時的根目錄</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p><code>path</code> 為node.js的模組<br><code>__dirname</code> 則是回傳執行的 js 檔所在資料夾的絕對路徑</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="撰寫webpack開發環境設定檔-dev"><a href="#撰寫webpack開發環境設定檔-dev" class="headerlink" title="撰寫webpack開發環境設定檔(dev)"></a>撰寫webpack開發環境設定檔(dev)</h3><p>設定檔中的<code>commonWebpackConfig</code>是我們剛剛寫的共用設定檔，利用merge將開發環境的設定與其合併。</p><div class="tabs" id="依-dev-和-prod-環境分別撰寫webpack設定檔-撰寫webpack開發環境設定檔(dev)"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#依-dev-和-prod-環境分別撰寫webpack設定檔-撰寫webpack開發環境設定檔(dev)-1">webpack.config.dev.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="依-dev-和-prod-環境分別撰寫webpack設定檔-撰寫webpack開發環境設定檔(dev)-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commonWebpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.common&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonWebpackConfig, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">      </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note warning flat"><p><code>mode</code> 設置為開發環境<br><code>devServer</code> 設置在webpack-dev-server的server環境</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="撰寫webpack生產環境設定檔-prod"><a href="#撰寫webpack生產環境設定檔-prod" class="headerlink" title="撰寫webpack生產環境設定檔(prod)"></a>撰寫webpack生產環境設定檔(prod)</h3><p>大致設定與開發環境相同，<code>mode</code>改為生產環境、生產環境不需要使用dev-server</p><div class="tabs" id="依-dev-和-prod-環境分別撰寫webpack設定檔-寫webpack生產環境設定檔(prod)"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#依-dev-和-prod-環境分別撰寫webpack設定檔-寫webpack生產環境設定檔(prod)-1">webpack.config.prod.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="依-dev-和-prod-環境分別撰寫webpack設定檔-寫webpack生產環境設定檔(prod)-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commonWebpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.common&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonWebpackConfig, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">      </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="測試環節-1"><a href="#測試環節-1" class="headerlink" title="測試環節"></a>測試環節</h3><p>既然初步的webpack環境已經設定好了那就來測試是否能如期運行吧！</p><div class="tabs" id="依-dev-和-prod-環境分別撰寫webpack設定檔-功能測試"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#依-dev-和-prod-環境分別撰寫webpack設定檔-功能測試-1">開發環境</button></li><li class="tab"><button type="button" data-href="#依-dev-和-prod-環境分別撰寫webpack設定檔-功能測試-2">生產環境</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="依-dev-和-prod-環境分別撰寫webpack設定檔-功能測試-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>執行後若如下圖表示成功了，但由於我們沒有設置<code>index.html</code> 所以只能看到根目錄</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-dev-compile-output.jpg" alt="Untitled"></p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-dev-compile-demo.jpg" alt="Untitled"></p><div class="note warning flat"><p>關於html部份，由於進入點(entry)的index.js不用把html引入，反而是html需要引入index.js。因此我們會需要html-webpack-plugin套件幫助我們編譯後直接幫我們的html樣本引入編譯好的js檔案。</p></div><h4 id="安裝html-webpack-plugin"><a href="#安裝html-webpack-plugin" class="headerlink" title="安裝html-webpack-plugin"></a>安裝html-webpack-plugin</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin@4.5.2 --save-dev</span><br></pre></td></tr></table></figure><ul><li>在webpack.config.common.js增加插件設定設定</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>), <span class="comment">// 設定編譯時的根目錄</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>新增src/index.html檔案</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此我們再次執行就會得到空白的畫面以及console面板的Hello World!</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-dev-server-console.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="依-dev-和-prod-環境分別撰寫webpack設定檔-功能測試-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>沒意外的話，輸入資料夾dist中應該會有main.bundle.js以及剛剛加入的plugin所幫我們產生的index.html<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-html-plugin.jpg" alt="Untitled"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="添加Webpack模組編譯規則"><a href="#添加Webpack模組編譯規則" class="headerlink" title="添加Webpack模組編譯規則"></a>添加Webpack模組編譯規則</h2><p>我們已經將基本環境架構設置完畢了，接著就可以依需求安裝需要的套件跟按照環境撰寫不同的設定。不過我們為了能夠編譯各種靜態資源還得個別添加模組規則。</p><h3 id="為什麼要添加模組編譯規則"><a href="#為什麼要添加模組編譯規則" class="headerlink" title="為什麼要添加模組編譯規則"></a>為什麼要添加模組編譯規則</h3><p>事實上webpack並不知道你的靜態資源要怎麼編譯，而且它沒辦法獨立完成這項作業。在下圖可以看到我添加了css檔案並在index.js引入，編譯後出現錯誤訊息。<br><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-css-fail-output.jpg" alt="Untitled"></p><div class="note danger flat"><p>「 你需要<strong>合適的loader</strong>來處理這個<strong>檔案類型</strong>，目前這個檔案類型沒有設定任何的loader 」</p></div><p>由此可以得知我們必須添加規則設置loader給css的類型檔案，另外webpack本身並沒有各種靜態資源的loader，因此我們還需要額外安裝。</p><p>所以添加模組規則會有2件事情要執行：</p><ol><li><strong>安裝需要的loader</strong></li><li><strong>在webpack設定檔撰寫模組編譯規則</strong></li></ol><h3 id="添加CSS編譯規則"><a href="#添加CSS編譯規則" class="headerlink" title="添加CSS編譯規則"></a>添加CSS編譯規則</h3><p>若要編譯CSS我們必須安裝mini-css-extract-plugin(或style-loader)和css-loader，先解釋他們分別處理什麼：</p><div class="note info flat"><p><strong>mini-css-extract-plugin</strong> ：為每個包含 CSS 的 JS 檔案創建一個單獨的 CSS 檔，且支援CSS和SourceMap需要時載載入<br><strong>style-loader</strong> ：將CSS注入到HTML的 <code>&lt;style&gt;&lt;/style&gt;</code> 標籤上<br><strong>css-loader</strong> ：處理在js中用 <code>@import url() || import/require()</code> 引入的css檔(還只是個檔案)</p></div><p>可以看到mini-css-extract-plugin已經幫我們處理style-loader的工作了，且功能更豐富</p><h4 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mini-css-extract-plugin@1.6.2 css-loader@4.3.0 --save-dev</span><br></pre></td></tr></table></figure><h4 id="撰寫模組編譯規則"><a href="#撰寫模組編譯規則" class="headerlink" title="撰寫模組編譯規則"></a>撰寫模組編譯規則</h4><div class="tabs" id="添加css編譯規則-撰寫模組編譯規則"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#添加css編譯規則-撰寫模組編譯規則-1">webpack.config.common.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="添加css編譯規則-撰寫模組編譯規則-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>), <span class="comment">// 設定編譯時的根目錄</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                use: [ MiniCssExtractPlugin.loader, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note warning flat"><p>在rule中以物件方式加入各個規則<br>其中test辨別該規則的條件(使用正則表示法)，如上述為符合css檔案<br>一個rule可以設置多個loader，但這邊要注意執行順序是(由下至上、由右至左)</p></div><p>在生產環境中我們可以使用optimize-css-assets-webpack-plugin外掛來優化、最小化CSS</p><h4 id="安裝optimize-css-assets-webpack-plugin"><a href="#安裝optimize-css-assets-webpack-plugin" class="headerlink" title="安裝optimize-css-assets-webpack-plugin"></a>安裝optimize-css-assets-webpack-plugin</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install optimize-css-assets-webpack-plugin@5.0.4 --save-dev</span><br></pre></td></tr></table></figure><h4 id="加入插件"><a href="#加入插件" class="headerlink" title="加入插件"></a>加入插件</h4><div class="tabs" id="安裝optimize-css-assets-webpack-plugin-加入插件"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#安裝optimize-css-assets-webpack-plugin-加入插件-1">webpack.config.prod.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="安裝optimize-css-assets-webpack-plugin-加入插件-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commonWebpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.common&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonWebpackConfig, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">            <span class="attr">cssProcessorPluginOptions</span>: &#123;</span><br><span class="line">              <span class="attr">preset</span>: [<span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125;],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="測試環節-2"><a href="#測試環節-2" class="headerlink" title="測試環節"></a>測試環節</h4><p>若成功的話，在開發環境的網頁上可以看到我們套用的CSS囉！在生產環境則在dist/main.css可以看到壓縮後的css</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-css-min-compile.jpg" alt="Untitled"></p><h3 id="添加JS編譯規則"><a href="#添加JS編譯規則" class="headerlink" title="添加JS編譯規則"></a>添加JS編譯規則</h3><p>webpack預設支援編譯js檔，但無法將ES6以上版本語法編譯至ES5版本。雖然大多瀏覽器開始支援ES6語法，不過ES5版本還是較為穩定且兼容度高。babel是專門處理JavaScript編譯器的工具，因此這裡需要使用babel-loader幫助我們轉換ES6以上版本語法。</p><h4 id="安裝指令-1"><a href="#安裝指令-1" class="headerlink" title="安裝指令"></a>安裝指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader@8.2.2 @babel/core@7.15.5 @babel/preset-env@7.15.4 --save-dev</span><br></pre></td></tr></table></figure><div class="note warning flat"><p><strong>@babel/core</strong> 為babel的核心<br><strong>@babel/preset-env</strong> 為將大部分瀏覽器尚未支援的 js語法轉換成能被瀏覽器支援的語法</p></div><h4 id="撰寫模組編譯規則-1"><a href="#撰寫模組編譯規則-1" class="headerlink" title="撰寫模組編譯規則"></a>撰寫模組編譯規則</h4><div class="tabs" id="添加js編譯規則-撰寫模組編譯規則"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#添加js編譯規則-撰寫模組編譯規則-1">webpack.config.common.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="添加js編譯規則-撰寫模組編譯規則-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>), <span class="comment">// 設定編譯時的根目錄</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                use: [ MiniCssExtractPlugin.loader, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: <span class="string">&quot;defaults&quot;</span> &#125;]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="測試環節-3"><a href="#測試環節-3" class="headerlink" title="測試環節"></a>測試環節</h4><p>這邊我使用es6的物件解構。若成功的話，編譯後檔案會發現看不到這種語法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = &#123;</span><br><span class="line">    <span class="attr">year</span>: <span class="number">2021</span>,</span><br><span class="line">    <span class="attr">month</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">day</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;year, month&#125; = date</span><br><span class="line"><span class="built_in">console</span>.log(year,month)</span><br></pre></td></tr></table></figure><h3 id="添加image編譯規則"><a href="#添加image編譯規則" class="headerlink" title="添加image編譯規則"></a>添加image編譯規則</h3><p>圖片類型的靜態資源，我們也必須給予編譯規則。這邊會用到url-loader、file-loader、image-webpack-loader三種loader，以下分別為他們的用途。</p><div class="note info flat"><p><strong>url-loader</strong> ：載入檔案並轉為base64編碼，嵌入至js檔內<br><strong>file-loader</strong> ：處理引入的檔案物件、輸出目錄和它的url<br><strong>image-webpack-loader</strong> ：將圖片壓縮優化</p></div><p>一般file-loader就能讓我們可以正常使用了，而url-loader可以設定檔案下限，將檔案嵌入js檔減少之後網頁渲染時request次數。</p><h4 id="安裝指令-2"><a href="#安裝指令-2" class="headerlink" title="安裝指令"></a>安裝指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader@4.1.1 file-loader@6.2.0 image-webpack-loader@7.0.1</span><br></pre></td></tr></table></figure><h4 id="撰寫模組編譯規則-2"><a href="#撰寫模組編譯規則-2" class="headerlink" title="撰寫模組編譯規則"></a>撰寫模組編譯規則</h4><div class="tabs" id="添加image編譯規則-撰寫模組編譯規則"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#添加image編譯規則-撰寫模組編譯規則-1">webpack.config.dev.js</button></li><li class="tab"><button type="button" data-href="#添加image編譯規則-撰寫模組編譯規則-2">webpack.config.prod.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="添加image編譯規則-撰寫模組編譯規則-1"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commonWebpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.common&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonWebpackConfig, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|jfif|svg)$/i</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&#x27;assets/images/[hash:7].[ext]&#x27;</span>,</span><br><span class="line">                            <span class="attr">limit</span>: <span class="number">8192</span>,</span><br><span class="line">                            <span class="attr">esModule</span>: <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="添加image編譯規則-撰寫模組編譯規則-2"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commonWebpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.common&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonWebpackConfig, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">            <span class="attr">cssProcessorPluginOptions</span>: &#123;</span><br><span class="line">              <span class="attr">preset</span>: [<span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125;],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|jfif|svg)$/i</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&#x27;assets/images/[hash:7].[ext]&#x27;</span>,</span><br><span class="line">                            <span class="attr">limit</span>: <span class="number">8192</span>,</span><br><span class="line">                            <span class="attr">esModule</span>: <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;image-webpack-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">mozjpeg</span>: &#123;</span><br><span class="line">                                <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">                                <span class="attr">quality</span>: <span class="number">65</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">optipng</span>: &#123;</span><br><span class="line">                                <span class="attr">enabled</span>: <span class="literal">false</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">pngquant</span>: &#123;</span><br><span class="line">                                <span class="attr">quality</span>: [<span class="number">0.65</span>, <span class="number">0.9</span>],</span><br><span class="line">                                <span class="attr">speed</span>: <span class="number">4</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">gifsicle</span>: &#123;</span><br><span class="line">                                <span class="attr">interlaced</span>: <span class="literal">false</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">webp</span>: &#123;</span><br><span class="line">                                <span class="attr">quality</span>: <span class="number">75</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="測試環節-4"><a href="#測試環節-4" class="headerlink" title="測試環節"></a>測試環節</h4><p>我們試著拿幾張不同大小的圖片引入js檔編譯看看</p><p>如下圖可以看到原始資產中有3張圖片，但輸出資料夾只有2張，因為有一張圖片大小僅5KB，而我們在url-loader設置的限制為10KB，因此被以base64編碼寫至main.bundle.js</p><p><img src="https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/webpack-image-loader-prod-output.jpg" alt="Untitled"></p><div class="note warning flat"><p>file-loader處理檔案物件，也可以應用在音訊、字型、文件檔等等<br>url-loader也是相同概念，不過要注意大小限制，過度使用反而讓js檔肥大</p></div><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完可以發現並沒有什麼太複雜的概念，webpack就像一個容器讓我們組裝所需的內容, 而只要知道各個零件的用途與設置就可以添加各個需求。不過webpack依然還有須多可以研究的，例如考量網頁效能與體驗上如何最佳化編譯靜態資源將會是很重要的課題。</p><p>最後附上本次實作的程式碼</p><div><a class='link-card' title='https://github.com/SP12893678/webpack-dev-server-learning' href='https://github.com/SP12893678/webpack-dev-server-learning'><div class='left'><img src=https://cdn.jsdelivr.net/gh/sp12893678/blog@gh-pages/img/github.svg></div><div class='right'><p class='text'>webpack-dev-server-learning</p><p class='url'>https://github.com/SP12893678/webpack-dev-server-learning</p></div></a></div>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端打包工具 </tag>
            
            <tag> webpack </tag>
            
            <tag> webpack-dev-server </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
